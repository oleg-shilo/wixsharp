<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WixSharp</name>
    </assembly>
    <members>
        <member name="T:WixSharp.Action">
            <summary>
            Defines generic WiX CustomAction. 
            <para>
            This class does not contain any public constructor and is only to be used 
            as a base class for deriving specialized CustomActions (e.g. <see cref="T:WixSharp.ManagedAction"></see>)
            or for declaring heterogeneous collections.
            </para>
            </summary>
            <example>The following is an example of initializing an
            <c>Action</c> type:
            <code>
            var project = new Project()
                          {
                            Actions = new WixSharp.Action[] 
                            { 
                                new ManagedAction(@"FindSQLServerInstance"),
                                new QtCmdLineAction("notepad.exe", @"C:\boot.ini"))
                             },
                             ...
            </code>
            </example>
        </member>
        <member name="F:WixSharp.Action.count">
            <summary>
            Global counter which is used as suffix for the automatically generated action name. This counter is used by
            Wix# engine to avoid naming collision and indicate <c>CustomActions</c> declaration order.
            </summary>
        </member>
        <member name="M:WixSharp.Action.#ctor">
            <summary>
            Default constructor. Creates instance of the <see cref="T:WixSharp.Action"></see> class.
            </summary>
        </member>
        <member name="M:WixSharp.Action.#ctor(WixSharp.Id)">
            <summary>
            Creates instance of the <see cref="T:WixSharp.Action"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.Action"/> instance.</param>
        </member>
        <member name="M:WixSharp.Action.#ctor(WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Creates instance of the <see cref="T:WixSharp.Action"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.Action"/>.</param>
        </member>
        <member name="M:WixSharp.Action.#ctor(WixSharp.Id,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Creates instance of the <see cref="T:WixSharp.Action"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.Action"/> instance.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.Action"/>.</param>
        </member>
        <member name="M:WixSharp.Action.#ctor(WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Creates instance of the <see cref="T:WixSharp.Action"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.Action"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="M:WixSharp.Action.#ctor(WixSharp.Id,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Creates instance of the <see cref="T:WixSharp.Action"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.Action"/> instance.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.Action"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="F:WixSharp.Action.Execute">
            <summary>
            Defines <see cref="F:WixSharp.Action.Execute"/> the action associated with.
            </summary>
        </member>
        <member name="F:WixSharp.Action.Impersonate">
            <summary>
            This attribute specifies whether the Windows Installer, which executes as LocalSystem, should impersonate the user context of the
            installing user when executing this custom action. Typically the value should be <c>true</c>, except when the custom action needs 
            elevated privileges to apply changes to the machine.
            </summary>
        </member>
        <member name="F:WixSharp.Action.Sequence">
            <summary>
            Defines <see cref="F:WixSharp.Action.Sequence"/> the action belongs to.
            </summary>
        </member>
        <member name="F:WixSharp.Action.Return">
            <summary>
            Defines <see cref="F:WixSharp.Action.Return"/> type of the action.
            </summary>
        </member>
        <member name="F:WixSharp.Action.Step">
            <summary>
            Defines at what <see cref="F:WixSharp.Action.Step"/> the action should be executed during the installation.
            </summary>
        </member>
        <member name="F:WixSharp.Action.When">
            <summary>
            Defines order <see cref="F:WixSharp.Action.When"/> the action should be executed with respect to the action <see cref="F:WixSharp.Action.Step"/>.
            </summary>
        </member>
        <member name="F:WixSharp.Action.Condition">
            <summary>
            Defines the launch <see cref="F:WixSharp.Action.Condition"/>, which is to be checked during the installation to 
            determine if the actions should be executed.
            </summary>
        </member>
        <member name="F:WixSharp.Action.SequenceNumber">
            <summary>
            The sequence number for this action. Mutually exclusive with Before, After, and OnExit of <see cref="F:WixSharp.Action.When"/> field.
            </summary>
        </member>
        <member name="M:WixSharp.Action.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:WixSharp.CommonTasks.AppSearch">
            <summary>
            The utility class implementing the common 'MSI AppSearch' tasks (Directory, File, Registry and Product searches).
            </summary>
        </member>
        <member name="M:WixSharp.CommonTasks.AppSearch.GetProductCode(System.String)">
            <summary>
            Gets the 'product code' of the installed product.
            </summary>
            <param name="name">The product name.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.AppSearch.GetProducts">
            <summary>
            Gets array of 'product codes' (GUIDs) of all installed products.
            </summary>
        </member>
        <member name="M:WixSharp.CommonTasks.AppSearch.GetRelatedProducts(System.String)">
            <summary>
            Gets the related products (products with the same <c>UpgradeCode</c>).
            </summary>
            <param name="upgradeCode">The upgrade code.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.AppSearch.GetProductName(System.String)">
            <summary>
            Gets the 'product name' of the installed product.
            </summary>
            <param name="productCode">The product code.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.AppSearch.GetProductVersionFromUpgradeCode(System.String)">
            <summary>
            Gets the version of the installed product from its 'upgrade code'.
            <code>
            static void project_BeforeInstall(SetupEventArgs e)
            {
               var detectedVersion = AppSearch.GetProductVersionFromUpgradeCode(e.UpgradeCode);
            }
            </code>
            </summary>
            <param name="upgradeCode">The product Version.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.AppSearch.GetProductVersion(System.String)">
            <summary>
            Gets the 'product version' of the installed product.
            </summary>
            <param name="productCode">The product code.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.AppSearch.IsProductInstalled(System.String)">
            <summary>
            Determines whether the product is installed.
            Caution: if invoked from elevated/deferred action the result is inconclusive.
            </summary>
            <param name="productCode">The product code.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.AppSearch.FileExists(System.String)">
            <summary>
            Determines whether the file exists.
            </summary>
            <param name="file">The file path.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.AppSearch.DirExists(System.String)">
            <summary>
            Determines whether the dir exists.
            </summary>
            <param name="dir">The directory path.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.AppSearch.IniFileToDictionary(System.String,System.Text.Encoding)">
            <summary>
            Converts INI file content into dictionary.
            </summary>
            <param name="iniFile">The INI file.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.AppSearch.IniFileValue(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            Returns INI file the field value.
            <para>It returns null if file or the field not found.</para>
            </summary>
            <param name="file">The INI file path.</param>
            <param name="section">The section.</param>
            <param name="field">The field.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.AppSearch.RegKeyExists(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Determines whether the registry key exists.
            </summary>
            <param name="root">The root.</param>
            <param name="keyPath">The key path.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.AppSearch.GetRegValue(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Gets the registry value.
            </summary>
            <param name="root">The root.</param>
            <param name="keyPath">The key path.</param>
            <param name="valueName">Name of the value.</param>
            <returns></returns>
        </member>
        <member name="T:WixSharp.CommonTasks.Tasks">
             <summary>
            
             </summary>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.BuildBootstrapper(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
             <summary>
             Builds the bootstrapper.
             </summary>
             <param name="prerequisiteFile">The prerequisite file.</param>
             <param name="primaryFile">The primary setup file.</param>
             <param name="outputFile">The output (bootsrtapper) file.</param>
             <param name="prerequisiteRegKeyValue">The prerequisite registry key value.
             <para>This value is used to determine if the <c>PrerequisiteFile</c> should be launched.</para>
             <para>This value must comply with the following pattern: &lt;RegistryHive&gt;:&lt;KeyPath&gt;:&lt;ValueName&gt;.</para>
             <code>PrerequisiteRegKeyValue = @"HKLM:Software\My Company\My Product:Installed";</code>
             Existence of the specified registry value at runtime is interpreted as an indication of the <c>PrerequisiteFile</c> has been alreday installed.
             Thus bootstrapper will execute <c>PrimaryFile</c> without launching <c>PrerequisiteFile</c> first.</param>
             <param name="doNotPostVerifyPrerequisite">The flag which allows you to disable verification of <c>PrerequisiteRegKeyValue</c> after the prerequisite setup is completed.
             <para>Normally if <c>bootstrapper</c> checks if <c>PrerequisiteRegKeyValue</c>/> exists straight after the prerequisite installation and starts
             the primary setup only if it does.</para>
             <para>It is possible to instruct bootstrapper to continue with the primary setup regardless of the prerequisite installation outcome. This can be done
             by setting DoNotPostVerifyPrerequisite to <c>true</c> (default is <c>false</c>)</para>
            </param>
             <param name="optionalArguments">The optional arguments for the bootstrapper compiler.</param>
             <returns>Path to the built bootstrapper file. Returns <c>null</c> if bootstrapper cannot be built.</returns>
            
             <example>The following is an example of building bootstrapper <c>Setup.msi</c> for deploying .NET along with the <c>MyProduct.msi</c> file.
             <code>
             WixSharp.CommonTasks.Tasks.BuildBootstrapper(
                     @"C:\downloads\dotnetfx.exe",
                     "MainProduct.msi",
                     "setup.exe",
                     @"HKLM:Software\My Company\My Product:Installed"
                     false,
                     "");
             </code>
             </example>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.BuildBootstrapper(System.String,System.String,System.String,System.String,System.Boolean)">
             <summary>
             Builds the bootstrapper.
             </summary>
             <param name="prerequisiteFile">The prerequisite file.</param>
             <param name="primaryFile">The primary setup file.</param>
             <param name="outputFile">The output (bootsrtapper) file.</param>
             <param name="prerequisiteRegKeyValue">The prerequisite registry key value.
             <para>This value is used to determine if the <c>PrerequisiteFile</c> should be launched.</para>
             <para>This value must comply with the following pattern: &lt;RegistryHive&gt;:&lt;KeyPath&gt;:&lt;ValueName&gt;.</para>
             <code>PrerequisiteRegKeyValue = @"HKLM:Software\My Company\My Product:Installed";</code>
             Existence of the specified registry value at runtime is interpreted as an indication of the <c>PrerequisiteFile</c> has been already installed.
             Thus bootstrapper will execute <c>PrimaryFile</c> without launching <c>PrerequisiteFile</c> first.</param>
             <param name="doNotPostVerifyPrerequisite">The flag which allows you to disable verification of <c>PrerequisiteRegKeyValue</c> after the prerequisite setup is completed.
             <para>Normally if <c>bootstrapper</c> checkers if <c>PrerequisiteRegKeyValue</c>/> exists straight after the prerequisite installation and starts
             the primary setup only if it does.</para>
             <para>It is possible to instruct bootstrapper to continue with the primary setup regardless of the prerequisite installation outcome. This can be done
             by setting DoNotPostVerifyPrerequisite to <c>true</c> (default is <c>false</c>)</para>
            </param>
             <returns>Path to the built bootstrapper file. Returns <c>null</c> if bootstrapper cannot be built.</returns>
            
             <example>The following is an example of building bootstrapper <c>Setup.msi</c> for deploying .NET along with the <c>MyProduct.msi</c> file.
             <code>
             WixSharp.CommonTasks.Tasks.BuildBootstrapper(
                     @"C:\downloads\dotnetfx.exe",
                     "MainProduct.msi",
                     "setup.exe",
                     @"HKLM:Software\My Company\My Product:Installed"
                     false);
             </code>
             </example>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.BuildBootstrapper(System.String,System.String,System.String,System.String)">
            <summary>
            Builds the bootstrapper.
            </summary>
            <param name="prerequisiteFile">The prerequisite file.</param>
            <param name="primaryFile">The primary setup file.</param>
            <param name="outputFile">The output (bootsrtapper) file.</param>
            <param name="prerequisiteRegKeyValue">The prerequisite registry key value.
            <para>This value is used to determine if the <c>PrerequisiteFile</c> should be launched.</para>
            <para>This value must comply with the following pattern: &lt;RegistryHive&gt;:&lt;KeyPath&gt;:&lt;ValueName&gt;.</para>
            <code>PrerequisiteRegKeyValue = @"HKLM:Software\My Company\My Product:Installed";</code>
            Existence of the specified registry value at runtime is interpreted as an indication of the <c>PrerequisiteFile</c> has been already installed.
            Thus bootstrapper will execute <c>PrimaryFile</c> without launching <c>PrerequisiteFile</c> first.</param>
            <returns>Path to the built bootstrapper file. Returns <c>null</c> if bootstrapper cannot be built.</returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.DigitalySign(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
             <summary>
             Applies digital signature to a file (e.g. msi, exe, dll) with MS <c>SignTool.exe</c> utility.
             Please use <see cref="M:WixSharp.CommonTasks.Tasks.DigitalySignBootstrapper(System.String,System.String,System.String,System.String,System.String,System.String)"/> for signing a bootstrapper.
             </summary>
             <param name="fileToSign">The file to sign.</param>
             <param name="pfxFile">Specify the signing certificate in a file. If this file is a PFX with a password, the password may be supplied
             with the <c>password</c> parameter.</param>
             <param name="timeURL">The timestamp server's URL. If this option is not present (pass to null), the signed file will not be timestamped.
             A warning is generated if timestamping fails.</param>
             <param name="password">The password to use when opening the PFX file. Should be <c>null</c> if no password required.</param>
             <param name="optionalArguments">Extra arguments to pass to the <c>SignTool.exe</c> utility.</param>
             <param name="wellKnownLocations">The optional ';' separated list of directories where SignTool.exe can be located.
             If this parameter is not specified WixSharp will try to locate the SignTool in the built-in well-known locations (system PATH)</param>
             <param name="useCertificateStore">A flag indicating if the value of <c>pfxFile</c> is a name of the subject of the signing certificate
             from the certificate store (as opposite to the certificate file). This value can be a substring of the entire subject name.</param>
             <returns>Exit code of the <c>SignTool.exe</c> process.</returns>
            
             <example>The following is an example of signing <c>Setup.msi</c> file.
             <code>
             WixSharp.CommonTasks.Tasks.DigitalySign(
                 "Setup.msi",
                 "MyCert.pfx",
                 "http://timestamp.verisign.com/scripts/timstamp.dll",
                 "MyPassword",
                 null,
                 false);
             </code>
             </example>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.DigitalySignBootstrapper(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Applies digital signature to a bootstrapper and the bootstrapper engine with MS <c>SignTool.exe</c> utility.
             <a href="http://wixtoolset.org/documentation/manual/v3/overview/insignia.html">See more about bootstrapper engine signing</a>
             </summary>
             <param name="bootstrapperFileToSign">The bootstrapper file to sign.</param>
             <param name="pfxFile">Specify the signing certificate in a file. If this file is a PFX with a password, the password may be supplied
             with the <c>password</c> parameter.</param>
             <param name="timeURL">The timestamp server's URL. If this option is not present (pass to null), the signed file will not be timestamped.
             A warning is generated if timestamping fails.</param>
             <param name="password">The password to use when opening the PFX file. Should be <c>null</c> if no password required.</param>
             <param name="optionalArguments">Extra arguments to pass to the <c>SignTool.exe</c> utility.</param>
             <param name="wellKnownLocations">The optional ';' separated list of directories where SignTool.exe can be located.
             If this parameter is not specified WixSharp will try to locate the SignTool in the built-in well-known locations (system PATH)</param>
             <returns>Exit code of the <c>SignTool.exe</c> process.</returns>
            
             <example>The following is an example of signing <c>SetupBootstrapper.exe</c> file.
             <code>
             WixSharp.CommonTasks.Tasks.DigitalySignBootstrapper(
                 "SetupBootstrapper.exe",
                 "MyCert.pfx",
                 "http://timestamp.verisign.com/scripts/timstamp.dll",
                 "MyPassword",
                 null);
             </code>
             </example>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.DigitalySignBootstrapperEngine(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Applies digital signature to a bootstrapper engine with MS <c>SignTool.exe</c> utility.
             Note : this method doesn't sign the bootstrapper file but the engine only.
             Please use <see cref="M:WixSharp.CommonTasks.Tasks.DigitalySignBootstrapper(System.String,System.String,System.String,System.String,System.String,System.String)"/> for signing both (bootstrapper and bootstrapper engine) instead.
             <a href="http://wixtoolset.org/documentation/manual/v3/overview/insignia.html">See more about Bootstrapper engine signing</a>
             </summary>
             <param name="bootstrapperFileToSign">The Bootstrapper file to sign.</param>
             <param name="pfxFile">Specify the signing certificate in a file. If this file is a PFX with a password, the password may be supplied
             with the <c>password</c> parameter.</param>
             <param name="timeURL">The timestamp server's URL. If this option is not present (pass to null), the signed file will not be timestamped.
             A warning is generated if timestamping fails.</param>
             <param name="password">The password to use when opening the PFX file. Should be <c>null</c> if no password required.</param>
             <param name="optionalArguments">Extra arguments to pass to the <c>SignTool.exe</c> utility.</param>
             <param name="wellKnownLocations">The optional ';' separated list of directories where SignTool.exe can be located.
             If this parameter is not specified WixSharp will try to locate the SignTool in the built-in well-known locations (system PATH)</param>
             <returns>Exit code of the <c>SignTool.exe</c> process.</returns>
            
             <example>The following is an example of signing <c>SetupBootstrapper.exe</c> file engine.
             <code>
             WixSharp.CommonTasks.Tasks.DigitalySignBootstrapperEngine(
                 "SetupBootstrapper.exe",
                 "MyCert.pfx",
                 "http://timestamp.verisign.com/scripts/timstamp.dll",
                 "MyPassword",
                  null);
             </code>
             </example>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.DigitalySign(System.String,System.String,System.String,System.String)">
             <summary>
             Applies digital signature to a file (e.g. msi, exe, dll) with MS <c>SignTool.exe</c> utility.
             <para>If you need to specify extra SignTool.exe parameters or the location of the tool use the overloaded <c>DigitalySign</c> signature </para>
             </summary>
             <param name="fileToSign">The file to sign.</param>
             <param name="pfxFile">Specify the signing certificate in a file. If this file is a PFX with a password, the password may be supplied
             with the <c>password</c> parameter.</param>
             <param name="timeURL">The timestamp server's URL. If this option is not present, the signed file will not be timestamped.
             A warning is generated if timestamping fails.</param>
             <param name="password">The password to use when opening the PFX file.</param>
             <returns>Exit code of the <c>SignTool.exe</c> process.</returns>
            
             <example>The following is an example of signing <c>Setup.msi</c> file.
             <code>
             WixSharp.CommonTasks.Tasks.DigitalySign(
                 "Setup.msi",
                 "MyCert.pfx",
                 "http://timestamp.verisign.com/scripts/timstamp.dll",
                 "MyPassword");
             </code>
             </example>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.ImportRegFile(System.String)">
             <summary>
             Imports the reg file.
             </summary>
             <param name="regFile">The reg file.</param>
             <returns></returns>
             <example>The following is an example of importing registry entries from the *.reg file.
             <code>
             var project =
                 new Project("MyProduct",
                     new Dir(@"%ProgramFiles%\My Company\My Product",
                         new File(@"readme.txt")),
                     ...
            
             project.RegValues = CommonTasks.Tasks.ImportRegFile("app_settings.reg");
            
             Compiler.BuildMsi(project);
             </code>
             </example>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.ImportRegFile(WixSharp.Project,System.String)">
             <summary>
             Imports the reg file. It is nothing else but an extension method version of the 'plain' <see cref="T:WixSharp.CommonTasks.Tasks.ImportRegFile"/>.
             </summary>
             <param name="project">The project object.</param>
             <param name="regFile">The reg file.</param>
             <returns></returns>
             <example>The following is an example of importing registry entries from the *.reg file.
             <code>
             var project =
                 new Project("MyProduct",
                     new Dir(@"%ProgramFiles%\My Company\My Product",
                         new File(@"readme.txt")),
                     ...
            
             project.ImportRegFile("app_settings.reg");
            
             Compiler.BuildMsi(project);
             </code>
             </example>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.AddProperty(WixSharp.Project,WixSharp.Property[])">
            <summary>
            Adds the property.
            </summary>
            <param name="project">The project.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.AddAction(WixSharp.Project,WixSharp.Action[])">
            <summary>
            Adds the action.
            </summary>
            <param name="project">The project.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.AddDir(WixSharp.Project,WixSharp.Dir[])">
            <summary>
            Adds the dir.
            </summary>
            <param name="project">The project.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.AddRegValue(WixSharp.Project,WixSharp.RegValue[])">
            <summary>
            Adds the registry value.
            </summary>
            <param name="project">The project.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.AddBinary(WixSharp.Project,WixSharp.Binary[])">
            <summary>
            Adds the binary.
            </summary>
            <param name="project">The project.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="F:WixSharp.CommonTasks.Tasks.UILocalize">
            <summary>
            Localizes the string from the specified localization delegate 'localize'.
            <para>This field is initialized by ManagedUI with the localization routine
            that is specific for the MSI being executed. You can use this delegate to
            do the localization of user content at runtime.</para>
            <code>
            var localized = Tasks.UILocalize("A later version of [ProductName] is already installed. Setup will now exit.");
            </code>
            </summary>
        </member>
        <member name="T:WixSharp.CommonTasks.Tasks.DowngradeErrorCheck">
            <summary>
            Delegate for detection of the "downgrade" condition. Should return <c>true</c> if the downgrading is detected.
            </summary>
            <param name="thisVersion">The version of the product being installed.</param>
            <param name="installedVersion">The detected installed product version.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.AddEnvironmentVariable(WixSharp.Project,WixSharp.EnvironmentVariable[])">
            <summary>
            Adds the environment variable.
            </summary>
            <param name="project">The project.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.AddRefAssembly(WixSharp.ManagedAction,System.String[])">
            <summary>
            Adds the assembly reference.
            </summary>
            <param name="action">The action.</param>
            <param name="files">The files.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.AddAssociation(WixSharp.File,WixSharp.FileAssociation[])">
            <summary>
            Adds the file association.
            </summary>
            <param name="file">The file.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.AddShortcut(WixSharp.File,WixSharp.FileShortcut[])">
            <summary>
            Adds the shortcut.
            </summary>
            <param name="file">The file.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.AddDir(WixSharp.Dir,WixSharp.Dir[])">
            <summary>
            Adds the dir.
            </summary>
            <param name="dir">The dir.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.AddFile(WixSharp.Dir,WixSharp.File[])">
            <summary>
            Adds the file.
            </summary>
            <param name="dir">The dir.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.AddShortcut(WixSharp.Dir,WixSharp.ExeFileShortcut[])">
            <summary>
            Adds the shortcut.
            </summary>
            <param name="dir">The dir.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.AddFeatures(WixSharp.Dir,WixSharp.Feature[])">
            <summary>
            Adds the features.
            </summary>
            <param name="dir">The dir.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.AddFeature(WixSharp.Dir,WixSharp.Feature[])">
            <summary>
            Adds the feature(s).
            </summary>
            <param name="dir">The dir.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.AddMergeModule(WixSharp.Dir,WixSharp.Merge[])">
            <summary>
            Adds the merge module.
            </summary>
            <param name="dir">The dir.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.AddFileCollection(WixSharp.Dir,WixSharp.Files[])">
            <summary>
            Adds the file collection.
            </summary>
            <param name="dir">The dir.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.AddDirFileCollection(WixSharp.Dir,WixSharp.DirFiles[])">
            <summary>
            Adds the dir file collection.
            </summary>
            <param name="dir">The dir.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.RemoveDialogsBetween(WixSharp.Project,System.String,System.String)">
            <summary>
            Removes the dialogs between specified two dialogs. It simply connects 'next' button of the start dialog with the
            'NewDialog' action associated with the end dialog. And vise versa for the 'back' button.
            </summary>
            <param name="project">The project.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
            <example>The following is an example of the setup that skips License dialog.
            <code>
            project.UI = WUI.WixUI_InstallDir;
            project.RemoveDialogsBetween(Dialogs.WelcomeDlg, Dialogs.InstallDirDlg);
            ...
            Compiler.BuildMsi(project);
            </code>
            </example>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.SetVersionFrom(WixSharp.Project,System.String)">
            <summary>
            Sets the Project version from the file version of the file specified by it's ID.
            <para>This method sets project WixSourceGenerated event handler and injects
            "!(bind.FileVersion.&lt;file ID&gt;" into the XML Product's Version attribute.</para>
            <remarks>
            If <c>SetVersionFrom</c> is used then Wix# is no longer responsible for setting the product version.
            This task is delegated to WiX so the whole value `project.Version` becomes completely irrelevant. </remarks>
            </summary>
            <param name="project">The project.</param>
            <param name="fileId">The file identifier.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.ExtractVersionFrom(WixSharp.Project,System.String)">
            <summary>
            Extracts file version from the file with a specific Id.
            </summary>
            <param name="project">The project.</param>
            <param name="fileId">The file id.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.SetVersionFromFile(WixSharp.Project,System.String)">
            <summary>
            Sets the version of the project to the version value retrieved from the file.
            <para>If the file is an assembly then the assembly version is returned.</para>
            <para>If the file is an MSI then the product version is returned.</para>
            <para>If the file is a native binary then file version is returned.</para>
            </summary>
            <remarks>
            Attempt to extract the assembly version may fail because the dll/exe file may not be an assembly
            or because it can be in the wrong assembly format (x64 vs x86). In any case the method will fall back to
            the file version.</remarks>
            <param name="project">The project.</param>
            <param name="filePath">The file path.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.GetVersionFromFile(System.String)">
            <summary>
            Extracts value retrieved from the file.
            <para>If the file is an assembly then the assembly version is returned.</para>
            <para>If the file is an MSI then the product version is returned.</para>
            <para>If the file is a native binary then file version is returned.</para>
            </summary>
            <remarks>
            Attempt to extract the assembly version may fail because the dll/exe file may not be an assembly
            or because it can be in the wrong assembly format (x64 vs x86). In any case the method will fall back to
            the file version.</remarks>
            <param name="filePath">The file path.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.InjectClrDialog(WixSharp.Project,System.String,System.String,System.String)">
             <summary>
             Injects CLR dialog between MSI dialogs 'prevDialog' and 'nextDialog'.
             Passes custom action CLR method name (showDialogMethod) for instantiating and popping up the CLR dialog.
             </summary>
             <param name="project">The project.</param>
             <param name="showDialogMethod">The show dialog method.</param>
             <param name="prevDialog">The previous dialog.</param>
             <param name="nextDialog">The next dialog.</param>
             <returns></returns>
             <example>The following is an example of inserting CustomDialog dialog into the UI sequence between MSI dialogs InsallDirDlg and VerifyReadyDlg.
             <code>
             public class static Script
             {
                 public static void Main()
                 {
                     var project = new Project("CustomDialogTest");
            
                     project.InjectClrDialog("ShowCustomDialog", Dialogs.InstallDirDlg, Dialogs.VerifyReadyDlg);
                     Compiler.BuildMsi(project);
                 }
            
                 [CustomAction]
                 public static ActionResult ShowCustomDialog(Session session)
                 {
                     return WixCLRDialog.ShowAsMsiDialog(new CustomDialog(session));
                 }
            }
             </code>
             </example>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.GetFileVersion(System.String)">
            <summary>
            Gets the file version.
            </summary>
            <param name="file">The path to the file.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.SetNetFxPrerequisite(WixSharp.Project,System.String,System.String)">
            <summary>
            Binds the LaunchCondition to the <c>version</c> condition based on WiXNetFxExtension properties.
            <para>The typical conditions are:</para>
            <para>   NETFRAMEWORK20='#1'</para>
            <para>   NETFRAMEWORK40FULL='#1'</para>
            <para>   NETFRAMEWORK35='#1'</para>
            <para>   NETFRAMEWORK30_SP_LEVEL and NOT NETFRAMEWORK30_SP_LEVEL='#0'</para>
            <para>   ...</para>
            The full list of names and values can be found here http://wixtoolset.org/documentation/manual/v3/customactions/wixnetfxextension.html
            </summary>
            <param name="project">The project.</param>
            <param name="versionCondition">Condition expression.
            </param>
            <param name="errorMessage">The error message to be displayed if .NET version is not present.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.SetConfigAttribute(System.String,System.String,System.String)">
             <summary>
             Sets the value of the attribute value in the .NET application configuration file according
             the specified XPath expression.
             <para>
             This simple routine is to be used for the customization of the installed config files
             (e.g. in the deferred custom actions).
             </para>
             </summary>
             <param name="configFile">The configuration file.</param>
             <param name="elementPath">The element XPath value. It should include the attribute name.</param>
             <param name="value">The value to be set to the attribute.</param>
            
             <example>The following is an example demonstrates this simple technique:
             <code>
              Tasks.SetConfigAttribute(configFile, "//configuration/appSettings/add[@key='AppName']/@value", "My App");
             </code>
             </example>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.SetConfigAttribute(System.Xml.Linq.XElement,System.String,System.String)">
             <summary>
             Sets the value of the attribute value in the .NET application configuration file according
             the specified XPath expression.
             <para>
             This simple routine is to be used for the customization of the installed config files
             (e.g. in the deferred custom actions).
             </para>
             </summary>
             <returns></returns>
             <param name="config">The configuration file element.</param>
             <param name="elementPath">The element XPath value. It should include the attribute name.</param>
             <param name="value">The value to be set to the attribute.</param>
            
             <example>The following is an example demonstrates this simple technique:
             <code>
              XDocument.Load(configFile).Root
                       .SetConfigAttribute("//configuration/appSettings/add[@key='AppName']/@value", "My App")
                       .SetConfigAttribute(...
                       .SetConfigAttribute(...
                       .Document.Save(configFile);
             </code>
             </example>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.InstallService(System.String,System.Boolean,System.String)">
            <summary>
            Installs the windows service. It uses InstallUtil.exe to complete the actual installation/uninstallation.
            During the run for the InstallUtil.exe console window is hidden.
            If any error occurred the console output is captured and embedded into the raised Exception object.
            </summary>
            <param name="serviceFile">The service file.</param>
            <param name="isInstalling">if set to <c>true</c> [is installing].</param>
            <param name="args">The additional InstallUtil.exe arguments.</param>
            <exception cref="T:System.Exception"></exception>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.StartService(System.String,System.Boolean)">
            <summary>
            Starts the windows service. It uses sc.exe to complete the action.  During the action console window is hidden.
            If any error occurred the console output is captured and embedded into the raised Exception object.
            </summary>
            <param name="service">The service.</param>
            <param name="throwOnError">if set to <c>true</c> [throw on error].</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.StopService(System.String,System.Boolean)">
            <summary>
            Stops the windows service. It uses sc.exe to complete the action.  During the action console window is hidden.
            If any error occurred the console output is captured and embedded into the raised Exception object.
            </summary>
            <param name="service">The service.</param>
            <param name="throwOnError">if set to <c>true</c> [throw on error].</param>
            <returns></returns>
        </member>
        <member name="P:WixSharp.CommonTasks.Tasks.CurrentFrameworkDirectory">
            <summary>
            Gets the directory of .NET framework currently hosting the calling assembly.
            </summary>
            <value>
            The current framework directory.
            </value>
        </member>
        <member name="M:WixSharp.CommonTasks.Tasks.IsEmbeddedUIPackage(System.String)">
            <summary>
            Determines whether the MSI package is implementing EmbeddedUI.
            </summary>
            <param name="msiPath">The path.</param>
            <returns></returns>
        </member>
        <member name="T:WixSharp.CommonTasks.UACRevealer">
            <summary>
            UAC prompt revealer. This is a work around for the MSI limitation/problem with EmbeddedUI UAC prompt.
            <para> The symptom of the problem is the UAC prompt not being displayed during the elevation but rather
            minimized on the taskbar. It's caused by the fact the all background applications (including MSI runtime)
            supposed to register the main window for UAC prompt. And, MSI does not doe the registration for EmbeddedUI.
            </para>
            <para>Call <c>UACRevealer.Enter</c> just before triggering UAC (staring the actual install). This will
            "steal" the focus from the MSI EmbeddedUI window. This in turn will bring UAC prompt to foreground.</para>
            <para>Call <c>UACRevealer.Exit</c> just after UAC prompt has been closed to dispose UACRevealer.
            </para>
            <para> See "Use the HWND Property to Be Acknowledged as a Foreground Application" section at
            https://msdn.microsoft.com/en-us/library/bb756922.aspx
            </para>
            </summary>
        </member>
        <member name="M:WixSharp.CommonTasks.UACRevealer.Enter">
            <summary>
            Activates UACRevealer
            </summary>
        </member>
        <member name="M:WixSharp.CommonTasks.UACRevealer.Exit">
            <summary>
            Deactivates UACRevealer
            </summary>
        </member>
        <member name="F:WixSharp.CommonTasks.UACRevealer.Enabled">
            <summary>
            Enables UACRevealer support. This flag is required for enabling UAC prompt work around for
            the WixSharp built-in EmbeddedUI (ManagedUI).
            </summary>
        </member>
        <member name="T:WixSharp.Assembly">
             <summary>
             Defines assembly file to be installed.
             <para>
             This class is essentially the same as <see cref="T:WixSharp.File"></see> except it has extra member <c>RegisterInGAC</c>
             to define if the assembly file needs to be registered in GAC during the installation.
             </para>
             </summary>
             <example>The following is an example of installing <c>MyLibrary.dll</c> assembly and registering it in GAC.
            <code>
             var project = new Project()
             {
                 Name = "CustomActionTest",
                 UI = WUI.WixUI_ProgressOnly,
            
                 Dirs = new[]
                 {
                     new Dir(@"%ProgramFiles%\My Company\My Product",
                         new Assembly(@"MyLibrary.dll", true))
                 }
             };
            
             Compiler.BuildMsi(project);
             </code>
             </example>
        </member>
        <member name="M:WixSharp.Assembly.#ctor">
            <summary>
            Default constructor. Creates instance of the <see cref="T:WixSharp.Assembly"></see> class.
            </summary>
        </member>
        <member name="M:WixSharp.Assembly.#ctor(WixSharp.Feature,System.String,System.Boolean,WixSharp.WixEntity[])">
            <summary>
            Creates instance of the <see cref="T:WixSharp.Assembly"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the assembly file should be included in.</param>
            <param name="sourcePath">Relative path to the assembly file to be taken for building the MSI.</param>
            <param name="registerInGAC">Defines if the assembly file needs to be registered in GAC during the installation. </param>
            <param name="items">Optional parameters defining additional members (e.g. <see cref="T:WixSharp.FileShortcut"/> shortcuts to
            the file to be created during the installation).</param>
        </member>
        <member name="M:WixSharp.Assembly.#ctor(System.String,System.Boolean,WixSharp.WixEntity[])">
            <summary>
            Creates instance of the <see cref="T:WixSharp.Assembly"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="sourcePath">Relative path to the assembly file to be taken for building the MSI.</param>
            <param name="registerInGAC">Defines if the assembly file needs to be registered in GAC during the installation. </param>
            <param name="items">Optional parameters defining additional members (e.g. <see cref="T:WixSharp.FileShortcut"/> shortcuts to the file
            to be created during the installation).</param>
        </member>
        <member name="M:WixSharp.Assembly.#ctor(WixSharp.Id,WixSharp.Feature,System.String,System.Boolean,WixSharp.WixEntity[])">
            <summary>
            Creates instance of the <see cref="T:WixSharp.Assembly"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.Assembly"/> instance.</param>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the assembly file should be included in.</param>
            <param name="sourcePath">Relative path to the assembly file to be taken for building the MSI.</param>
            <param name="registerInGAC">Defines if the assembly file needs to be registered in GAC during the installation. </param>
            <param name="items">Optional parameters defining additional members (e.g. <see cref="T:WixSharp.FileShortcut"/> shortcuts to the file to
            be created during the installation).</param>
        </member>
        <member name="M:WixSharp.Assembly.#ctor(WixSharp.Id,System.String,System.Boolean,WixSharp.WixEntity[])">
            <summary>
            Creates instance of the <see cref="T:WixSharp.Assembly"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.Assembly"/> instance.</param>
            <param name="sourcePath">Relative path to the assembly file to be taken for building the MSI.</param>
            <param name="registerInGAC">Defines if the assembly file needs to be registered in GAC during the installation. </param>
            <param name="items">Optional parameters defining additional members (e.g. <see cref="T:WixSharp.FileShortcut"/> shortcuts to
            the file to be created during the installation).</param>
        </member>
        <member name="M:WixSharp.Assembly.#ctor(WixSharp.Feature,System.String,System.Boolean,WixSharp.ProcessorArchitecture,WixSharp.WixEntity[])">
            <summary>
            Creates instance of the <see cref="T:WixSharp.Assembly"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the assembly file should be included in.</param>
            <param name="sourcePath">Relative path to the assembly file to be taken for building the MSI.</param>
            <param name="registerInGAC">Defines if the assembly file needs to be registered in GAC during the installation. </param>
            <param name="processorArchitecture">Specifies the architecture for this assembly. </param>
            <param name="items">Optional parameters defining additional members (e.g. <see cref="T:WixSharp.FileShortcut"/> shortcuts to the file
            to be created during the installation).</param>
        </member>
        <member name="M:WixSharp.Assembly.#ctor(System.String,System.Boolean,WixSharp.ProcessorArchitecture,WixSharp.WixEntity[])">
            <summary>
            Creates instance of the <see cref="T:WixSharp.Assembly"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="sourcePath">Relative path to the assembly file to be taken for building the MSI.</param>
            <param name="registerInGAC">Defines if the assembly file needs to be registered in GAC during the installation. </param>
            <param name="processorArchitecture">Specifies the architecture for this assembly. </param>
            <param name="items">Optional parameters defining additional members (e.g. <see cref="T:WixSharp.FileShortcut"/> shortcuts to
            the file to be created during the installation).</param>
        </member>
        <member name="M:WixSharp.Assembly.#ctor(WixSharp.Id,WixSharp.Feature,System.String,System.Boolean,WixSharp.ProcessorArchitecture,WixSharp.WixEntity[])">
            <summary>
            Creates instance of the <see cref="T:WixSharp.Assembly"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.Assembly"/> instance.</param>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the assembly file should be included in.</param>
            <param name="sourcePath">Relative path to the assembly file to be taken for building the MSI.</param>
            <param name="registerInGAC">Defines if the assembly file needs to be registered in GAC during the installation. </param>
            <param name="processorArchitecture">Specifies the architecture for this assembly. </param>
            <param name="items">Optional parameters defining additional members (e.g. <see cref="T:WixSharp.FileShortcut"/> shortcuts to the file
            to be created during the installation).</param>
        </member>
        <member name="M:WixSharp.Assembly.#ctor(WixSharp.Id,System.String,System.Boolean,WixSharp.ProcessorArchitecture,WixSharp.WixEntity[])">
            <summary>
            Creates instance of the <see cref="T:WixSharp.Assembly"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.Assembly"/> instance.</param>
            <param name="sourcePath">Relative path to the assembly file to be taken for building the MSI.</param>
            <param name="registerInGAC">Defines if the assembly file needs to be registered in GAC during the installation. </param>
            <param name="processorArchitecture">Specifies the architecture for this assembly. </param>
            <param name="items">Optional parameters defining additional members (e.g. <see cref="T:WixSharp.FileShortcut"/> shortcuts to the file
            to be created during the installation).</param>
        </member>
        <member name="F:WixSharp.Assembly.RegisterInGAC">
            <summary>
            Defines if the assembly file needs to be registered in GAC during the installation.
            </summary>
        </member>
        <member name="F:WixSharp.Assembly.ProcessorArchitecture">
            <summary>
            Specifies the architecture for this assembly.
            </summary>
        </member>
        <member name="T:WixSharp.CompilerSupportState">
            <summary>
            Controls activation of the Wix# compiler features.
            </summary>
        </member>
        <member name="F:WixSharp.CompilerSupportState.Automatic">
            <summary>
            The feature will be enabled automatically when needed
            </summary>
        </member>
        <member name="F:WixSharp.CompilerSupportState.Enabled">
            <summary>
            The feature will be enabled
            </summary>
        </member>
        <member name="F:WixSharp.CompilerSupportState.Disabled">
            <summary>
            The feature will be disabled
            </summary>
        </member>
        <member name="T:WixSharp.AutoElements">
            <summary>
            Automatically insert elements required for satisfy odd MSI restrictions.
            <para>- You must set KeyPath you install in the user profile.</para>
            <para>- You must use a registry key under HKCU as component's KeyPath, not a file. </para>
            <para>- The Component element cannot have multiple key path set.  </para>
            <para>- The project must have at least one directory element.  </para>
            <para>- All directories installed in the user profile must have corresponding RemoveDirectory
            elements.  </para>
            <para>...</para>
            <para>
            The MSI always wants registry keys as the key paths for per-user components.
            It has to do with the way profiles work with advertised content in enterprise deployments.
            The fact that you do not want to install any registry doesn't matter. MSI is the boss.
            </para>
            <para>The following link is a good example of the technique:
            http://stackoverflow.com/questions/16119708/component-testcomp-installs-to-user-profile-it-must-use-a-registry-key-under-hk</para>
            </summary>
        </member>
        <member name="F:WixSharp.AutoElements.SupportEmptyDirectories">
            <summary>
            Controls automatic insertion of CreateFolder and RemoveFolder for the directories containing no files.
            Required for: NativeBootstrapper, EmbeddedMultipleActions,  EmptyDirectories, InstallDir, Properties,
            ReleaseFolder, Shortcuts and WildCardFiles samples.
            <para>If set to <c>Automatic</c> then the compiler will enable this feature only if any empty directory
            is detected in the project definition.</para>
            </summary>
        </member>
        <member name="F:WixSharp.AutoElements.DisableAutoKeyPath">
            <summary>
            Disables automatic insertion of <c>KeyPath=yes</c> attribute for the Component element.
            Required for: NativeBootstrapper, EmbeddedMultipleActions,  EmptyDirectories, InstallDir, Properties,
            ReleaseFolder, Shortcuts and WildCardFiles samples.
            <para>Can also be managed by disabling ICE validation via Light.exe command line arguments.</para>
            <para>
            This flag is a lighter alternative of DisableAutoCreateFolder.
            See: http://stackoverflow.com/questions/10358989/wix-using-keypath-on-components-directories-files-registry-etc-etc
            for some background info.
            </para>
            </summary>
        </member>
        <member name="F:WixSharp.AutoElements.EnableUACRevealer">
            <summary>
            Enables UAC revealer, which is a work around for the MSI limitation/problem around EmbeddedUI UAC prompt.
            <para> The symptom of the problem is the UAC prompt not being displayed during elevation but rather minimized
            on the taskbar. This is caused by the fact the all background applications (including MSI runtime) supposed to
            register the main window for UAC prompt. And, MSI does not doe the registration for EmbeddedUI.
            </para>
            <para> See "Use the HWND Property to Be Acknowledged as a Foreground Application" section at
            https://msdn.microsoft.com/en-us/library/bb756922.aspx
            </para>
            </summary>
        </member>
        <member name="F:WixSharp.AutoElements.ForceCDataForConditions">
            <summary>
            Forces all <see cref="T:WixSharp.Condition"/> values to be always encoded as CDATA.
            </summary>
        </member>
        <member name="F:WixSharp.AutoElements.DisableAutoUserProfileRegistry">
            <summary>
            Disables automatic insertion of user profile registry elements.
            Required for: AllInOne, ConditionalInstallation, CustomAttributes, ReleaseFolder, Shortcuts,
            Shortcuts (advertised), Shortcuts-2, WildCardFiles samples.
            <para>Can also be managed by disabling ICE validation via Light.exe command line arguments.</para>
            </summary>
        </member>
        <member name="T:WixSharp.Bootstrapper.UtilFileSearch">
            <summary>
            Defines a file search based on WiX FileSearch element (Util Extension).
            </summary>
            <example>The following is an example of adding a UtilFileSearch fragment into a Bundle definition.
            <code>
            bootstrapper.AddWixFragment("Wix/Bundle",
                                        new UtilFileSearch
                                        {
                                            Path = @"[ProgramFilesFolder]Adobe\adobe.exe",
                                            Result = SearchResult.exists,
                                            Variable = "AdobeInstalled"
                                        });
            </code>
            </example>
        </member>
        <member name="F:WixSharp.Bootstrapper.UtilFileSearch.After">
            <summary>
            Id of the search that this one should come after.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.UtilFileSearch.Condition">
            <summary>
            Condition for evaluating the search. If this evaluates to false, the search is not executed at all.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.UtilFileSearch.Path">
            <summary>
            File path to search for.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.UtilFileSearch.Variable">
            <summary>
            Name of the variable in which to place the result of the search.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.UtilFileSearch.Result">
            <summary>
            Rather than saving the matching file path into the variable, a FileSearch can save an attribute of the matching file instead. This attribute's value must be one of the following:
            <para>
            <c>exists</c> - Saves true if a matching file is found; false otherwise.
            </para>
            <c>version</c> - Saves the version information for files that have it (.exe, .dll); zero-version (0.0.0.0) otherwise.
            </summary>
        </member>
        <member name="M:WixSharp.Bootstrapper.UtilFileSearch.ToXml">
            <summary>
            Emits WiX XML.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WixSharp.Bootstrapper.UtilRegistrySearch">
            <summary>
            Defines a registry search based on WiX RegistrySearch element (Util Extension).
            </summary>
            <example>The following is an example of adding a UtilRegistrySearch fragment into a Bundle definition.
            <code>
            bootstrapper.AddWixFragment("Wix/Bundle",
                                        new UtilRegistrySearch
                                        {
                                            Root = RegistryHive.LocalMachine,
                                            Key = @"Key=SOFTWARE\Microsoft\Net Framework Setup\NDP\v4\Full",
                                            Value = "Version",
                                            Result = SearchResult.exists,
                                            Variable = "Netfx4FullVersion"
                                        });
            </code>
            </example>
        </member>
        <member name="F:WixSharp.Bootstrapper.UtilRegistrySearch.After">
            <summary>
            Id of the search that this one should come after.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.UtilRegistrySearch.Condition">
            <summary>
            Condition for evaluating the search. If this evaluates to false, the search is not executed at all.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.UtilRegistrySearch.Key">
            <summary>
            Key to search for.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.UtilRegistrySearch.Value">
            <summary>
            Optional value to search for under the given Key.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.UtilRegistrySearch.Variable">
            <summary>
            Name of the variable in which to place the result of the search.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.UtilRegistrySearch.Root">
            <summary>
            Registry root hive to search under.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.UtilRegistrySearch.Win64">
            <summary>
            Instructs the search to look in the 64-bit registry when the value is 'yes'. When the value is 'no', the search looks in the 32-bit registry. The default value is 'no'.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.UtilRegistrySearch.Result">
            <summary>
            Rather than saving the matching registry value into the variable, a RegistrySearch can save an attribute of the matching entry instead. This attribute's value must be one of the following:
            <para>
            <c>exists</c> - Saves true if a matching registry entry is found; false otherwise.
            </para>
            <c>value</c> - Saves the value of the registry key in the variable. This is the default.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.UtilRegistrySearch.ExpandEnvironmentVariables">
            <summary>
            Whether to expand any environment variables in REG_SZ, REG_EXPAND_SZ, or REG_MULTI_SZ values.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.UtilRegistrySearch.Format">
            <summary>
            What format to return the value in. This attribute's value must be one of the following:
            <para>
            <c>raw</c> - Returns the unformatted value directly from the registry.For example, a REG_DWORD value of '1' is returned as '1', not '#1'.</para>
            <c>compatible</c> - Returns the value formatted as Windows Installer would.For example, a REG_DWORD value of '1' is returned as '#1', not '1'.
            </summary>
        </member>
        <member name="M:WixSharp.Bootstrapper.UtilRegistrySearch.ToXml">
            <summary>
            Emits WiX XML.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WixSharp.Bootstrapper.Bundle">
             <summary>
             Class for defining a WiX standard Burn-based bootstrapper. By default the bootstrapper is using WiX default WiX bootstrapper UI.
             </summary>
             <example>The following is an example of defining a bootstrapper for two msi files and .NET Web setup.
             <code>
              var bootstrapper =
                  new Bundle("My Product",
                      new PackageGroupRef("NetFx40Web"),
                      new MsiPackage("productA.msi"),
                      new MsiPackage("productB.msi"));
            
             bootstrapper.AboutUrl = "https://wixsharp.codeplex.com/";
             bootstrapper.IconFile = "app_icon.ico";
             bootstrapper.Version = new Version("1.0.0.0");
             bootstrapper.UpgradeCode = new Guid("6f330b47-2577-43ad-9095-1861bb25889b");
             bootstrapper.Application.LogoFile = "logo.png";
            
             bootstrapper.Build();
             </code>
             </example>
        </member>
        <member name="M:WixSharp.Bootstrapper.Bundle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="N:WixSharp.Bootstrapper"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.Bootstrapper.Bundle.#ctor(System.String,WixSharp.Bootstrapper.ChainItem[])">
            <summary>
            Initializes a new instance of the <see cref="N:WixSharp.Bootstrapper" /> class.
            </summary>
            <param name="name">The name of the project. Typically it is the name of the product to be installed.</param>
            <param name="items">The project installable items (e.g. directories, files, registry keys, Custom Actions).</param>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.DisableRollback">
            <summary>
            The disable rollbackSpecifies whether the bundle will attempt to rollback packages executed in the chain.
            If "true" is specified then when a vital package fails to install only that package will rollback and the chain will stop with the error.
            The default is "false" which indicates all packages executed during the chain will be rollback to their previous state when a vital package fails.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.DisableSystemRestore">
            <summary>
            Specifies whether the bundle will attempt to create a system restore point when executing the chain. If "true" is specified then a system restore
            point will not be created. The default is "false" which indicates a system restore point will be created when the bundle is installed, uninstalled,
            repaired, modified, etc. If the system restore point cannot be created, the bundle will log the issue and continue.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.ParallelCache">
            <summary>
            Specifies whether the bundle will start installing packages while other packages are still being cached.
            If "true", packages will start executing when a rollback boundary is encountered. The default is "false"
            which dictates all packages must be cached before any packages will start to be installed.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.Copyright">
            <summary>
            The legal copyright found in the version resources of final bundle executable.
            If this attribute is not provided the copyright will be set to "Copyright (c) [Bundle/@Manufacturer]. All rights reserved.".
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.AboutUrl">
            <summary>
            A URL for more information about the bundle to display in Programs and Features (also known as Add/Remove Programs).
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.Compressed">
            <summary>
            Whether Packages and Payloads not assigned to a container should be added to the default attached container or if they
            should be external. The default is yes.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.Condition">
            <summary>
            The condition of the bundle. If the condition is not met, the bundle will refuse to run. Conditions are checked before the
            bootstrapper application is loaded (before detect), and thus can only reference built-in variables such as variables which
            indicate the version of the OS.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.DigitalSignature">
            <summary>
            Parameters of digitally sign
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.DisableRemove">
            <summary>
            Determines whether the bundle can be removed via the Programs and Features (also known as Add/Remove Programs). If the value is
            "yes" then the "Uninstall" button will not be displayed. The default is "no" which ensures there is an "Uninstall" button to remove
            the bundle. If the "DisableModify" attribute is also "yes" or "button" then the bundle will not be displayed in Programs and
            Features and another mechanism (such as registering as a related bundle addon) must be used to ensure the bundle can be removed.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.DisableModify">
            <summary>
            Determines whether the bundle can be modified via the Programs and Features (also known as Add/Remove Programs). If the value is
            "button" then Programs and Features will show a single "Uninstall/Change" button. If the value is "yes" then Programs and Features
            will only show the "Uninstall" button". If the value is "no", the default, then a "Change" button is shown. See the DisableRemove
            attribute for information how to not display the bundle in Programs and Features.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.HelpTelephone">
            <summary>
            A telephone number for help to display in Programs and Features (also known as Add/Remove Programs).
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.HelpUrl">
            <summary>
            A URL to the help for the bundle to display in Programs and Features (also known as Add/Remove Programs).
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.IconFile">
            <summary>
            Path to an icon that will replace the default icon in the final Bundle executable. This icon will also be displayed in Programs and Features (also known as Add/Remove Programs).
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.Manufacturer">
            <summary>
            The publisher of the bundle to display in Programs and Features (also known as Add/Remove Programs).
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.ParentName">
            <summary>
            The name of the parent bundle to display in Installed Updates (also known as Add/Remove Programs). This name is used to nest or group bundles that will appear as updates. If the
            parent name does not actually exist, a virtual parent is created automatically.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.SplashScreenSource">
            <summary>
            Path to a bitmap that will be shown as the bootstrapper application is being loaded. If this attribute is not specified, no splash screen will be displayed.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.Tag">
            <summary>
            Set this string to uniquely identify this bundle to its own BA, and to related bundles. The value of this string only matters to the BA, and its value has no direct
            effect on engine functionality.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.UpdateUrl">
            <summary>
            A URL for updates of the bundle to display in Programs and Features (also known as Add/Remove Programs).
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.UpgradeCode">
            <summary>
            Unique identifier for a family of bundles. If two bundles have the same UpgradeCode the bundle with the highest version will be installed.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.SuppressWixMbaPrereqVars">
             <summary>
             The suppress auto insertion of WixMbaPrereq* variables in the bundle definition (WixMbaPrereqPackageId and WixMbaPrereqLicenseUrl).
             <para>BA is relying on two internal variables that reflect .NET version (and license) that BA requires at runtime. If user defines
             custom Wix# based BA the required variables are inserted automatically, similarly to the standards WiX/Burn BA. However some other
             bundle packages (e.g. new PackageGroupRef("NetFx40Web")) may also define these variables so some duplication/collision is possible.
             To avoid this you can suppress variables auto-insertion and define them manually as needed.</para>
            <example>The following is an example of suppressing auto-insertion:
             <code>
             var bootstrapper = new Bundle("My Product Suite",
                                    new PackageGroupRef("NetFx40Web"),
                                    new MsiPackage(productMsi)
                                    {
                                        Id = "MyProductPackageId",
                                        DisplayInternalUI = true
                                    });
            
             bootstrapper.SuppressWixMbaPrereqVars = true;
             </code>
             </example>
             </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.Version">
            <summary>
            The version of the bundle. Newer versions upgrade earlier versions of the bundles with matching UpgradeCodes. If the bundle is registered in Programs and Features then this attribute will be displayed in the Programs and Features user interface.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.Chain">
            <summary>
            The sequence of the packages to be installed
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.Application">
            <summary>
            The instance of the Bootstrapper application class application. By default it is a LicenseBootstrapperApplication object.
            </summary>
        </member>
        <member name="M:WixSharp.Bootstrapper.Bundle.ToXml">
            <summary>
            Emits WiX XML.
            </summary>
            <returns></returns>
        </member>
        <member name="F:WixSharp.Bootstrapper.Bundle.StringVariablesDefinition">
            <summary>
            The Bundle string variables.
            </summary>
            <para>The variables are defined as a named values map.</para>
            <para>If you need to access the variable value from the Package
            you will need to add the MsiProperty mapped to this variable.
            </para>
            <example>
            <code>
            new ManagedBootstrapperApplication("ManagedBA.dll")
            {
                StringVariablesDefinition = "FullInstall=Yes; Silent=No"
            }
            ...
            new MsiPackage(msiFile) { MsiProperties = "FULL=[FullInstall]" },
            </code>
            </example>
        </member>
        <member name="M:WixSharp.Bootstrapper.Bundle.Build(System.String)">
            <summary>
            Builds WiX Bootstrapper application from the specified <see cref="T:WixSharp.Bootstrapper.Bundle" /> project instance.
            </summary>
            <param name="path">The path to the bootstrapper to be build.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Bootstrapper.Bundle.BuildCmd(System.String)">
            <summary>
            Builds the WiX source file and generates batch file capable of building
            WiX/MSI bootstrapper with WiX toolset.
            </summary>
            <param name="path">The path to the batch file to be created.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Bootstrapper.Bundle.Validate">
            <summary>
            Validates this Bundle project packages.
            </summary>
        </member>
        <member name="T:WixSharp.Bootstrapper.ManagedBootstrapperApplication">
            <summary>
            Class for defining a Wix# application for WiX standard Burn-based bootstrapper.
            <para>It is nothing else but a light container for the WiX metadata associated with the
            .NET assembly implementing WiX ManagedBootstrapper application.</para>
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.ManagedBootstrapperApplication.AppAssembly">
            <summary>
            The assembly implementing Bootstrapper UI application
            </summary>
        </member>
        <member name="M:WixSharp.Bootstrapper.ManagedBootstrapperApplication.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Bootstrapper.ManagedBootstrapperApplication"/> class.
            </summary>
            <param name="appAssembly">The application assembly.</param>
            <param name="dependencies">The dependencies.</param>
        </member>
        <member name="M:WixSharp.Bootstrapper.ManagedBootstrapperApplication.AutoGenerateSources(System.String)">
            <summary>
            Automatically generates required sources files for building the Bootstrapper. It is
            used to automatically generate the files which, can be generated automatically without
            user involvement (e.g. BootstrapperCore.config).
            </summary>
            <param name="outDir">The output directory.</param>
        </member>
        <member name="M:WixSharp.Bootstrapper.ManagedBootstrapperApplication.ToXml">
            <summary>
            Emits WiX XML.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WixSharp.Bootstrapper.ManagedBootstrapperApplication.PrimaryPackageId">
            <summary>
            Gets or sets the IDd of the primary package from the bundle.
            <para>This ID is used by the application to detect the presence of the package on the target system
            and trigger either install or uninstall action.</para>
            <para>If it is not set then it is the Id of the last package in th bundle.</para>
            </summary>
            <value>
            The primary package identifier.
            </value>
        </member>
        <member name="T:WixSharp.Bootstrapper.WixStandardBootstrapperApplication">
            <summary>
            Container class for common members of the Bootstrapper standard applications.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.WixStandardBootstrapperApplication.LicensePath">
            <summary>
            Source file of the RTF license file or URL target of the license link.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.WixStandardBootstrapperApplication.LogoFile">
            <summary>
            Source file of the logo graphic.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.WixStandardBootstrapperApplication.LocalizationFile">
            <summary>
            Source file of the theme localization .wxl file.
            </summary>
        </member>
        <member name="M:WixSharp.Bootstrapper.WixStandardBootstrapperApplication.ToXml">
            <summary>
            Emits WiX XML.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Bootstrapper.WixStandardBootstrapperApplication.AutoGenerateSources(System.String)">
            <summary>
            Automatically generates required sources files for building the Bootstrapper. It is
            used to automatically generate the files which, can be generated automatically without
            user involvement (e.g. BootstrapperCore.config).
            </summary>
            <param name="outDir">The output directory.</param>
        </member>
        <member name="F:WixSharp.Bootstrapper.WixStandardBootstrapperApplication.Payloads">
            <summary>
            Collection of paths to the package dependencies.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.WixStandardBootstrapperApplication.StringVariablesDefinition">
            <summary>
            The Bundle string variables associated with the Bootstrapper application.
            <para>The variables are defined as a named values map.</para>
            </summary>
            <example>
            <code>
            new ManagedBootstrapperApplication("ManagedBA.dll")
            {
                StringVariablesDefinition = "FullInstall=Yes; Silent=No"
            }
            </code>
            </example>
        </member>
        <member name="T:WixSharp.Bootstrapper.Payload">
            <summary>
            Describes a payload to a bootstrapper.
            </summary>
            <seealso cref="T:WixSharp.WixEntity" />
        </member>
        <member name="M:WixSharp.Bootstrapper.Payload.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Bootstrapper.Payload"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.Bootstrapper.Payload.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Bootstrapper.Payload"/> class.
            </summary>
            <param name="sourceFile">The source file.</param>
        </member>
        <member name="F:WixSharp.Bootstrapper.Payload.DownloadUrl">
            <summary>
            The URL to use to download the package. The following substitutions are supported:
            <para>  •{0} is replaced by the package Id. </para>
            <para>  •{1} is replaced by the payload Id. </para>
            <para>  •{2} is replaced by the payload file name. </para>
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Payload.Name">
            <summary>
            The destination path and file name for this payload.
            The default is the source file name. The use of '..' directories is not allowed
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Payload.SourceFile">
            <summary>
            Location of the source file.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Payload.SuppressSignatureVerification">
            <summary>
            By default, a Bundle will use a package's Authenticode signature to verify the contents.
            If the package does not have an Authenticode signature then the Bundle will use a hash
            of the package instead. Set this attribute to "yes" to suppress the default behavior and
            force the Bundle to always use the hash of the package even when the package is signed.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Payload.Compressed">
            <summary>
            Whether the payload should be embedded in a container or left as an external payload.
            </summary>
        </member>
        <member name="T:WixSharp.Bootstrapper.LicenseBootstrapperApplication">
             <summary>
             Generic License-based WiX bootstrapper application.
             <para>Depending on the value of LicensePath compiler will resolve the application in either <c>WixStandardBootstrapperApplication.RtfLicense</c>
             or <c>WixStandardBootstrapperApplication.HyperlinkLicense</c> standard application.</para>
             <para>Note: empty LicensePath will suppress displaying the license completely</para>
             </summary>
             <example>The following is an example of defining a simple bootstrapper displaying the license as an
             embedded HTML file.
             <code>
             var bootstrapper = new Bundle("My Product",
                                     new PackageGroupRef("NetFx40Web"),
                                     new MsiPackage(productMsi) { DisplayInternalUI = true });
            
             bootstrapper.AboutUrl = "https://wixsharp.codeplex.com/";
             bootstrapper.IconFile = "app_icon.ico";
             bootstrapper.Version = new Version("1.0.0.0");
             bootstrapper.UpgradeCode = new Guid("6f330b47-2577-43ad-9095-1861bb25889b");
             bootstrapper.Application.LogoFile = "logo.png";
             bootstrapper.Application.LicensePath = "licence.html";
            
             bootstrapper.Build();
             </code>
             </example>
        </member>
        <member name="M:WixSharp.Bootstrapper.LicenseBootstrapperApplication.ToXml">
            <summary>
            Emits WiX XML.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WixSharp.Bootstrapper.Package">
            <summary>
            Container class for common members of the Bootstrapper packages
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Package.Permanent">
            <summary>
            Specifies whether the package can be uninstalled.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Package.SourceFile">
            <summary>
            Location of the package to add to the bundle. The default value is the Name attribute, if provided. At a minimum, the SourceFile or Name attribute must be specified.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Package.Description">
            <summary>
            Specifies the description to place in the bootstrapper application data manifest for the package. By default,
            ExePackages use the FileName field from the version information, MsiPackages use the ARPCOMMENTS property, and MspPackages
            use the Description patch metadata property. Other package types must use this attribute to define a description in the
            bootstrapper application data manifest.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Package.PerMachine">
            <summary>
            Indicates the package must be executed elevated.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Package.DownloadUrl">
            <summary>
            The URL to use to download the package. The following substitutions are supported:
            <para>{0} is replaced by the package Id.</para>
            <para>{1} is replaced by the payload Id.</para>
            <para>{2} is replaced by the payload file name.</para>
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Package.InstallCondition">
            <summary>
            A condition to evaluate before installing the package. The package will only be installed if the condition evaluates to true.
            If the condition evaluates to false and the bundle is being installed, repaired, or modified, the package will be uninstalled.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Package.Compressed">
            <summary>
            Whether the package payload should be embedded in a container or left as an external payload.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.Package.Payloads">
            <summary>
            Collection of Payloads (the package dependencies).
            </summary>
            <example>
            <code>
             var bootstrapper =
                 new Bundle("My Product",
                     new MsiPackage(productMsi)
                     {
                         DisplayInternalUI = true,
                         Payloads = new[] {
                                              "script.dll".ToPayload()
                                              "utils.dll".ToPayload()
                                          }
                         ...
            </code>
            </example>
        </member>
        <member name="T:WixSharp.Bootstrapper.ChainItem">
            <summary>
            Container class for common members of the Bootstrapper chained items
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.ChainItem.Vital">
            <summary>
            Specifies whether the package/item must succeed for the chain to continue.
            The default "yes" (true) indicates that if the package fails then the chain will fail and rollback or stop.
            If "no" is specified then the chain will continue even if the package reports failure.
            </summary>
        </member>
        <member name="M:WixSharp.Bootstrapper.ChainItem.ToXml">
            <summary>
            Emits WiX XML.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WixSharp.Bootstrapper.ExePackage">
            <summary>
            Standard WiX ExePackage.
            </summary>
        </member>
        <member name="M:WixSharp.Bootstrapper.ExePackage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Bootstrapper.ExePackage"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.Bootstrapper.ExePackage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Bootstrapper.ExePackage"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="F:WixSharp.Bootstrapper.ExePackage.InstallCommand">
            <summary>
            The command-line arguments provided to the ExePackage during install. If this attribute
            is absent the executable will be launched with no command-line arguments
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.ExePackage.RepairCommand">
            <summary>
            The command-line arguments to specify to indicate a repair. If the executable package can be repaired but does not require any
            special command-line arguments to do so then set the attribute's value to blank. To indicate that the package does not support repair,
            omit this attribute.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.ExePackage.UninstallCommand">
            <summary>
            The command-line arguments provided to the ExePackage during uninstall. If this attribute is absent the executable will be launched
            with no command-line arguments. To prevent an ExePackage from being uninstalled set the Permanent attribute to "yes".
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.ExePackage.DetectCondition">
            <summary>
            A condition that determines if the package is present on the target system.
            This condition can use built-in variables and variables returned by searches.
            This condition is necessary because Windows doesn't provide a method to detect the presence of an ExePackage.
            Burn uses this condition to determine how to treat this package during a bundle action; for example, if this condition
            is false or omitted and the bundle is being installed, Burn will install this package.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.ExePackage.ExitCodes">
             <summary>
             Describes map of exit code returned from executable package to a bootstrapper behavior.
            http://wixtoolset.org/documentation/manual/v3/xsd/wix/exitcode.html
             </summary>
        </member>
        <member name="M:WixSharp.Bootstrapper.ExePackage.ToXml">
            <summary>
            Emits WiX XML.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WixSharp.Bootstrapper.MsiPackage">
            <summary>
            Standard WiX MsiPackage.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.MsiPackage.EnableFeatureSelection">
            <summary>
            Specifies whether the bundle will allow individual control over the installation state of Features inside the msi package. Managing
            feature selection requires special care to ensure the install, modify, update and uninstall behavior of the package is always correct.
            The default is "no".
            </summary>
        </member>
        <member name="M:WixSharp.Bootstrapper.MsiPackage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Bootstrapper.MsiPackage"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.Bootstrapper.MsiPackage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Bootstrapper.MsiPackage"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="F:WixSharp.Bootstrapper.MsiPackage.DisplayInternalUI">
            <summary>
            Specifies whether the bundle will show the UI authored into the msi package. The default is "no" which means all information is routed to
            the bootstrapper application to provide a unified installation experience. If "yes" is specified the UI authored into the msi package will be
            displayed on top of any bootstrapper application UI.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.MsiPackage.Visible">
            <summary>
            Specifies whether the MSI will be displayed in Programs and Features (also known as Add/Remove Programs). If "yes" is specified the MSI package
            information will be displayed in Programs and Features. The default "no" indicates the MSI will not be displayed.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.MsiPackage.MsiProperties">
            <summary>
            MSI properties to be set based on the value of a burn engine expression. This is a KeyValue mapping expression of the following format:
            <para>&lt;key&gt;=&lt;value&gt;[;&lt;key&gt;=&lt;value&gt;]</para>
            <para><c>Example:</c> "COMMANDARGS=[CommandArgs];GLOBAL=yes""</para>
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.MsiPackage.DefaultMsiProperties">
            <summary>
            The default MsiProperties of a package .
            <para>This value is merged with user defined <see cref="F:WixSharp.Bootstrapper.MsiPackage.MsiProperties"/>.</para>
            <para>The default value of this property is "WIXBUNDLEORIGINALSOURCE=[WixBundleOriginalSource]"</para>
            </summary>
        </member>
        <member name="M:WixSharp.Bootstrapper.MsiPackage.ToXml">
            <summary>
            Emits WiX XML.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WixSharp.Bootstrapper.PackageGroupRef">
            <summary>
            Standard WiX PackageGroupRef.
            </summary>
        </member>
        <member name="M:WixSharp.Bootstrapper.PackageGroupRef.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Bootstrapper.PackageGroupRef"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WixSharp.Bootstrapper.PackageGroupRef.ToXml">
            <summary>
            Emits WiX XML.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WixSharp.Bootstrapper.RollbackBoundary">
            <summary>
            Standard WiX RollbackBoundary.
            </summary>
        </member>
        <member name="M:WixSharp.Bootstrapper.RollbackBoundary.ToXml">
            <summary>
            Emits WiX XML.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WixSharp.Bootstrapper.ExitCode">
             <summary>
            
             </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.ExitCode.Value">
            <summary>
            Exit code returned from executable package.
            If no value is provided it means all values not explicitly set default to this behavior.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.ExitCode.Behavior">
            <summary>
            Choose one of the supported behaviors error codes: success, error, scheduleReboot, forceReboot.
            This attribute's value must be one of the following:
            success
            error
            scheduleReboot
            forceReboot
            </summary>
        </member>
        <member name="M:WixSharp.Bootstrapper.ExitCode.ToXElement">
            <summary>
            Serializes the <see cref="T:WixSharp.Bootstrapper.ExitCode"/> into XML based on the members marked with
            <see cref="T:WixSharp.XmlAttribute"/> and <see cref="P:WixSharp.WixObject.Attributes"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="F:WixSharp.Bootstrapper.BehaviorValues.success">
            <summary>
            return success on specified error code
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.BehaviorValues.error">
            <summary>
            return error on specified error code
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.BehaviorValues.scheduleReboot">
            <summary>
            schedule reboot on specified error code
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.BehaviorValues.forceReboot">
            <summary>
            force reboot on specified error code
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.SearchResult.exists">
            <summary>
            Saves true if a matching registry entry or file is found; false otherwise.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.SearchResult.value">
            <summary>
            Saves the value of the registry key in the variable. Can only be used with RegistrySearch. This is the default.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.SearchResult.version">
            <summary>
            Saves the version information for files that have it (.exe, .dll); zero-version (0.0.0.0) otherwise. Can only be used with FileSearch.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.SearchFormat.raw">
            <summary>
            Returns the unformatted value directly from the registry. For example, a REG_DWORD value of '1' is returned as '1', not '#1'.
            </summary>
        </member>
        <member name="F:WixSharp.Bootstrapper.SearchFormat.compatible">
            <summary>
            Returns the value formatted as Windows Installer would. For example, a REG_DWORD value of '1' is returned as '#1', not '1'.
            </summary>
        </member>
        <member name="T:WixSharp.DigitalSignature">
            <summary>
            Container with the parameters of the digital signature
            </summary>
        </member>
        <member name="P:WixSharp.DigitalSignature.PfxFilePath">
            <summary>Specify the signing certificate in a file. If this file is a PFX with a password, the password may be supplied
            with the <see cref="P:WixSharp.DigitalSignature.Password"/> property.
            </summary>
        </member>
        <member name="P:WixSharp.DigitalSignature.TimeUrl">
            <summary>The timestamp server's URL. If this option is not present (pass to null), the signed file will not be timestamped.
            A warning is generated if timestamping fails.
            </summary>
        </member>
        <member name="P:WixSharp.DigitalSignature.Password">
            <summary>
            The password to use when opening the PFX file. Should be <c>null</c> if no password required.
            </summary>
        </member>
        <member name="P:WixSharp.DigitalSignature.Description">
            <summary>
            Description of the signed content.
            Is passed to the /d parameter of the <c>SignTool.exe</c>
            UAC uses this Description when asks the user about user rights elevation.
            UAC uses temporary file name instead if no Description provided.
            </summary>
        </member>
        <member name="P:WixSharp.DigitalSignature.OptionalArguments">
            <summary>
            Extra arguments to pass to the <c>SignTool.exe</c> utility.
            </summary>
        </member>
        <member name="P:WixSharp.DigitalSignature.WellKnownLocations">
            <summary>
            The optional ';' separated list of directories where SignTool.exe can be located.
            If this parameter is not specified WixSharp will try to locate the SignTool in the built-in well-known locations (system PATH)
            </summary>
        </member>
        <member name="P:WixSharp.DigitalSignature.UseCertificateStore">
            <summary>
            A flag indicating if the value of <see cref="P:WixSharp.DigitalSignature.PfxFilePath"/> is a name of the subject of the signing certificate
            from the certificate store (as opposite to the certificate file). This value can be a substring of the entire subject name.
            </summary>
        </member>
        <member name="M:WixSharp.DigitalSignature.Apply(System.String)">
            <summary>
            Applies digital signature to a file
            </summary>
            <param name="fileToSign">The file to sign.</param>
            <returns>Exit code of the <c>SignTool.exe</c> process.</returns>
        </member>
        <member name="M:WixSharp.DigitalSignature.PrepareOptionalArguments">
            <summary>
            Preparing optional arguments by adding custom arguments with current signer specific
            </summary>
            <returns>Final version of the optional arguments</returns>
        </member>
        <member name="T:WixSharp.DigitalSignatureBootstrapper">
            <summary>
            Container with the parameters of the digital signature of the Bootstrapper
            </summary>
        </member>
        <member name="M:WixSharp.DigitalSignatureBootstrapper.Apply(System.String)">
            <summary>
            Applies digital signature to a Bootstrapper file
            </summary>
            <param name="bootstrapperFileToSign">The Bootstrapper file to sign.</param>
            <returns>Exit code of the <c>SignTool.exe</c> process.</returns>
        </member>
        <member name="T:WixSharp.DriverInstaller">
             <summary>
             Defines the file driver installation approach.
             </summary>
            <example>The following is an example of installing <c>driver.sys</c> file.
            <code>
             var project = new Project("MyProduct",
                               new Dir(@"%ProgramFiles%\My Company\My Device",
                                     new File("driver.sys",
                                              new DriverInstaller
                                              {
                                                  AddRemovePrograms = false,
                                                  DeleteFiles = false,
                                                  Legacy = true,
                                                  PlugAndPlayPrompt = false,
                                                  Sequence = 1,
                                                  Architecture = DriverArchitecture.x64
                                              })));
                     ...
            project.BuildMsi();
             </code>
             </example>
        </member>
        <member name="F:WixSharp.DriverInstaller.AddRemovePrograms">
            <summary>
            Specifies that the DIFxApp CustomActions should add an entry in the Add/Remove Programs Control Panel applet. The default is 'true'.
            </summary>
        </member>
        <member name="F:WixSharp.DriverInstaller.DeleteFiles">
            <summary>
            If set to "true", configures DIFxApp to delete binary files that were copied to the system from the driver store when a driver package 
            was installed. If this attribute is set to "no" or not present, DIFxApp does not remove these files from a system. Note that configuring 
            DIFxApp to delete these files is controlled by the Flags entry value of the component that represents the driver package in the 
            MsiDriverPackages custom table. Setting DeleteFiles to "true" sets the corresponding bit in the Flags entry value. Setting DeleteFiles 
            to "false" clears the corresponding bit in the Flags entry value. If this attribute is not present, DIFxApp uses a default value of "false".
            </summary>
        </member>
        <member name="F:WixSharp.DriverInstaller.ForceInstall">
            <summary>
            If set to "true", configures DIFxApp to install unsigned driver packages and driver packages with missing files. For more information, 
            see "Installing Unsigned Driver Packages in Legacy Mode" earlier in this paper. If this attribute is set to "false" or not present, DIFxApp 
            will install only signed driver packages. Note that configuring DIFxApp to install unsigned drivers is controlled by the Flags entry value 
            of the component that represents the driver package in the MsiDriverPackages custom table. Setting Legacy to "true" sets the corresponding 
            bit in the Flags entry value. Setting Legacy to "false" clears the bit in the Flags entry value that configures DIFxApp to install unsigned 
            driver packages. If this attribute is not present, DIFxApp uses a default value of "false".
            </summary>
        </member>
        <member name="F:WixSharp.DriverInstaller.Legacy">
            <summary>
            If set to "true", configures DIFxApp to install unsigned driver packages and driver packages with missing files. For more information, 
            see "Installing Unsigned Driver Packages in Legacy Mode" earlier in this paper. If this attribute is set to "false" or not present, 
            DIFxApp will install only signed driver packages. Note that configuring DIFxApp to install unsigned drivers is controlled by the Flags 
            entry value of the component that represents the driver package in the MsiDriverPackages custom table. Setting Legacy to "true" sets the 
            corresponding bit in the Flags entry value. Setting Legacy to "false" clears the bit in the Flags entry value that configures DIFxApp to 
            install unsigned driver packages. If this attribute is not present, DIFxApp uses a default value of "false"
            </summary>
        </member>
        <member name="F:WixSharp.DriverInstaller.PlugAndPlayPrompt">
            <summary>
            Specifies that the DIFxApp CustomActions should prompt the user to connect the Plug and Play device if it is not connected. The default is 'true'.
            </summary>
        </member>
        <member name="F:WixSharp.DriverInstaller.Sequence">
            <summary>
            Specifies an optional installation sequence number. DIFxApp CustomActions install the driver packages in an installation package in the order 
            of increasing sequence numbers. The same sequence number can be used for more than one driver; however, the order in which packages with the 
            same sequence number are actually installed cannot be determined.
            </summary>
        </member>
        <member name="F:WixSharp.DriverInstaller.Architecture">
            <summary>
            The architecture of the driver to be installed. Default value is 'x86'
            </summary>
        </member>
        <member name="M:WixSharp.DriverInstaller.ToXml">
            <summary>
            Emits WiX XML.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WixSharp.BinaryFileAction">
            <summary>
            Defines WiX BinaryFileAction for executing binary (not installed) file. 
            </summary>
            
            <example>The following is an example of using <c>BinaryFileAction</c> to run
            executable <c>Echo.exe</c> with different arguments depending 
            in installation type (install/uninstall):
            <code>
            var project = 
                new Project("My Product",
                    new Binary(new Id("EchoBin"), @"Files\Echo.exe"), 
                    new Dir(@"%ProgramFiles%\My Company\My Product",
                    
                        new File(binaries, @"AppFiles\MyApp.exe",
                            new WixSharp.Shortcut("MyApp", @"%ProgramMenu%\My Company\My Product"),
                            new WixSharp.Shortcut("MyApp", @"%Desktop%")),
                            
                        
                    new BinaryFileAction("EchoBin", "/i", 
                                            Return.check, 
                                            When.After, 
                                            Step.InstallFinalize, 
                                            Condition.NOT_Installed),
                                            
                    BinaryFileAction("EchoBin", "/u", 
                                            Return.check, 
                                            When.Before, 
                                            Step.InstallFinalize, 
                                            Condition.Installed), 
                    ...
                    
            Compiler.BuildMsi(project);
            </code>
            </example>
        </member>
        <member name="M:WixSharp.BinaryFileAction.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.BinaryFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="key">The key (file name) of the installed file to be executed.</param>
            <param name="args">The arguments to be passed to the file during the execution.</param>
        </member>
        <member name="M:WixSharp.BinaryFileAction.#ctor(WixSharp.Id,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.BinaryFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.BinaryFileAction"/> instance.</param>
            <param name="key">The key (file name) of the installed file to be executed.</param>
            <param name="args">The arguments to be passed to the file during the execution.</param>
        </member>
        <member name="M:WixSharp.BinaryFileAction.#ctor(System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.BinaryFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="key">The key (file name) of the installed file to be executed.</param>
            <param name="args">The arguments to be passed to the file during the execution.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.BinaryFileAction"/>.</param>
        </member>
        <member name="M:WixSharp.BinaryFileAction.#ctor(WixSharp.Id,System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.BinaryFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.BinaryFileAction"/> instance.</param>
            <param name="key">The key (file name) of the installed file to be executed.</param>
            <param name="args">The arguments to be passed to the file during the execution.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.BinaryFileAction"/>.</param>
        </member>
        <member name="M:WixSharp.BinaryFileAction.#ctor(System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.BinaryFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="key">The key (file name) of the installed file to be executed.</param>
            <param name="args">The arguments to be passed to the file during the execution.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.BinaryFileAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="M:WixSharp.BinaryFileAction.#ctor(WixSharp.Id,System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.BinaryFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.BinaryFileAction"/> instance.</param>
            <param name="key">The key (file name) of the installed file to be executed.</param>
            <param name="args">The arguments to be passed to the file during the execution.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.BinaryFileAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="F:WixSharp.BinaryFileAction.Key">
            <summary>
            The key (file name) of the installed file to be executed.
            </summary>
        </member>
        <member name="F:WixSharp.BinaryFileAction.Args">
            <summary>
            The arguments to be passed to the file during the execution.
            </summary>
        </member>
        <member name="T:WixSharp.Certificate">
            <summary>
            This class defines website certificate attributes. It is a close equivalent of Certificate WiX element.
            </summary>
        </member>
        <member name="M:WixSharp.Certificate.#ctor">
            <summary>
            Creates an instance of Certificate
            </summary>
        </member>
        <member name="M:WixSharp.Certificate.#ctor(System.String,WixSharp.StoreLocation,WixSharp.StoreName,System.String)">
            <summary>
            Creates an instance of Certificate where the certificate is a binary resource
            </summary>
            <param name="name">The name.</param>
            <param name="storeLocation">The store location.</param>
            <param name="storeName">Name of the store.</param>
            <param name="binaryKey">The binary key.</param>
            <exception cref="T:System.ArgumentNullException">
            name;name is a null reference or empty
            or
            binaryKey;binaryKey is a null reference or empty
            </exception>
        </member>
        <member name="M:WixSharp.Certificate.#ctor(WixSharp.Id,System.String,WixSharp.StoreLocation,WixSharp.StoreName,System.String)">
            <summary>
            Creates an instance of Certificate where the certificate is a binary resource
            </summary>
            <param name="id">The identifier.</param>
            <param name="name">The name.</param>
            <param name="storeLocation">The store location.</param>
            <param name="storeName">Name of the store.</param>
            <param name="binaryKey">The binary key.</param>
        </member>
        <member name="M:WixSharp.Certificate.#ctor(WixSharp.Feature,System.String,WixSharp.StoreLocation,WixSharp.StoreName,System.String)">
            <summary>
            Creates an instance of Certificate where the certificate is a binary resource
            </summary>
            <param name="feature">The feature.</param>
            <param name="name">The name.</param>
            <param name="storeLocation">The store location.</param>
            <param name="storeName">Name of the store.</param>
            <param name="binaryKey">The binary key.</param>
        </member>
        <member name="M:WixSharp.Certificate.#ctor(WixSharp.Id,WixSharp.Feature,System.String,WixSharp.StoreLocation,WixSharp.StoreName,System.String)">
            <summary>
            Creates an instance of Certificate where the certificate is a binary resource
            </summary>
            <param name="id">The identifier.</param>
            <param name="feature">The feature.</param>
            <param name="name">The name.</param>
            <param name="storeLocation">The store location.</param>
            <param name="storeName">Name of the store.</param>
            <param name="binaryKey">The binary key.</param>
        </member>
        <member name="M:WixSharp.Certificate.#ctor(System.String,WixSharp.StoreLocation,WixSharp.StoreName,System.String,System.Boolean)">
            <summary>
            Creates an instance of Certificate where the certificate is requested or exists at the specified path
            </summary>
            <param name="name">The name.</param>
            <param name="storeLocation">The store location.</param>
            <param name="storeName">Name of the store.</param>
            <param name="certificatePath">The certificate path.</param>
            <param name="authorityRequest">if set to <c>true</c> [authority request].</param>
            <exception cref="T:System.ArgumentNullException">name;name is a null reference or empty
            or
            certificatePath;certificatePath is a null reference or empty</exception>
        </member>
        <member name="M:WixSharp.Certificate.#ctor(WixSharp.Id,System.String,WixSharp.StoreLocation,WixSharp.StoreName,System.String,System.Boolean)">
            <summary>
            Creates an instance of Certificate where the certificate is requested or exists at the specified path
            </summary>
            <param name="id">The identifier.</param>
            <param name="name">The name.</param>
            <param name="storeLocation">The store location.</param>
            <param name="storeName">Name of the store.</param>
            <param name="certificatePath">The certificate path.</param>
            <param name="request">if set to <c>true</c> [request].</param>
        </member>
        <member name="M:WixSharp.Certificate.#ctor(WixSharp.Feature,System.String,WixSharp.StoreLocation,WixSharp.StoreName,System.String,System.Boolean)">
            <summary>
            Creates an instance of Certificate where the certificate is requested or exists at the specified path
            </summary>
            <param name="feature">The feature.</param>
            <param name="name">The name.</param>
            <param name="storeLocation">The store location.</param>
            <param name="storeName">Name of the store.</param>
            <param name="certificatePath">The certificate path.</param>
            <param name="request">if set to <c>true</c> [request].</param>
        </member>
        <member name="M:WixSharp.Certificate.#ctor(WixSharp.Id,WixSharp.Feature,System.String,WixSharp.StoreLocation,WixSharp.StoreName,System.String,System.Boolean)">
            <summary>
            Creates an instance of Certificate where the certificate is requested or exists at the specified path
            </summary>
            <param name="id">The identifier.</param>
            <param name="feature">The feature.</param>
            <param name="name">The name.</param>
            <param name="storeLocation">The store location.</param>
            <param name="storeName">Name of the store.</param>
            <param name="certificatePath">The certificate path.</param>
            <param name="request">if set to <c>true</c> [request].</param>
        </member>
        <member name="F:WixSharp.Certificate.BinaryKey">
            <summary>
            The Id of a Binary instance that is the certificate to be installed
            </summary>
        </member>
        <member name="F:WixSharp.Certificate.CertificatePath">
            <summary>
            If the Request attribute is <c>false</c> then this attribute is the path to the certificate file outside of the package.
            If the Request attribute is <c>true</c> then this attribute is the certificate authority to request the certificate from.
            </summary>
        </member>
        <member name="F:WixSharp.Certificate.Name">
            <summary>
            The name of the certificate being installed
            </summary>
        </member>
        <member name="F:WixSharp.Certificate.Overwrite">
            <summary>
            Flag to indicate if the certificate should be overwritten.
            </summary>
        </member>
        <member name="F:WixSharp.Certificate.Request">
            <summary>
            This attribute controls whether the CertificatePath attribute is a path to a certificate file (Request=<c>false</c>) or
            the certificate authority to request the certificate from (Request=<c>true</c>).
            </summary>
        </member>
        <member name="F:WixSharp.Certificate.PFXPassword">
            <summary>
            If the Binary stream or path to the file outside of the package is a password protected PFX file, the password for that PFX must be specified here.
            </summary>
        </member>
        <member name="F:WixSharp.Certificate.StoreLocation">
            <summary>
            Sets the certificate StoreLocation.
            </summary>
        </member>
        <member name="F:WixSharp.Certificate.StoreName">
            <summary>
            Sets the certificate StoreName.
            </summary>
        </member>
        <member name="M:WixSharp.Certificate.ToXml">
            <summary>
            Emits WiX XML.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WixSharp.Compiler">
             <summary>
             Represents Wix# compiler. This class is responsible for conversion of CLR object <see cref="T:WixSharp.Project"/> into WiX XML source file.
             <see cref="T:WixSharp.Compiler"/> allows building complete MSI or WiX source file. It also can prepare WiX source file and generate corresponding batch file
             for building MSI WiX way: <c>candle.exe</c> + <c>light.exe</c>.
             <para>
             This class contains only static members as it is to be used only for the actual MSI/WXS building operations:
             </para>
             </summary>
            
             <example>
            
             <list type="bullet">
            
             <item>
             <description>Building MSI file
             <code>
             var project = new Project();
             ...
             Compiler.BuildMsi(project);
             </code>
             </description>
             </item>
            
             <item>
             <description>Building WiX source file only:
             <code>
             var project = new Project();
             ...
             Compiler.BuildWxs(project);
             </code>
             </description>
             </item>
            
             <item>
             <description>Preparing batch file for building MSI with WiX toolset:
             <code>
             var project = new Project();
             ...
             Compiler.BuildWxsCmd(project);
             </code>
             </description>
             </item>
            
             </list>
            
             </example>
        </member>
        <member name="M:WixSharp.Compiler.Build(WixSharp.Bootstrapper.Bundle,System.String)">
            <summary>
            Builds WiX Bootstrapper application from the specified <see cref="T:WixSharp.Bootstrapper.Bundle"/> project instance.
            </summary>
            <param name="project">The project.</param>
            <param name="path">The path.</param>
            <exception cref="T:System.ApplicationException">Wix compiler/linker cannot be found</exception>
        </member>
        <member name="M:WixSharp.Compiler.BuildCmd(WixSharp.Bootstrapper.Bundle,System.String)">
            <summary>
            Builds the WiX source file and generates batch file capable of building
            WiX/MSI bootstrapper with WiX toolset.
            </summary>
            <param name="project">The project.</param>
            <param name="path">The path to the batch file to be created.</param>
            <exception cref="T:System.ApplicationException">Wix compiler/linker cannot be found</exception>
        </member>
        <member name="M:WixSharp.Compiler.BuildWxs(WixSharp.Bootstrapper.Bundle)">
            <summary>
            Builds the WiX source file (*.wxs) from the specified <see cref="T:WixSharp.Bootstrapper.Bundle"/> instance.
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Compiler.Build(WixSharp.Bootstrapper.Bundle)">
            <summary>
            Builds WiX Bootstrapper application from the specified <see cref="T:WixSharp.Bootstrapper.Bundle"/> project instance.
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
        </member>
        <member name="F:WixSharp.Compiler.AutoGeneration">
            <summary>
            Contains settings for XML auto-generation.
            </summary>
        </member>
        <member name="E:WixSharp.Compiler.WixSourceGenerated">
            <summary>
            Occurs when WiX source code generated. Use this event if you need to modify generated XML (XDocument)
            before it is compiled into MSI.
            </summary>
        </member>
        <member name="E:WixSharp.Compiler.WixSourceSaved">
            <summary>
            Occurs when WiX source file is saved. Use this event if you need to do any post-processing of the generated/saved file.
            </summary>
        </member>
        <member name="E:WixSharp.Compiler.WixSourceFormated">
            <summary>
            Occurs when WiX source file is formatted and ready to be saved. Use this event if you need to do any custom formatting of the XML content before
            it is saved by the compiler.
            </summary>
        </member>
        <member name="F:WixSharp.Compiler.AssemblyResolve">
            <summary>
            The assembly resolve handler. If it is set then it will be used for all assembly probing (AppDomain.AssemblyResolve event) performed in all
            AppDomains.
            </summary>
        </member>
        <member name="F:WixSharp.Compiler.LightOptions">
            <summary>
            WiX linker <c>Light.exe</c> options (e.g. -sice:ICE30).
            <para>The default value is "-sw1076 -sw1079" (disable warning 1076 and 1079).</para>
            </summary>
        </member>
        <member name="F:WixSharp.Compiler.CandleOptions">
            <summary>
            WiX compiler <c>Candle.exe</c> options.
            <para>The default value is "-sw1076" (disable warning 1026).</para>
            </summary>
        </member>
        <member name="P:WixSharp.Compiler.WixLocation">
            <summary>
            Gets or sets the location of WiX binaries (compiler/linker/dlls).
            The default value is the content of environment variable <c>WIXSHARP_WIXDIR</c>.
            <para>If user does not set this property explicitly and WIXSHARP_WIXDIR is not defined
            <see cref="T:WixSharp.Compiler"/> will try to locate WiX binaries in well known locations in this order:
            <para><c>&lt;solution_dir&gt;\packages\WixSharp.wix.bin.&lt;max_version&gt;\tools\bin</c></para>
            <para><c>Program Files\Windows Installer XML v&lt;max_of 3*&gt;\bin</c></para>
            </para>
            </summary>
            <value>The WiX binaries' location.</value>
        </member>
        <member name="P:WixSharp.Compiler.WixSdkLocation">
            <summary>
            Gets or sets the location of WiX SDK binaries (e.g. MakeSfxCA.exe).
            The default value is the '..\SDK' or 'SDK' (whichever exist) sub-directory of WixSharp.Compiler.WixLocation directory.
            <para>
            If for whatever reason the default location is invalid, you can always set this property to the location of your choice.
            </para>
            </summary>
            <value>
            The WiX SDK location.
            </value>
            <exception cref="T:System.Exception">WiX SDK binaries cannot be found. Please set WixSharp.Compiler.WixSdkLocation to valid path to the Wix SDK binaries.</exception>
        </member>
        <member name="F:WixSharp.Compiler.PreserveTempFiles">
            <summary>
            Forces <see cref="T:WixSharp.Compiler"/> to preserve all temporary build files (e.g. *.wxs).
            <para>The default value is <c>false</c>: all temporary files are deleted at the end of the build/compilation.</para>
            <para>Note: if <see cref="T:WixSharp.Compiler"/> fails to build MSI the <c>PreserveTempFiles</c>
            value is ignored and all temporary files are preserved.</para>
            </summary>
        </member>
        <member name="F:WixSharp.Compiler.EmitRelativePaths">
            <summary>
            Indicates whether compiler should emit relative or absolute paths in the WiX XML source.
            </summary>
        </member>
        <member name="P:WixSharp.Compiler.GuidGenerator">
             <summary>
             Gets or sets the GUID generator algorithm. You can use either one of the built-in algorithms or define your own.
             The default value is <see cref="M:WixSharp.GuidGenerators.Default(System.Object)"/>.
             <description>Possible WiX source file only:
             <code>
             //default built-in seeded GUID generator
             Compiler.GuidGenerator = GuidGenerators.Default;
            
             //sequential built-in GUID generator
             Compiler.GuidGenerator = GuidGenerators.Sequential;
            
             //Custom 'aways-same' GUID generator
             Compiler.GuidGenerator = (seed) => Guid.Parse("9e2974a1-9539-4c5c-bef7-80fc35b9d7b0");
            
             //Custom random GUID generator
             Compiler.GuidGenerator = (seed) => Guid.NewGuid();
             </code>
             </description>
             </summary>
             <value>
             The GUID generator algorithm.
             </value>
        </member>
        <member name="F:WixSharp.Compiler.TempFiles">
            <summary>
            The collection of temporary files created by compiler routine(s). These files will always be deleted unless Project/Compiler
            PreserveTempFiles property is set to true;
            </summary>
        </member>
        <member name="M:WixSharp.Compiler.BuildMsi(WixSharp.Project)">
            <summary>
            Builds the MSI file from the specified <see cref="T:WixSharp.Project"/> instance.
            </summary>
            <param name="project">The <see cref="T:WixSharp.Project"/> instance.</param>
            <returns>Path to the built MSI file. Returns <c>null</c> if <c>MSI</c> cannot be built.</returns>
        </member>
        <member name="M:WixSharp.Compiler.BuildMsiCmd(WixSharp.Project)">
            <summary>
            Builds the WiX source file and generates batch file capable of building
            MSI with WiX toolset.
            </summary>
            <param name="project">The <see cref="T:WixSharp.Project"/> instance.</param>
            <returns>Path to the batch file.</returns>
        </member>
        <member name="M:WixSharp.Compiler.BuildMsmCmd(WixSharp.Project)">
            <summary>
            Builds the WiX source file and generates batch file capable of building
            MSM with WiX toolset.
            </summary>
            <param name="project">The <see cref="T:WixSharp.Project"/> instance.</param>
            <returns>Path to the batch file.</returns>
        </member>
        <member name="M:WixSharp.Compiler.BuildMsiCmd(WixSharp.Project,System.String)">
            <summary>
            Builds the WiX source file and generates batch file capable of building
            MSI with WiX toolset.
            </summary>
            <param name="project">The <see cref="T:WixSharp.Project"/> instance.</param>
            <param name="path">The path to the batch file to be build.</param>
            <returns>Path to the batch file.</returns>
        </member>
        <member name="M:WixSharp.Compiler.BuildMsmCmd(WixSharp.Project,System.String)">
            <summary>
            Builds the WiX source file and generates batch file capable of building
            MSM with WiX toolset.
            </summary>
            <param name="project">The <see cref="T:WixSharp.Project"/> instance.</param>
            <param name="path">The path to the batch file to be build.</param>
            <returns>Path to the batch file.</returns>
        </member>
        <member name="M:WixSharp.Compiler.BuildMsi(WixSharp.Project,System.String)">
            <summary>
            Builds the MSI file from the specified <see cref="T:WixSharp.Project"/> instance.
            </summary>
            <param name="project">The <see cref="T:WixSharp.Project"/> instance.</param>
            <param name="path">The path to the MSI file to be build.</param>
            <returns>Path to the built MSI file.</returns>
        </member>
        <member name="M:WixSharp.Compiler.BuildMsm(WixSharp.Project)">
            <summary>
            Builds the MSM file from the specified <see cref="T:WixSharp.Project"/> instance.
            </summary>
            <param name="project">The <see cref="T:WixSharp.Project"/> instance.</param>
            <returns>Path to the built MSM file. Returns <c>null</c> if <c>msm</c> cannot be built.</returns>
        </member>
        <member name="M:WixSharp.Compiler.BuildMsm(WixSharp.Project,System.String)">
            <summary>
            Builds the MSM file from the specified <see cref="T:WixSharp.Project"/> instance.
            </summary>
            <param name="project">The <see cref="T:WixSharp.Project"/> instance.</param>
            <param name="path">The path to the MSM file to be build.</param>
            <returns>Path to the built MSM file.</returns>
        </member>
        <member name="T:WixSharp.Compiler.OutputType">
            <summary>
            Specifies the type of the setup binaries to build.
            </summary>
        </member>
        <member name="F:WixSharp.Compiler.OutputType.MSI">
            <summary>
            MSI file.
            </summary>
        </member>
        <member name="F:WixSharp.Compiler.OutputType.MSM">
            <summary>
            Merge Module (MSM) file.
            </summary>
        </member>
        <member name="M:WixSharp.Compiler.BuildWxs(WixSharp.Project)">
            <summary>
            Builds the WiX source file (*.wxs) from the specified <see cref="T:WixSharp.Project"/> instance for further compiling into MSI file.
            </summary>
            <param name="project">The <see cref="T:WixSharp.Project"/> instance.</param>
            <returns>Path to the built WXS file.</returns>
        </member>
        <member name="M:WixSharp.Compiler.BuildWxs(WixSharp.Project,WixSharp.Compiler.OutputType)">
            <summary>
            Builds the WiX source file (*.wxs) from the specified <see cref="T:WixSharp.Project"/> instance.
            </summary>
            <param name="project">The <see cref="T:WixSharp.Project"/> instance.</param>
            <param name="type">The type (<see cref="T:WixSharp.Compiler.OutputType"/>) of the setup file to be defined in the source file (MSI vs. MSM).</param>
            <returns>Path to the built WXS file.</returns>
        </member>
        <member name="M:WixSharp.Compiler.BuildWxs(WixSharp.Project,System.String,WixSharp.Compiler.OutputType)">
            <summary>
            Builds the WiX source file (*.wxs) from the specified <see cref="T:WixSharp.Project"/> instance.
            </summary>
            <param name="project">The <see cref="T:WixSharp.Project"/> instance.</param>
            <param name="path">The path to the WXS file to be build.</param>
            <param name="type">The type (<see cref="T:WixSharp.Compiler.OutputType"/>) of the setup file to be defined in the source file (MSI vs. MSM).</param>
            <returns>Path to the built WXS file.</returns>
        </member>
        <member name="M:WixSharp.Compiler.DefaultWixSourceGeneratedHandler(System.Xml.Linq.XDocument)">
            <summary>
            The default <see cref="E:WixSharp.Compiler.WixSourceGenerated"/> event handler.
            </summary>
            <param name="doc">The XDocument object representing WiX XML source code.</param>
        </member>
        <member name="M:WixSharp.Compiler.DefaultWixSourceFormatedHandler(System.String@)">
            <summary>
            The default <see cref="E:WixSharp.Compiler.WixSourceFormated"/> event handler.
            </summary>
            <param name="xml">The XML text string representing WiX XML source code.</param>
        </member>
        <member name="M:WixSharp.Compiler.GenerateWixProj(WixSharp.Project)">
            <summary>
            Generates WiX XML source file the specified <see cref="T:WixSharp.Project"/> instance.
            </summary>
            <param name="project">The <see cref="T:WixSharp.Project"/> instance.</param>
            <returns>Instance of XDocument class representing in-memory WiX XML source file.</returns>
        </member>
        <member name="F:WixSharp.Compiler.AllowNonRtfLicense">
            <summary>
            Defines if license file can be have non RTF extension.
            </summary>
        </member>
        <member name="M:WixSharp.Compiler.ProcessCustomActions(WixSharp.Project,System.Xml.Linq.XElement)">
            <summary>
            Processes the custom actions.
            </summary>
            <param name="wProject">The w project.</param>
            <param name="product">The product.</param>
            <exception cref="T:System.Exception">Step.PreviousAction is specified for the very first 'Custom Action'.\nThere cannot be any previous action as it is the very first one in the sequence.</exception>
        </member>
        <member name="P:WixSharp.Compiler.ClientAssembly">
            <summary>
            Path to the <c>WixSharp.dll</c> client assembly. Typically it is the Wix# setup script assembly.
            <para>This value is used to resolve <c>%this%</c> of the <see cref="T:WixSharp.ManagedAction"/>. If this value is not specified
            <see cref="T:WixSharp.Compiler"/> will set it to the caller of its <c>Build</c> method.</para>
            </summary>
        </member>
        <member name="F:WixSharp.Compiler.IgnoreClientAssemblyPDB">
            <summary>
            Flag indicating whether to include PDB file of the assembly implementing ManagedCustomAction into MSI.  Default value is <c>False</c>.
            <para>If set to <c>false</c> PDB file will not be included and debugging of such CustomAction will not be possible.</para>
            </summary>
        </member>
        <member name="M:WixSharp.Compiler.BuildPackageAsmCmd(System.String,System.String,System.String[],System.String,System.String,System.Nullable{WixSharp.Platform},System.Boolean)">
            <summary>
            Builds the batch file for packaging the assembly containing managed CA or UI.
            </summary>
            <param name="asm">The assembly to be packaged.</param>
            <param name="nativeDll">The package file (native DLL) to be build.</param>
            <param name="refAssemblies">The referenced assemblies.</param>
            <param name="outDir">The out dir.</param>
            <param name="configFilePath">The app config file path.</param>
            <param name="platform">The platform.</param>
            <param name="embeddedUI">if set to <c>true</c> the assembly as an 'EmbeddedUI' assembly.</param>
            <returns>Batch file path.</returns>
        </member>
        <member name="M:WixSharp.Compiler.BuildPackageAsm(System.String,System.String,System.String[],System.String,System.String,System.Nullable{WixSharp.Platform},System.Boolean)">
            <summary>
            Packages the assembly containing managed CA or UI.
            </summary>
            <param name="asm">The assembly to be packaged.</param>
            <param name="nativeDll">The package file (native DLL) to be build.</param>
            <param name="refAssemblies">The referenced assemblies.</param>
            <param name="outDir">The out dir.</param>
            <param name="configFilePath">The app config file path.</param>
            <param name="platform">The platform.</param>
            <param name="embeddedUI">if set to <c>true</c> the assembly as an 'EmbeddedUI' assembly.</param>
            <returns>Package file path.</returns>
        </member>
        <member name="M:WixSharp.Compiler.GetMappedWixConstants(System.Boolean)">
            <summary>
            Gets list of the the mapped WiX constants.
            </summary>
            <param name="include64Specific">if set to <c>true</c> [include64 specific].</param>
            <returns></returns>
        </member>
        <member name="F:WixSharp.Compiler.OutputWriteLine">
            <summary>
            Custom handler for Compiler output. The default value is <c>Console.WriteLine</c>.
            </summary>
        </member>
        <member name="T:WixSharp.Compiler.ToolsOutputReceivedEventHandler">
            <summary>
            Delegate for receiving WiX tools output (e.g. compiler/linker).
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="E:WixSharp.Compiler.ToolsOutputReceived">
            <summary>
            Occurs when WiX tools (e.g. compiler/linker) output received.
            </summary>
        </member>
        <member name="T:WixSharp.Compiler.Wildcard">
            <summary>
            Represents a wildcard running on the
            <see cref="T:System.Text.RegularExpressions"/> engine.
            </summary>
            <remarks>
            This class was developed and described by <c>reinux</c> in "Converting Wildcards to Regexes"
            on CodeProject (<c>http://www.codeproject.com/KB/recipes/wildcardtoregex.aspx</c>).
            </remarks>
        </member>
        <member name="M:WixSharp.Compiler.Wildcard.#ctor(System.String)">
            <summary>
            Initializes a wildcard with the given search pattern.
            </summary>
            <param name="pattern">The wildcard pattern to match.</param>
        </member>
        <member name="M:WixSharp.Compiler.Wildcard.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a wildcard with the given search pattern and options.
            </summary>
            <param name="pattern">The wildcard pattern to match.</param>
            <param name="options">A combination of one or more
            <see cref="T:System.Text.RegexOptions"/>.</param>
        </member>
        <member name="M:WixSharp.Compiler.Wildcard.WildcardToRegex(System.String)">
            <summary>
            Converts a wildcard to a regex.
            </summary>
            <param name="pattern">The wildcard pattern to convert.</param>
            <returns>A regex equivalent of the given wildcard.</returns>
        </member>
        <member name="T:WixSharp.NativeImage">
            <summary>
            Improves the performance of managed applications by creating native images. Requires the .NET Framework 2.0 or newer to be installed on the target machine since it runs NGen.
            </summary>
            <example>The following is an example of defining an assembly file that needs to have native image generated for x86 platform.
            <code>
            new Project("MyProduct",
                new Dir(@"%ProgramFiles%\MyCompany\MyProduct",
                    new Files(@"Release\Bin\logger.dll",
                        new NativeImage { Platform = NativeImagePlatform.x86}),
                    ...
            </code>
            </example>
            <seealso cref="T:WixSharp.WixEntity" />
            <seealso cref="T:WixSharp.IGenericEntity" />
        </member>
        <member name="P:WixSharp.NativeImage.Id">
            <summary>
            Gets or sets the <c>Id</c> value of the <see cref="T:WixSharp.WixEntity"/>.
            <para>This value is used as a <c>Id</c> for the corresponding WiX XML element.</para>
            <para>If the <see cref="P:WixSharp.NativeImage.Id"/> value is not specified explicitly by the user the Wix# compiler
            generates it automatically insuring its uniqueness.</para>
            <remarks>
             Note: The ID auto-generation is triggered on the first access (evaluation) and in order to make the id
             allocation deterministic the compiler resets ID generator just before the build starts. However if you
             accessing any auto-id before the Build*() is called you can it interferes with the ID auto generation and eventually
             lead to the WiX ID duplications. To prevent this from happening either:"
             <para> - Avoid evaluating the auto-generated IDs values before the call to Build*()</para>
             <para> - Set the IDs (to be evaluated) explicitly</para>
             <para> - Prevent resetting auto-ID generator by setting WixEntity.DoNotResetIdGenerator to true";</para>
            </remarks>
            </summary>
            <value>The id.</value>
        </member>
        <member name="F:WixSharp.NativeImage.Platform">
            <summary>
            Sets the platform(s) for which native images will be generated.
            </summary>
        </member>
        <member name="F:WixSharp.NativeImage.Priority">
            <summary>
            Sets the priority of generating the native images for this assembly.This attribute's value must be one of the following:
            0 - This is the highest priority, it means that image generation occurs syncronously during the setup process.This option will slow down setup performance.
            1 - This will queue image generation to the NGen service to occur immediately.This option will slow down setup performance.
            2 - This will queue image generation to the NGen service to occur after all priority 1 assemblies have completed.This option will slow down setup performance.
            3 - This is the lowest priority, it will queue image generation to occur when the machine is idle.This option should not slow down setup performance. This is the default value.
            </summary>
        </member>
        <member name="F:WixSharp.NativeImage.AppBaseDirectory">
            <summary>
            The directory to use for locating dependent assemblies. For DLL assemblies and assemblies installed to the Global Assembly Cache (GAC), this attribute should be set to the directory of the application which loads this assembly. For EXE assemblies, this attribute does not need to be set because NGen will use the directory of the assembly file by default.
            <para></para>
            <para>
            The value can be in the form of a directory identifier, or a formatted string that resolves to either a directory identifier or a full path to a directory.
            </para>
            </summary>
        </member>
        <member name="F:WixSharp.NativeImage.AssemblyApplication">
            <summary>
            The application which will load this assembly. For DLL assemblies which are loaded via reflection, this attribute should be set to indicate the application which will load this assembly. The configuration of the application (usually specified via an exe.config file) will be used to determine how to resolve dependencies for this assembly.
            <para>
            The value can be in the form of a file identifier, or a formatted string that resolves to either a file identifier or a full path to a file.
            </para>
            <para>
            When a shared component is loaded at run time, using the Load method, the application's configuration file determines the dependencies that are loaded for the shared component — for example, the version of a dependency that is loaded. This attribute gives guidance on which dependencies would be loaded at run time in order to figure out which dependency assemblies will also need to have native images generated (assuming the Dependency attribute is not set to "no").
            </para>
            <para>
            This attribute cannot be set if the AssemblyApplication attribute is set on the parent File element (please note that these attributes both refer to the same application assembly but do very different things: specifiying File/@AssemblyApplication will force an assembly to install to a private location next to the indicated application, whereas this AssemblyApplication attribute will be used to help resolve dependent assemblies while generating native images for this assembly).
            </para>
            </summary>
        </member>
        <member name="F:WixSharp.NativeImage.Debug">
            <summary>
            Set to "true" to generate native images that can be used under a debugger. The default value is "false".
            </summary>
        </member>
        <member name="F:WixSharp.NativeImage.Profile">
            <summary>
            Set to "false" to generate native images that can be used under a profiler. The default value is "false".
            </summary>
        </member>
        <member name="M:WixSharp.NativeImage.Process(WixSharp.ProcessingContext)">
            <summary>
            Adds itself as an XML content into the WiX source being generated from the <see cref="T:WixSharp.Project"/>.
            See 'Wix#/samples/Extensions' sample for the details on how to implement this interface correctly.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:WixSharp.EventSource">
             <summary>
             Defines Event source for windows Event Log service.
             </summary>
             <seealso cref="T:WixSharp.WixEntity" />
             <seealso cref="T:WixSharp.IGenericEntity" />
            <example>The following is an example of creating an event source "ROOT Builder".
            <code>
            var project =
             new Project("MyProduct",
                 new Dir(@"%ProgramFiles64Folder%\My Company\My Product",
                     new EventSourceEx
                     {
                         Name = "ROOT Builder",
                         Log = "Application",
                         EventMessageFile = @"%SystemRoot%\Microsoft.NET\Framework\v2.0.50727\EventLogMessages.dll"
                     },
                     ...
            
             project.BuildMsi();
             </code>
             </example>
        </member>
        <member name="F:WixSharp.EventSource.Name">
            <summary>
            Name of the event source.
            </summary>
        </member>
        <member name="F:WixSharp.EventSource.Log">
            <summary>
            Name of the event source's log.
            </summary>
        </member>
        <member name="F:WixSharp.EventSource.EventMessageFile">
             <summary>
             Creates an event source.
             </summary>
            <example>The following is an example of creating an event source "ROOT Boilder".
            <code>
            var project =
             new Project("MyProduct",
                 new Dir(@"%ProgramFiles64Folder%\My Company\My Product",
                     new EventSourceEx
                     {
                         Name = "ROOT Builder",
                         Log = "Application",
                         EventMessageFile = @"%SystemRoot%\Microsoft.NET\Framework\v2.0.50727\EventLogMessages.dll"
                     },
                     ...
            
             project.BuildMsi();
             </code>
             </example>
        </member>
        <member name="M:WixSharp.EventSource.Process(WixSharp.ProcessingContext)">
            <summary>
            Adds itself as an XML content into the WiX source being generated from the <see cref="T:WixSharp.Project"/>.
            See 'Wix#/samples/Extensions' sample for the details on how to implement this interface correctly.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:WixSharp.FirewallException">
            <summary>
            Registers an exception for a program or a specific port and protocol in the Windows Firewall on
            Windows XP SP2, Windows Server 2003 SP1, and later.
            </summary>
            <remarks>
            FirewallException is a Wix# representation of WiX FirewallException Element (Firewall Extension)
            </remarks>
            <example>The following is an example of defining FirewallException for the file being installed.
            <code>
            var project =
                new Project("MyProduct",
                    new Dir(@"%ProgramFiles%\My Company\My Product",
                        new File(@"Files\Bin\MyApp.exe",
                            new FirewallException("MyApp")
                            {
                                RemoteAddress = "127.0.0.1, 127.0.0.2, 127.0.0.3".Split(',')
                            }
                            ...
            </code>
            </example>
        </member>
        <member name="F:WixSharp.FirewallException.Description">
            <summary>
            Description for this firewall rule displayed in Windows Firewall manager in Windows Vista and later.
            </summary>
        </member>
        <member name="F:WixSharp.FirewallException.File">
            <summary>
            Identifier of a file to be granted access to all incoming ports and protocols. If you use File, you cannot also use Program.
            If you use File and also Port or Protocol in the same FirewallException element,
            the exception will fail to install on Windows XP and Windows Server 2003. IgnoreFailure="yes" can be used to ignore the resulting failure,
            but the exception will not be added.
            </summary>
        </member>
        <member name="F:WixSharp.FirewallException.IgnoreFailure">
            <summary>
            If "true", failures to register this firewall exception will be silently ignored. If "false" (the default),
            failures will cause rollback.
            </summary>
        </member>
        <member name="P:WixSharp.FirewallException.Name">
            <summary>
            Name of this firewall exception, visible to the user in the firewall control panel.
            </summary>
        </member>
        <member name="F:WixSharp.FirewallException.Port">
            <summary>
            Port to allow through the firewall for this exception.
            If you use Port and also File or Program in the same FirewallException element, the exception will fail to
            install on Windows XP and Windows Server 2003. IgnoreFailure="yes" can be used to ignore the resulting failure,
            but the exception will not be added.
            </summary>
        </member>
        <member name="F:WixSharp.FirewallException.Profile">
            <summary>
            Profile type for this firewall exception. Default is "all". This attribute's value must be one of the following:
            <list type="bullet">
            <item><description>domain</description></item>
            <item><description>private</description></item>
            <item><description>public</description></item>
            <item><description>all</description></item>
            </list>
            </summary>
        </member>
        <member name="F:WixSharp.FirewallException.Program">
            <summary>
            Path to a target program to be granted access to all incoming ports and protocols. Note that this is a formatted
            field, so you can use [#fileId] syntax to refer to a file being installed. If you use Program, you cannot also use File.
            If you use Program and also Port or Protocol in the same FirewallException element, the exception will fail to install
            on Windows XP and Windows Server 2003. IgnoreFailure="yes" can be used to ignore the resulting failure, but the
            exception will not be added.
            </summary>
        </member>
        <member name="F:WixSharp.FirewallException.Protocol">
            <summary>
            IP protocol used for this firewall exception. If Port is defined, "tcp" is assumed if the protocol is not specified.
            <para>If you use Protocol and also File or Program in the same FirewallException element, the exception will fail to
            install on Windows XP and Windows Server 2003. IgnoreFailure="yes" can be used to ignore the resulting failure, but
            the exception will not be added.This attribute's value must be one of the following:
            </para>
            <list type="bullet">
            <item><description>tcp</description></item>
            <item><description>udp</description></item>
            </list>
            </summary>
        </member>
        <member name="F:WixSharp.FirewallException.Scope">
            <summary>
            The scope of this firewall exception, which indicates whether incoming connections can come from any computer
            including those on the Internet or only those on the local network subnet. To more precisely specify allowed remote
            address, specify a custom scope using RemoteAddress child elements. This attribute's value must be one of the
            following:
            <list type="bullet">
            <item><description>any</description></item>
            <item><description>localSubnet</description></item>
            </list>
            </summary>
        </member>
        <member name="F:WixSharp.FirewallException.RemoteAddress">
            <summary>
            A remote address to which the port or program can listen. Address formats vary based on the version of Windows and
            Windows Firewall the program is being installed on. For Windows XP SP2 and Windows Server 2003 SP1, see
            RemoteAddresses Property. For Windows Vista and Windows Server 2008, see RemoteAddresses Property.
            </summary>
        </member>
        <member name="M:WixSharp.FirewallException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.FirewallException" /> class.
            </summary>
        </member>
        <member name="M:WixSharp.FirewallException.#ctor(WixSharp.Id)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.FirewallException" /> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:WixSharp.FirewallException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.FirewallException" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WixSharp.FirewallException.#ctor(WixSharp.Id,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.FirewallException" /> class.
            </summary>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:WixSharp.FirewallException.ToXml">
            <summary>
            Emits WiX XML for FirewallException.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WixSharp.FontFile">
             <summary>
             Defines file to be installed.
             </summary>
             
            <example>The following is an example of installing <c>MyApp.exe</c> file.
            <code>
             var project = 
                     new Project("MyProduct",
                         new Dir(@"%ProgramFiles%\My Company\My Product",
                             new File("readme.txt")),
                         new Dir("%Fonts%",
                             new FontFile("FreeSansBold.ttf")));
                     ...
                     
             project.BuildMsi();
             </code>
             </example>
        </member>
        <member name="M:WixSharp.FontFile.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:WixSharp.FontFile"/>.
            <para>This property is designed to produce a friendlier string representation of the <see cref="T:WixSharp.FontFile"/>
            for debugging purposes.</para>
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the <see cref="T:WixSharp.FontFile"/>.
            </returns>
        </member>
        <member name="M:WixSharp.FontFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.FontFile"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.FontFile.#ctor(WixSharp.Feature,System.String)">
            <summary>
            Creates instance of the <see cref="T:WixSharp.FontFile"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the file should be included in.</param>
            <param name="sourcePath">Relative path to the file to be taken for building the MSI.</param>
        </member>
        <member name="P:WixSharp.FontFile.TrueType">
            <summary>
            Gets or sets a value indicating whether the font file is a TrueType font. Default value is <c>true</c>
            <para>Causes an entry to be generated for the file in the Font table with no FontTitle specified. This attribute is intended to be used to register the file as a TrueType font.</para>
            </summary>
            <value><c>true</c> if TrueType font otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WixSharp.FontFile.FontTitle">
            <summary>
            Gets or sets the font title.
            <para>Causes an entry to be generated for the file in the Font 
            table with the specified FontTitle. This attribute is intended to be used to register the file as a non-TrueType font.</para>
            </summary>
            <value>The font title.</value>
        </member>
        <member name="M:WixSharp.FontFile.#ctor(WixSharp.Id,WixSharp.Feature,System.String)">
            <summary>
            Creates instance of the <see cref="T:WixSharp.FontFile"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.FontFile"/> instance.</param>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the file should be included in.</param>
            <param name="sourcePath">Relative path to the file to be taken for building the MSI.</param>
        </member>
        <member name="M:WixSharp.FontFile.#ctor(System.String)">
            <summary>
            Creates instance of the <see cref="T:WixSharp.FontFile"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="sourcePath">Relative path to the file to be taken for building the MSI.</param>
        </member>
        <member name="M:WixSharp.FontFile.#ctor(WixSharp.Id,System.String)">
            <summary>
            Creates instance of the <see cref="T:WixSharp.FontFile"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.FontFile"/> instance.</param>
            <param name="sourcePath">Relative path to the file to be taken for building the MSI.</param>
        </member>
        <member name="T:WixSharp.ProcessingContext">
            <summary>
            This type is a container for the all information needed by the implementer of <see cref="T:WixSharp.IGenericEntity"/>
            </summary>
        </member>
        <member name="F:WixSharp.ProcessingContext.Project">
            <summary>
            Wix# project being compiled.
            </summary>
        </member>
        <member name="F:WixSharp.ProcessingContext.Parent">
            <summary>
            Wix# project member that hosts (contains) user defined WiX entity being compiled/processed.
            </summary>
        </member>
        <member name="F:WixSharp.ProcessingContext.XParent">
            <summary>
            XML element already generated by Wix# for the <see cref="F:WixSharp.ProcessingContext.Parent"/>.
            </summary>
        </member>
        <member name="F:WixSharp.ProcessingContext.FeatureComponents">
            <summary>
            Map of features and their associated components. The map contains pairs of Features and their component IDs.
            <para>
            If <see cref="T:WixSharp.IGenericEntity"/> needs to create a component it can immediately 
            associate this component with either existing feature in the map or add a new map entry.
            </para>
            </summary>
        </member>
        <member name="T:WixSharp.IGenericEntity">
            <summary>
            An interface for the external user defined WiX entities (e.g. new WiX extensions) to be integrated with Wix# compiler.
            </summary>
        </member>
        <member name="M:WixSharp.IGenericEntity.Process(WixSharp.ProcessingContext)">
            <summary>
            Adds itself as an XML content into the WiX source being generated from the <see cref="T:WixSharp.Project"/>.
            See 'Wix#/samples/Extensions' sample for the details on how to implement this interface correctly.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:WixSharp.InternetShortcut">
             <summary>
             Defines Event source for windows Event Log service.
             </summary>
             <seealso cref="T:WixSharp.WixEntity" />
             <seealso cref="T:WixSharp.IGenericEntity" />
            <example>The following is an example of creating a shortcut to the Wix# website.
            <code>
            var project =
             new Project("MyProduct",
                 new Dir(@"%ProgramFiles64Folder%\My Company\My Product",
                    new InternetShortcut
                    {
                        Name = "My Online Documentation",
                        Target = "https://github.com/oleg-shilo/wixsharp"
                    },
                     ...
                     
             project.BuildMsi();
             </code>
             </example>
        </member>
        <member name="T:WixSharp.InternetShortcut.ShortcutType">
            <summary>
            Type of shortcut should be created. 
            </summary>
            
        </member>
        <member name="F:WixSharp.InternetShortcut.ShortcutType.link">
            <summary>
            Creates .lnk files using IShellLinkW (default).
            </summary>
        </member>
        <member name="F:WixSharp.InternetShortcut.ShortcutType.url">
            <summary>
            Creates .url files using IUniformResourceLocatorW
            </summary>
        </member>
        <member name="F:WixSharp.InternetShortcut.Name">
            <summary>
            The name of the shortcut file, which is visible to the user. (The .lnk extension is added automatically and by default, is not shown to the user.)
            </summary>
        </member>
        <member name="F:WixSharp.InternetShortcut.Id">
            <summary>
            Unique identifier in your installation package for this Internet shortcut.
            </summary>
        </member>
        <member name="F:WixSharp.InternetShortcut.Target">
            <summary>
            URL that should be opened when the user selects the shortcut. Windows opens the URL in the appropriate handler for the protocol specified in the URL. Note that this is a formatted field, so you can use [#fileId] syntax to refer to a file being installed (using the file: protocol).
            </summary>
        </member>
        <member name="F:WixSharp.InternetShortcut.Type">
            <summary>
            Which type of shortcut should be created. This attribute's value must be one of the following:
            <para><c>url</c> - Creates .url files using IUniformResourceLocatorW.</para>
            <para><c>link</c> - Creates .lnk files using IShellLinkW (default). </para>
            </summary>
        </member>
        <member name="M:WixSharp.InternetShortcut.Process(WixSharp.ProcessingContext)">
            <summary>
            Adds itself as an XML content into the WiX source being generated from the <see cref="T:WixSharp.Project"/>.
            See 'Wix#/samples/Extensions' sample for the details on how to implement this interface correctly.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:WixSharp.MajorUpgrade">
            <summary>
            Simplifies authoring for major upgrades, including support for preventing downgrades.
            </summary>
        </member>
        <member name="F:WixSharp.MajorUpgrade.Default">
            <summary>
            The predefined instance of the <c>MajorUpgrade</c>. It is the equivalent of the code below:
            <code>
            project.MajorUpgrade = new MajorUpgrade
            {
                Schedule = UpgradeSchedule.afterInstallInitialize,
                DowngradeErrorMessage = "A later version of [ProductName] is already installed. Setup will now exit."
            };
            </code>
            </summary>
        </member>
        <member name="F:WixSharp.MajorUpgrade.AllowDowngrades">
            <summary>
            When set to "false" (the default), products with lower version numbers are blocked from installing when a product with a higher version
            is installed; the DowngradeErrorMessage attribute must also be specified.
            <para>
            When set to "true", any version can be installed over any other version.
            </para>
            </summary>
        </member>
        <member name="F:WixSharp.MajorUpgrade.AllowSameVersionUpgrades">
            <summary>
            When set to "false" (the default), installing a product with the same version and upgrade code (but different product code) is allowed and
            treated by MSI as two products. When set to yes, WiX sets the msidbUpgradeAttributesVersionMaxInclusive attribute, which tells MSI to
            treat a product with the same version as a major upgrade.
            <para>
            This is useful when two product versions differ only in the fourth version field. MSI specifically ignores that field when comparing
            product versions, so two products that differ only in the fourth version field are the same product and need this attribute set to
            "true" to be detected.
            </para>
            <para>
            Note that because MSI ignores the fourth product version field, setting this attribute to yes also allows downgrades when the first three
            product version fields are identical. For example, product version 1.0.0.1 will "upgrade" 1.0.0.2998 because they're seen as the same
            version (1.0.0). That could reintroduce serious bugs so the safest choice is to change the first three version fields and omit this attribute
             to get the default of no.
            </para>
            <para>
            This attribute cannot be "true" when AllowDowngrades is also "true" -- AllowDowngrades already allows two products with the same version
            number to upgrade each other.
            </para>
            </summary>
        </member>
        <member name="F:WixSharp.MajorUpgrade.Disallow">
            <summary>
            When set to "true", products with higher version numbers are blocked from installing when a product with a lower version is installed;
            the UpgradeErrorMessage attribute must also be specified.
            <para>
            When set to "false" (the default), any version can be installed over any lower version.
            </para>
            </summary>
        </member>
        <member name="F:WixSharp.MajorUpgrade.DisallowUpgradeErrorMessage">
            <summary>
            The message displayed if users try to install a product with a higher version number when a product with a lower version is installed.
            Used only when Disallow is "true".
            </summary>
        </member>
        <member name="F:WixSharp.MajorUpgrade.DowngradeErrorMessage">
            <summary>
            The message displayed if users try to install a product with a lower version number when a product with a higher version is installed.
            Used only when AllowDowngrades is "false" (the default).
            </summary>
        </member>
        <member name="F:WixSharp.MajorUpgrade.IgnoreRemoveFailure">
            <summary>
            When set to "true", failures removing the installed product during the upgrade will be ignored.
            When set to "false" (the default), failures removing the installed product during the upgrade will be considered a failure and, depending on the
            scheduling, roll back the upgrade.
            </summary>
        </member>
        <member name="F:WixSharp.MajorUpgrade.MigrateFeatures">
            <summary>
            When set to "true" (the default), the MigrateFeatureStates standard action will set the feature states of the upgrade product to those of
            the installed product.
            <para>
            When set to "false", the installed features have no effect on the upgrade installation
            </para>
            </summary>
        </member>
        <member name="F:WixSharp.MajorUpgrade.RemoveFeatures">
            <summary>
            A formatted string that contains the list of features to remove from the installed product. The default is to remove all features. Note that
            if you use formatted property values that evaluate to an empty string, no features will be removed; only omitting this attribute defaults to
            removing all features.
            </summary>
        </member>
        <member name="F:WixSharp.MajorUpgrade.Schedule">
            <summary>
            Determines the scheduling of the RemoveExistingProducts standard action, which is when the installed product is removed. The default is
            "afterInstallValidate" which removes the installed product entirely before installing the upgrade product. It's slowest but gives
            the most flexibility in changing components and features in the upgrade product.
            </summary>
        </member>
        <member name="M:WixSharp.MajorUpgrade.ToXml">
            <summary>
            Emits WiX XML.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WixSharp.UpgradeSchedule">
            <summary>
            Determines the scheduling of the RemoveExistingProducts standard action.
            </summary>
        </member>
        <member name="F:WixSharp.UpgradeSchedule.afterInstallValidate">
            <summary>
             (Default) Schedules RemoveExistingProducts after the InstallValidate standard action. This scheduling removes the installed product entirely before installing the upgrade product. It's slowest but gives the most flexibility in changing components and features in the upgrade product. Note that if the installation of the upgrade product fails, the machine will have neither version installed.
            </summary>
        </member>
        <member name="F:WixSharp.UpgradeSchedule.afterInstallInitialize">
            <summary>
            Schedules RemoveExistingProducts after the InstallInitialize standard action. This is similar to the afterInstallValidate scheduling, but if the installation of the upgrade product fails, Windows Installer also rolls back the removal of the installed product -- in other words, reinstalls it.
            </summary>
        </member>
        <member name="F:WixSharp.UpgradeSchedule.afterInstallExecute">
            <summary>
            Schedules RemoveExistingProducts between the InstallExecute and InstallFinalize standard actions. This scheduling installs the upgrade product "on top of" the installed product then lets RemoveExistingProducts uninstall any components that don't also exist in the upgrade product. Note that this scheduling requires strict adherence to the component rules because it relies on component reference counts to be accurate during installation of the upgrade product and removal of the installed product. For more information, see Bob Arnson's blog post "Paying for Upgrades" for details. If installation of the upgrade product fails, Windows Installer also rolls back the removal of the installed product -- in other words, reinstalls it.
            </summary>
        </member>
        <member name="F:WixSharp.UpgradeSchedule.afterInstallExecuteAgain">
            <summary>
            Schedules RemoveExistingProducts between the InstallExecuteAgain and InstallFinalize standard actions. This is identical to the afterInstallExecute scheduling but after the InstallExecuteAgain standard action instead of InstallExecute.
            </summary>
        </member>
        <member name="F:WixSharp.UpgradeSchedule.afterInstallFinalize">
            <summary>
            Schedules RemoveExistingProducts after the InstallFinalize standard action. This is similar to the afterInstallExecute and afterInstallExecuteAgain schedulings but takes place outside the installation transaction so if installation of the upgrade product fails, Windows Installer does not roll back the removal of the installed product, so the machine will have both versions installed.
            </summary>
        </member>
        <member name="T:WixSharp.Media">
             <summary>
             Generic <see cref="T:WixSharp.WixEntity"/> container for defining WiX <c>Media</c> element attributes.
             <para>These attributes describe a disk that makes up the source media for the installation.</para>
            <example>The following is an example of defining the <c>Media</c> attributes.
            <code>
             var project =
                 new Project("My Product",
                     new Dir(@"%ProgramFiles%\My Company\My Product",
                 ...
             project.Media.First().Id=2;
             project.Media.First().CompressionLevel=CompressionLevel.high;
             //or
             project.Media.First().AttributesDefinition = @"CompressionLevel=high;
                                                            Id=2";
             Compiler.BuildMsi(project);
             </code>
             </example>
             </summary>
        </member>
        <member name="F:WixSharp.Media.Id">
            <summary>
            Disk identifier for Media table. This number must be equal to or greater than 1.
            </summary>
        </member>
        <member name="F:WixSharp.Media.Cabinet">
            <summary>
            The name of the cabinet if some or all of the files stored on the media are in
            a cabinet file. If no cabinets are used, this attribute must not be set.
            <para>The default value is <c> "{projectId}.cab"</c>, which is expanded ar runtime</para>
            </summary>
        </member>
        <member name="F:WixSharp.Media.CompressionLevel">
            <summary>
            Indicates the compression level for the Media's cabinet. This attribute can only
            be used in conjunction with the Cabinet attribute. The default is 'mszip'.
            </summary>
        </member>
        <member name="F:WixSharp.Media.DiskPrompt">
            <summary>
            The disk name, which is usually the visible text printed on the disk. This localizable
            text is used to prompt the user when this disk needs to be inserted. This value will
            be used in the "[1]" of the DiskPrompt Property. Using this attribute will require you
            to define a DiskPrompt Property.
            </summary>
        </member>
        <member name="F:WixSharp.Media.EmbedCab">
            <summary>
            Instructs the binder to embed the cabinet in the product if 'yes'. This attribute can only
            be specified in conjunction with the Cabinet attribute.
            </summary>
        </member>
        <member name="F:WixSharp.Media.Layout">
            <summary>
            This attribute specifies the root directory for the uncompressed files that are a part of
            this Media element. By default, the src will be the output directory for the final image.
            The default value ensures the binder generates an installable image. If a relative path is
            specified in the src attribute, the value will be appended to the image's output directory.
            If an absolute path is provided, that path will be used without modification. The latter two
            options are provided to ease the layout of an image onto multiple medias (CDs/DVDs).
            </summary>
        </member>
        <member name="F:WixSharp.Media.Source">
            <summary>
            Optional property that identifies the source of the embedded cabinet. If a cabinet is specified
            for a patch, this property should be defined and unique to each patch so that the embedded cabinet
            containing patched and new files can be located in the patch package. If the cabinet is not embedded
            - this is not typical - the cabinet can be found in the directory referenced in this column. If empty,
            the external cabinet must be located in the SourceDir directory.
            </summary>
        </member>
        <member name="F:WixSharp.Media.VolumeLabel">
            <summary>
            The label attributed to the volume. This is the volume label returned by the GetVolumeInformation function.
            If the SourceDir property refers to a removable (floppy or CD-ROM) volume, then this volume label is used
            to verify that the proper disk is in the drive before attempting to install files. The entry in this column
            must match the volume label of the physical media.
            </summary>
        </member>
        <member name="M:WixSharp.Media.ToXml(System.String)">
            <summary>
            Emits WiX XML.
            </summary>
            <param name="projectId">The project id.</param>
            <returns></returns>
        </member>
        <member name="T:WixSharp.MediaTemplate">
             <summary>
             MediaTeplate element describes information to automatically assign files to cabinets. A maximumum number of cabinets created is 999.
            <example>The following is an example of defining the <c>MediaTemplate</c> element(s).
            <code>
             var project =
                 new Project("My Product",
                     new MediaTemplate { CompressionLevel=CompressionLevel.high },
                     new Dir(@"%ProgramFiles%\My Company\My Product",
                 ...
             project.BuildMsi();
             </code>
             </example>
             </summary>
             <seealso cref="T:WixSharp.WixEntity" />
             <seealso cref="T:WixSharp.IGenericEntity" />
        </member>
        <member name="F:WixSharp.MediaTemplate.CabinetTemplate">
            <summary>
            Templated name of the cabinet if some or all of the files stored on the media are in a cabinet file. This name must begin with either a letter or an underscore, contain maximum of five characters and {0} in the cabinet name part and must end three character extension. The default is cab{0}.cab.
            </summary>
        </member>
        <member name="F:WixSharp.MediaTemplate.CompressionLevel">
            <summary>
            Indicates the compression level for the Media's cabinet. This attribute can only be used in conjunction with the Cabinet attribute. The default is 'mszip'.
            </summary>
        </member>
        <member name="F:WixSharp.MediaTemplate.DiskPrompt">
            <summary>
            The disk name, which is usually the visible text printed on the disk. This localizable text is used to prompt the user when this disk needs to be inserted. This value will be used in the "[1]" of the DiskPrompt Property. Using this attribute will require you to define a DiskPrompt Property.
            </summary>
        </member>
        <member name="F:WixSharp.MediaTemplate.EmbedCab">
            <summary>
            Instructs the binder to embed the cabinets in the product if 'true'.
            </summary>
        </member>
        <member name="F:WixSharp.MediaTemplate.MaximumCabinetSizeForLargeFileSplitting">
            <summary>
            Maximum size of cabinet files in megabytes for large files. This attribute is used for packaging files that are larger than MaximumUncompressedMediaSize into smaller cabinets. If cabinet size exceed this value, then setting this attribute will cause the file to be split into multiple cabinets of this maximum size. For simply controlling cabinet size without file splitting use MaximumUncompressedMediaSize attribute. Setting this attribute will disable smart cabbing feature for this Fragment / Product. Setting WIX_MCSLFS environment variable can be used to override this value. Minimum allowed value of this attribute is 20 MB. Maximum allowed value and the Default value of this attribute is 2048 MB (2 GB).
            </summary>
        </member>
        <member name="F:WixSharp.MediaTemplate.MaximumUncompressedMediaSize">
            <summary>
            Size of uncompressed files in each cabinet, in megabytes. WIX_MUMS environment variable can be used to override this value. Default value is 200 MB.
            </summary>
        </member>
        <member name="F:WixSharp.MediaTemplate.VolumeLabel">
            <summary>
            The label attributed to the volume. This is the volume label returned by the GetVolumeInformation function. If the SourceDir property refers to a removable (floppy or CD-ROM) volume, then this volume label is used to verify that the proper disk is in the drive before attempting to install files. The entry in this column must match the volume label of the physical media.
            </summary>
        </member>
        <member name="M:WixSharp.MediaTemplate.Process(WixSharp.ProcessingContext)">
            <summary>
            Adds itself as an XML content into the WiX source being generated from the <see cref="T:WixSharp.Project" />.
            See 'Wix#/samples/Extensions' sample for the details on how to implement this interface correctly.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:WixSharp.ODBCDataSource">
             <summary>
             Represents an ODBCDataSource to be registered.
            
            <example>The following is an example of using ODBCDataSource.
            <code>
             var project =
                 new Project("My Product",
            
                     new Dir(@"%ProgramFiles%\My Company\My Product",
                     ...
            
                         new ODBCDataSource("DsnName", "SQL Server", true, true,
                             new Property("Database", "MyDb"),
                             new Property("Server", "MyServer")),
            
                     ...
            
             Compiler.BuildMsi(project);
             </code>
             </example>
             </summary>
        </member>
        <member name="M:WixSharp.ODBCDataSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ODBCDataSource"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.ODBCDataSource.#ctor(System.String,System.String,System.Boolean,System.Boolean,WixSharp.WixEntity[])">
             <summary>
             Creates instance of the <see cref="T:WixSharp.ODBCDataSource"></see> class with properties initialized with specified parameters.
             </summary>
             <param name="name">The name with which the odbc datasource is registered</param>
             <param name="driverName">The odbc driver named</param>
             <param name="keyPath">a boolean value indicating if the element is a KeyPath or not</param>
             <param name="perMachine">a boolean value to set machine or user level registration of the data source</param>
             <param name="items">Optional parameters defining properties for dsn registration.
             These are driver specific</param>
            
        </member>
        <member name="M:WixSharp.ODBCDataSource.#ctor(WixSharp.Feature,System.String,System.String,System.Boolean,System.Boolean,WixSharp.WixEntity[])">
             <summary>
             Creates instance of the <see cref="T:WixSharp.ODBCDataSource"></see> class with properties initialized with specified parameters.
             </summary>
             <param name="feature">The feature the datasource will be added to</param>
             <param name="name">The name with which the odbc datasource is registered</param>
             <param name="driverName">The odbc driver named</param>
             <param name="keyPath">a boolean value indicating if the element is a KeyPath or not</param>
             <param name="perMachine">a boolean value to set machine or user level registration of the data source</param>
             <param name="items">Optional parameters defining properties for dsn registration.
             These are driver specific</param>
            
        </member>
        <member name="P:WixSharp.ODBCDataSource.DriverName">
            <summary>
            String containing ODBC driver Name
            </summary>
        </member>
        <member name="P:WixSharp.ODBCDataSource.KeyPath">
            <summary>
            if true this is translated to 'yes' else 'no'
             Set 'yes' to force this file to be key path for parent Component
            </summary>
        </member>
        <member name="P:WixSharp.ODBCDataSource.PerMachineRegistration">
            <summary>
            Scope for which the data source should be registered. This attribute's value must be one of the following:
            if true Data source is registered per machine
            else Data source is registered per user.
            </summary>
        </member>
        <member name="F:WixSharp.ODBCDataSource.Properties">
            <summary>
            Collection of WiX/MSI <see cref="T:WixSharp.Property"/> objects to be created during the installed.
            </summary>
        </member>
        <member name="T:WixSharp.GenericPermission">
            <summary>
            Enumeration representing Generic* attributes of PermissionEx element
            </summary>
        </member>
        <member name="F:WixSharp.GenericPermission.None">
            <summary>
            None does not map to a valid WiX representation
            </summary>
        </member>
        <member name="F:WixSharp.GenericPermission.Execute">
            <summary>
            Maps to GenericExecute='yes' of PermissionEx
            </summary>
        </member>
        <member name="F:WixSharp.GenericPermission.Write">
            <summary>
            Maps to GenericWrite='yes' of PermissionEx
            </summary>
        </member>
        <member name="F:WixSharp.GenericPermission.Read">
            <summary>
            Maps to GenericRead='yes' of PermissionEx
            </summary>
        </member>
        <member name="F:WixSharp.GenericPermission.All">
            <summary>
            Maps to GenericAll='yes' of PermissionEx
            </summary>
        </member>
        <member name="T:WixSharp.DirPermission">
            <summary>
            Represents applying permission(s) to the containing File entity
            </summary>
            <remarks>
            DirPermission is a Wix# representation of WiX Util:PermissionEx
            </remarks>
        </member>
        <member name="M:WixSharp.DirPermission.#ctor(System.String)">
            <summary>
            Creates a FilePermission instance for <paramref name="user"/>
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:WixSharp.DirPermission.#ctor(System.String,System.String)">
            <summary>
            Creates a FilePermission instance for <paramref name="user"/>@<paramref name="domain"/>
            </summary>
            <param name="user"></param>
            <param name="domain"></param>
        </member>
        <member name="M:WixSharp.DirPermission.#ctor(System.String,WixSharp.GenericPermission)">
            <summary>
            Creates a FilePermission instance for <paramref name="user"/> with generic permissions described by <paramref name="permission"/>
            </summary>
            <param name="user"></param>
            <param name="permission"></param>
        </member>
        <member name="M:WixSharp.DirPermission.#ctor(System.String,System.String,WixSharp.GenericPermission)">
            <summary>
            Creates a FilePermission instance for <paramref name="user"/>@<paramref name="domain"/> with generic permissions described by <paramref name="permission"/>
            </summary>
            <param name="user"></param>
            <param name="domain"></param>
            <param name="permission"></param>
        </member>
        <member name="P:WixSharp.DirPermission.User">
            <summary>
            Maps to the User property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.Domain">
            <summary>
            Maps to the Domain property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.Append">
            <summary>
            Maps to the Append property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.ChangePermission">
            <summary>
            Maps to the ChangePermission property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.CreateChild">
            <summary>
            Maps to the CreateChild property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.CreateFile">
            <summary>
            Maps to the CreateFile property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.CreateLink">
            <summary>
            Maps to the CreateLink property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.CreateSubkeys">
            <summary>
            Maps to the CreateSubkeys property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.Delete">
            <summary>
            Maps to the Delete property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.DeleteChild">
            <summary>
            Maps to the DeleteChild property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.EnumerateSubkeys">
            <summary>
            Maps to the EnumerateSubkeys property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.Execute">
            <summary>
            Maps to the Execute property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.GenericAll">
            <summary>
            Maps to the GenericAll property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.GenericExecute">
            <summary>
            Maps to the GenericExecute property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.GenericRead">
            <summary>
            Maps to the GenericRead property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.GenericWrite">
            <summary>
            Maps to the GenericWrite property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.Notify">
            <summary>
            Maps to the Notify property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.Read">
            <summary>
            Maps to the Read property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.Readattributes">
            <summary>
            Maps to the Readattributes property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.ReadExtendedAttributes">
            <summary>
            Maps to the ReadExtendedAttributes property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.ReadPermission">
            <summary>
            Maps to the ReadPermission property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.Synchronize">
            <summary>
            Maps to the Synchronize property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.TakeOwnership">
            <summary>
            Maps to the TakeOwnership property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.Traverse">
            <summary>
            Maps to the Traverse property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.Write">
            <summary>
            Maps to the Write property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.WriteAttributes">
            <summary>
            Maps to the WriteAttributes property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.DirPermission.WriteExtendedAttributes">
            <summary>
            Maps to the WriteExtendedAttributes property of PermissionEx
            </summary>
        </member>
        <member name="T:WixSharp.FilePermission">
            <summary>
            Represents applying permission(s) to the containing File entity
            </summary>
            <remarks>
            FilePermission is a Wix# representation of WiX Util:PermissionEx
            </remarks>
        </member>
        <member name="M:WixSharp.FilePermission.#ctor(System.String)">
            <summary>
            Creates a FilePermission instance for <paramref name="user"/>
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:WixSharp.FilePermission.#ctor(System.String,System.String)">
            <summary>
            Creates a FilePermission instance for <paramref name="user"/>@<paramref name="domain"/>
            </summary>
            <param name="user"></param>
            <param name="domain"></param>
        </member>
        <member name="M:WixSharp.FilePermission.#ctor(System.String,WixSharp.GenericPermission)">
            <summary>
            Creates a FilePermission instance for <paramref name="user"/> with generic permissions described by <paramref name="permission"/>
            </summary>
            <param name="user"></param>
            <param name="permission"></param>
        </member>
        <member name="M:WixSharp.FilePermission.#ctor(System.String,System.String,WixSharp.GenericPermission)">
            <summary>
            Creates a FilePermission instance for <paramref name="user"/>@<paramref name="domain"/> with generic permissions described by <paramref name="permission"/>
            </summary>
            <param name="user"></param>
            <param name="domain"></param>
            <param name="permission"></param>
        </member>
        <member name="P:WixSharp.FilePermission.User">
            <summary>
            Maps to the User property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.Domain">
            <summary>
            Maps to the Domain property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.Append">
            <summary>
            Maps to the Append property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.ChangePermission">
            <summary>
            Maps to the ChangePermission property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.CreateLink">
            <summary>
            Maps to the CreateLink property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.CreateSubkeys">
            <summary>
            Maps to the CreateSubkeys property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.Delete">
            <summary>
            Maps to the Delete property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.EnumerateSubkeys">
            <summary>
            Maps to the EnumerateSubkeys property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.Execute">
            <summary>
            Maps to the Execute property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.GenericAll">
            <summary>
            Maps to the GenericAll property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.GenericExecute">
            <summary>
            Maps to the GenericExecute property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.GenericRead">
            <summary>
            Maps to the GenericRead property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.GenericWrite">
            <summary>
            Maps to the GenericWrite property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.Notify">
            <summary>
            Maps to the Notify property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.Read">
            <summary>
            Maps to the Read property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.Readattributes">
            <summary>
            Maps to the Readattributes property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.ReadExtendedAttributes">
            <summary>
            Maps to the ReadExtendedAttributes property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.ReadPermission">
            <summary>
            Maps to the ReadPermission property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.Synchronize">
            <summary>
            Maps to the Synchronize property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.TakeOwnership">
            <summary>
            Maps to the TakeOwnership property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.Write">
            <summary>
            Maps to the Write property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.WriteAttributes">
            <summary>
            Maps to the WriteAttributes property of PermissionEx
            </summary>
        </member>
        <member name="P:WixSharp.FilePermission.WriteExtendedAttributes">
            <summary>
            Maps to the WriteExtendedAttributes property of PermissionEx
            </summary>
        </member>
        <member name="M:WixSharp.PermissionExt.EmitAttributes(WixSharp.DirPermission,System.Xml.Linq.XElement)">
            <summary>
            Adds attributes to <paramref name="permissionElement"/> representing the state of <paramref name="dirPermission"/>
            </summary>
            <param name="dirPermission"></param>
            <param name="permissionElement"></param>
        </member>
        <member name="M:WixSharp.PermissionExt.EmitAttributes(WixSharp.FilePermission,System.Xml.Linq.XElement)">
            <summary>
            Adds attributes to <paramref name="permissionElement"/> representing the state of <paramref name="filePermission"/>
            </summary>
            <param name="filePermission"></param>
            <param name="permissionElement"></param>
        </member>
        <member name="T:WixSharp.RebootInstallSequence">
            <summary>
            Defines parent install sequence elements for <c>ScheduleReboot</c> and <c>ForceReboot</c> elements
            </summary>
        </member>
        <member name="F:WixSharp.RebootInstallSequence.InstallExecute">
            <summary>
            InstallExecuteSequence
            </summary>
        </member>
        <member name="F:WixSharp.RebootInstallSequence.InstallUI">
            <summary>
            InstallUISequence
            </summary>
        </member>
        <member name="F:WixSharp.RebootInstallSequence.Both">
            <summary>
            The both InstallExecuteSequence and InstallUISequence
            </summary>
        </member>
        <member name="T:WixSharp.RebootSupressing">
            <summary>
            Value of the <c>REBOOT</c> property.
            The REBOOT property suppresses certain prompts for a restart of the system. An administrator typically uses this
            property with a series of installations to install several products at the same time with only one restart at the 
            end. For more information, see System Reboots.
            <para>
            The ForceReboot and ScheduleReboot actions inform the installer to prompt the user to restart the system. The 
            installer can also determine that a restart is necessary whether there are any ForceReboot or ScheduleReboot actions
            in the sequence. For example, the installer automatically prompts for a restart if it needs to replace any files in
            use during the installation.
            </para>
            </summary>
        </member>
        <member name="F:WixSharp.RebootSupressing.Force">
            <summary>
            Always prompt for a restart at the end of the installation. The UI always prompts the user with an option to
            restart at the end. If there is no user interface, and this is not a multiple-package installation, the system 
            automatically restarts at the end of the installation. If this is a multiple-package installation, there is no 
            automatic restart of the system and the installer returns ERROR_SUCCESS_REBOOT_REQUIRED.
            </summary>
        </member>
        <member name="F:WixSharp.RebootSupressing.Suppress">
            <summary>
            Suppress prompts for a restart at the end of the installation. The installer still prompts the user with an 
            option to restart during the installation whenever it encounters the ForceReboot action. If there is no user 
            interface, the system automatically restarts at each ForceReboot. Restarts at the end of the installation 
            (for example, caused by an attempt to install a file in use) are suppressed.
            </summary>
        </member>
        <member name="F:WixSharp.RebootSupressing.ReallySuppress">
            <summary>
            Suppress all restarts and restart prompts initiated by ForceReboot during the installation. Suppress all restarts 
            and restart prompts at the end of the installation. Both the restart prompt and the restart itself are suppressed. 
            For example, restarts at the end of the installation, caused by an attempt to install a file in use, are suppressed.
            </summary>
        </member>
        <member name="T:WixSharp.ForceReboot">
            <summary>
            Prompts the user for a restart of the system during the installation. Special actions don't have a built-in sequence 
            number and thus must appear relative to another action. The suggested way to do this is by using the Before or After 
            attribute. 
            InstallExecute and InstallExecuteAgain can optionally appear anywhere between InstallInitialize and InstallFinalize.
            </summary>
        </member>
        <member name="F:WixSharp.ForceReboot.Step">
            <summary>
            Defines at what <see cref="F:WixSharp.ForceReboot.Step"/> the action should be executed during the installation.
            </summary>
        </member>
        <member name="F:WixSharp.ForceReboot.When">
            <summary>
            Defines order <see cref="F:WixSharp.ForceReboot.When"/> the action should be executed with respect to the action <see cref="F:WixSharp.ForceReboot.Step"/>.
            </summary>
        </member>
        <member name="F:WixSharp.ForceReboot.Suppress">
            <summary>
            If <c>true</c>, this action will not occur.
            </summary>
        </member>
        <member name="F:WixSharp.ForceReboot.Condition">
            <summary>
            Text node specifies the condition of the action.
            </summary>
        </member>
        <member name="F:WixSharp.ForceReboot.InstallSequence">
            <summary>
            The parent install sequence. The only avalable sequence for this element is <c>InstallExecuteSequence</c>. 
            </summary>
        </member>
        <member name="F:WixSharp.ForceReboot.Overridable">
            <summary>
            If <c>true</c>, the sequencing of this action may be overridden by sequencing elsewhere.
            </summary>
        </member>
        <member name="T:WixSharp.ScheduleReboot">
            <summary>
            Prompts the user to restart the system at the end of installation. Special actions don't have a built-in 
            sequence number and thus must appear relative to another action. The suggested way to do this is by using 
            the Before or After attribute. InstallExecute and InstallExecuteAgain can optionally appear anywhere between 
            InstallInitialize and InstallFinalize.
            </summary>
        </member>
        <member name="F:WixSharp.ScheduleReboot.InstallSequence">
            <summary>
            Indicates what install sequence should ScheduleReboot be placed to. 
            </summary>
        </member>
        <member name="T:WixSharp.Extensions">
            <summary>
            Collection of generic WixSharp extension methods
            </summary>
             <summary>
            
             </summary>
        </member>
        <member name="M:WixSharp.Extensions.Is64OS">
            <summary>
            Returns <c>true</c> if the OS (this routine is executed on) has an x64 CPU architecture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.AsWixVarToPath(System.String)">
             <summary>
             'Interprets' a string as a WiX constant and expands into a proper File System path. For example "DesktopFolder"
             will be expanded into "[SysDrive]:\Users\[user]\Desktop". This method is a logical equivalent of C# Environment.GetFolderPath.
             Though it handles discrepancies between 'special folders' mapping in .NET and WiX.
            
             <remarks>
             The method will always be called from x86 runtime as MSI always loads ManagedUI in x86 host.
             From the other hand CustomActions are called in the deployment specific CPU type context.
             </remarks>
             </summary>
             <param name="path">The path.</param>
             <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.SetComponentPermanent``1(``0,System.Boolean)">
            <summary>
            Sets the parent component attribute 'Permanent'.
            </summary>
            <typeparam name="T">The type of the T.</typeparam>
            <param name="obj">The obj.</param>
            <param name="isPermanent">if set to <c>true</c> [is permanent].</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.IsAdmin(System.Security.Principal.WindowsIdentity)">
            <summary>
            Determines whether the current user is administrator.
            </summary>
            <param name="identity">The identity.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.ToRawVersion(System.String)">
            <summary>
            Converts string value of a version into the <see cref="T:System.Version"/> object.
            <para>This method handles alpha-numeric strings. For example "v1.2.3-HotFix" is converted in "1.2.3" <see cref="T:System.Version"/> object.</para>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.AddElement(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Adds the element to a given XML element. It is a Fluent version of <see cref="T:System.Xml.Linq.XElement.Add"/>.
            </summary>
            <param name="obj">The instance of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="element">Element to add.</param>
            <returns>Added <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="M:WixSharp.Extensions.AddElement(System.Xml.Linq.XElement,System.String)">
            <summary>
            Adds the element to a given XML element. It is a Fluent version of <see cref="T:System.Xml.Linq.XElement.Add"/>.
            <para>
            <c>elementName</c> can be either the name of the element to be added or the sequence of the elements specified by path (e.g. <c>AddElement("Product/Package")</c>).
            </para>
            </summary>
            <param name="obj">The instance of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="elementName">Element to add.</param>
            <returns>Added <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="M:WixSharp.Extensions.AddElement(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Adds the element to a given XML element. It is a Fluent version of <see cref="T:System.Xml.Linq.XElement.Add"/>.
            </summary>
            <param name="obj">The instance of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="elementName">Name of the element.</param>
            <returns>Added <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="M:WixSharp.Extensions.AddElement(System.Xml.Linq.XElement,System.String,System.String,System.String)">
            <summary>
            Adds the element to a given XML element and sets the attributes of the newly created element.
            <para>
            <c>elementName</c> can be either the name of the element to be added or the sequence of the elements specified by path (e.g. <c>AddElement("Product/Package")</c>).
            </para>
            </summary>
            <param name="obj">The object.</param>
            <param name="elementName">The element.</param>
            <param name="attributesDefinition">The attributes definition. Rules of the composing the
            definition are the same as for <see cref="P:WixSharp.WixEntity.AttributesDefinition" />.</param>
            <param name="value">The value of the added element.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.IsAbsolutePath(System.String)">
            <summary>
            Determines whether the string is an absolute path.
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if it is an absolute path; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WixSharp.Extensions.FindIndex``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Gets the index of an item from the collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.ToDictionary(System.String,System.Char,System.Char)">
            <summary>
            Converts key/value map into the dictionary. The map entry format
            is as follows: &lt;key&gt;=&lt;value&gt;[;&lt;key&gt;=&lt;value&gt;].
            </summary>
            <param name="map">The map.</param>
            <param name="itemDelimiter">The item delimiter.</param>
            <param name="valueDelimiter">The value delimiter.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Invalid map entry</exception>
        </member>
        <member name="M:WixSharp.Extensions.AddElement(System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds the element to a given XML element. It is a Fluent version of <see cref="T:System.Xml.Linq.XElement.Add"/>.
            </summary>
            <param name="obj">The instance of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="element">Element to add.</param>
            <param name="attributes">The collection of Name/Value attributes to add.</param>
            <returns>Added <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="M:WixSharp.Extensions.AddAttributes(System.Xml.Linq.XElement,System.String)">
            <summary>
            Adds/sets the attributes to the to a given XML element (<see cref="T:System.Xml.Linq.XElement"/>).
            <para>It is a renamed version of <see cref="M:WixSharp.Extensions.SetAttributes(System.Xml.Linq.XElement,System.String)"/></para>
            </summary>
            <param name="obj">The object.</param>
            <param name="attributesDefinition">The attributes definition. Rules of the composing the
            definition are the same as for <see cref="P:WixSharp.WixObject.AttributesDefinition"/>.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.SetAttributes(System.Xml.Linq.XElement,System.String)">
            <summary>
            Sets/adds the attributes to the to a given XML element (<see cref="T:System.Xml.Linq.XElement"/>).
            </summary>
            <param name="obj">The object.</param>
            <param name="attributesDefinition">The attributes definition. Rules of the composing the
            definition are the same as for <see cref="P:WixSharp.WixObject.AttributesDefinition"/>.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.ToXAttributes(System.String)">
            <summary>
            Converts AttributesDefinition into XAttribute array. Rules of the composing the
            definition are the same as for <see cref="P:WixSharp.WixObject.AttributesDefinition"/>
            </summary>
            <param name="attributesDefinition">The attributes definition.</param>
        </member>
        <member name="M:WixSharp.Extensions.SetAttribute(System.Xml.Linq.XElement,System.String,System.Object)">
            <summary>
            Sets the value of the attribute. This is a fluent version of XElement.SetAttributeValue.
            <para>Note <c>name</c> can include xml namespace prefix:
            <code>
            element.SetAttribute("{dep}ProviderKey", "01234567-8901-2345-6789-012345678901");
            </code>
            Though in this case the required namespace must be already added to the element/document.</para>
            </summary>
            <param name="obj">The object.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.SetAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
            Sets the value of the attribute. This is a fluent version of XElement.SetAttributeValue that takes the Name/Value
            string definition as a single input parameter.
            </summary>
            <param name="obj">The object.</param>
            <param name="nameValuePair">The attribute name/value pair of the "[name]=[value]" format (e.g. ""Version=!(bind.FileVersion.Utils.dll)").</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.AddAttributes(System.Xml.Linq.XElement,System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})">
            <summary>
            Adds the attributes to the to a given XML element (<see cref="T:System.Xml.Linq.XElement"/>).
            </summary>
            <param name="obj">The object.</param>
            <param name="attributes">The attributes.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.AddAttributes(System.Xml.Linq.XElement,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds the attributes to the to a given XML element (<see cref="T:System.Xml.Linq.XElement"/>).
            </summary>
            <param name="obj">The instance of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="attributes">The collection of Name/Value attributes to add.</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> with added attributes.</returns>
        </member>
        <member name="M:WixSharp.Extensions.HasAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
            Determines whether the specified <see cref="T:System.Xml.Linq.XElement"/> has attribute.
            </summary>
            <param name="obj">The obj.</param>
            <param name="name">The name.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Xml.Linq.XElement"/> has attribute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WixSharp.Extensions.HasAttribute(System.Xml.Linq.XElement,System.String,System.Predicate{System.String})">
            <summary>
            Determines whether the specified <see cref="T:System.Xml.Linq.XElement"/> has attribute and the attribute value passes the test
            by <c>attributeValueSelector</c>.
            </summary>
            <param name="obj">The obj.</param>
            <param name="name">The name.</param>
            <param name="attributeValueSelector">The attribute value selector. Allows testing the attribute value.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Xml.Linq.XElement"/> has attribute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WixSharp.Extensions.HasAttribute(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Determines whether the specified <see cref="T:System.Xml.Linq.XElement" /> has attribute and the specific attribute value.
            </summary>
            <param name="obj">The obj.</param>
            <param name="name">The name.</param>
            <param name="attributeValue">The attribute value.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Xml.Linq.XElement" /> has attribute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WixSharp.Extensions.Parent(System.Xml.Linq.XElement,System.String)">
            <summary>
            Search for the first parent element (in the "parents chain") with the specified name of the given XML element (<see cref="T:System.Xml.Linq.XElement"/>).
            </summary>
            <param name="obj">The instance of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="parentName">Name of the parent element to search.</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> with the matching name.</returns>
        </member>
        <member name="M:WixSharp.Extensions.CopyAttributeFrom(System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.String)">
            <summary>
            Copies attribute value from one <see cref="T:System.Xml.Linq.XElement"/> to another. If the attribute already exists, its value is modified.
            </summary>
            <param name="dest">The instance of the <see cref="T:System.Xml.Linq.XElement"/> to copy the attribute to.</param>
            <param name="src">The instance of the <see cref="T:System.Xml.Linq.XElement"/> to copy the attribute from.</param>
            <param name="attributeName">Name of the source attribute to copy.</param>
            <returns>The instance of the <see cref="T:System.Xml.Linq.XElement"/> to copy the attribute to.</returns>
        </member>
        <member name="M:WixSharp.Extensions.InjectWxs(System.Xml.Linq.XDocument,System.String)">
             <summary>
             Injects the Wxs (WiX source) into Wxs document. It merges 'Wix/Product' elements of document with
             'Wix/Product' elements of wxsFile.
             <para> This method is nothing else but a 'syntactic sugar' method, which wraps the following code:
             <code>
             document.Root.Select("Product")
                          .Add(XDocument.Load(wxsFile)
                          .Root.Select("Product").Elements());
             </code>
             </para>
             <example>The following is an example of using InjectWxs.
             <code>
             Compiler.WixSourceGenerated +=
                        document => document.InjectWxs("CommonProperies.wxs");
            
             //where CommonProperies.wxs contains the following XML
             &lt;?xml version=&quot;1.0&quot; encoding=&quot;Windows-1252&quot;?&gt;
             &lt;Wix xmlns = &quot;http://schemas.microsoft.com/wix/2006/wi&quot; &gt;
               &lt;Product&gt;
                 &lt;Property Id=&quot;Prop1&quot; Value=&quot;1&quot; /&gt;
                 &lt;Property Id=&quot;Prop2&quot; Value=&quot;2&quot; /&gt;
                 &lt;Property Id=&quot;Prop3&quot; Value=&quot;3&quot; /&gt;
                 &lt;Property Id=&quot;Prop4&quot; Value=&quot;4&quot; /&gt;
               &lt;/Product&gt;
             &lt;/Wix&gt;
             </code>
             </example>
             </summary>
             <param name="document">The document.</param>
             <param name="wxsFile">The WXS file.</param>
             <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.ReadAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads the attribute value. Returns null if attribute doesn't exist.
            </summary>
            <param name="e">The e.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.DistinctBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object})">
            <summary>
            Selects distinct items from the collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="keySelector">The key selector.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            A generic LINQ equivalent of C# foreach loop.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.IsOneOf``1(``0,``0[])">
            <summary>
            Determines whether the input value is one of the specified values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="values">The values.</param>
            <returns>
              <c>true</c> if [is one of] [the specified values]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WixSharp.Extensions.EnqueueRange``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enqueues the range of the items into a instance of the  <see cref="T:System.Collections.Generics.Queue"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queue">The queue.</param>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.GetItemsHashCode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the combined hash code of all items in the collection. This method is convenient to use to
            verify that the collections have identical items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.CopyAttributeFrom(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XElement,System.String)">
            <summary>
            Copies attribute value from one <see cref="T:System.Xml.Linq.XElement"/> to another. If the attribute already exists, its value is modified.
            </summary>
            <param name="dest">The instance of the <see cref="T:System.Xml.Linq.XElement"/> to copy the attribute to.</param>
            <param name="destAttributeName">Name of the destination attribute to copy.</param>
            <param name="src">The instance of the <see cref="T:System.Xml.Linq.XElement"/> to copy the attribute from.</param>
            <param name="srcAttributeName">Name of the source attribute to copy.</param>
            <returns>The instance of the <see cref="T:System.Xml.Linq.XElement"/> to copy the attribute to.</returns>
        </member>
        <member name="M:WixSharp.Extensions.ToDirID(System.String)">
            <summary>
            Replaces all Wix# predefined string constants in the Wix# directory path with their WiX equivalents.
            <para>Processed string can be used as an Id for referencing from other Wix# components and setting the
            corresponding path from <c>MsiExec.exe</c> command line.</para>
            </summary>
            <param name="path">The Wix# directory path.</param>
            <returns>Replacement/conversion result.</returns>
        </member>
        <member name="M:WixSharp.Extensions.ToInt(System.String,System.Int32)">
            <summary>
            Safely converts string to int.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.IsEven(System.Int32)">
            <summary>
            Determines if the integer is an even value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.IsOdd(System.Int32)">
            <summary>
            Determines if the integer is an odd value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.MapToFeatureDisplay(System.Int32)">
            <summary>
            Determines the <see cref="T:WixSharp.FeatureDisplay"/> from a given integer.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.ToId(System.String)">
            <summary>
            Converts string to <see cref="T:WixSharp.Id"/>.
            </summary>
            <param name="obj">Id string value.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.ToPublicString(System.Exception)">
            <summary>
            Returns Exception.ToString result containing no debug information.
            <para>
            Sanitizes the result before returning by removing any debug info (file locations) from the exception trace stack.
            </para>
            </summary>
            <param name="ex">The ex.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Tests if the text ends with the specified pattern.
            </summary>
            <param name="text">The text to test.</param>
            <param name="pattern">The value.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.ToSingleQuots(System.String)">
            <summary>
            Replaces double-quotation characters with single-quotation ones.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Tests if the text starts with the specified pattern.
            </summary>
            <param name="text">The text to test.</param>
            <param name="pattern">The value.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String,System.Func{System.String,System.String})">
            <summary>
            A simple generic wrapper around more specialized <see cref="T:String.Join" />, which is limited to
            work with string arrays only.
            </summary>
            <param name="strings">The strings.</param>
            <param name="separator">The separator.</param>
            <param name="selector"> A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
            </param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>Finds the index of the first item matching an expression in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="predicate">The expression to test the items against.</param>
            <returns>The index of the first matching item, or -1 if no items match.</returns>
        </member>
        <member name="M:WixSharp.Extensions.ToIntPtr(System.String)">
            <summary>
            Safely converts string to IntPtr.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.ToXValue(System.Object)">
            <summary>
            Returns the string data as a <see cref="T:System.Xml.Linq.XCData"/> if the value contains
            XML tags begin and end characters and it is not already a CDATA expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.ToPayload(System.String)">
            <summary>
            Creates an Instance of <see cref="T:WixSharp.Bootstrapper.Payload"/> for the specified `sourceFile`.
            </summary>
            <param name="sourceFile">The source file.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.ToLcidList(System.String)">
            <summary>
            Converts semicolon or comma delimited list of language/culture name into the list of LCIDs.
            </summary>
            <param name="languages">The languages.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.FirstLcid(System.String)">
            <summary>
            LCID of the first language in the semicolon or comma delimited list of languages
            </summary>
            <param name="languages">The languages.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.DeleteIfExists(System.String,System.Boolean)">
            <summary>
            Deletes File/Directory from by the specified path if it exists.
            </summary>
            <param name="path">The path.</param>
            <param name="throw">if set to <c>false</c> handle all exceptions silently.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.Enquote(System.String,System.Char)">
            <summary>
            Surrounds the specified text into quotation characters.
            </summary>
            <param name="text">The text.</param>
            <param name="quotationCharacter">The quotation character.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.DeflateWhitespaces(System.String,System.String)">
            <summary>
            Deflates the whitespaces from the text.
            </summary>
            <param name="text">The text.</param>
            <param name="whitespace">The whitespace.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.SameAs(System.String,System.String,System.Boolean)">
            <summary>
            Simple wrapper around System.String.Compare(string strA, string strB, bool ignoreCase);
            </summary>
            <param name="strA">The string a.</param>
            <param name="strB">The string b.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.SamePathAs(System.String,System.String)">
            <summary>
            Returns true if both values represent the same path.
            </summary>
            <param name="pathA">The path a.</param>
            <param name="pathB">The path b.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.GetLocation(System.Reflection.Assembly)">
            <summary>
            Gets the location of the assembly.
            <p>Can discover the original location of the assembly being loaded from memory in case of a CS-Script assembly.
            </p>
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.PathChangeDirectory(System.String,System.String)">
            <summary>
            The change the directory of the file path.
            </summary>
            <param name="path">The path.</param>
            <param name="newDir">The new directory.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.PathCombine(System.String,System.String)">
            <summary>
            Combines path parts. Encapsulates <see cref="M:System.IO.Path.Combine(System.String,System.String)"/>
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.PathChangeFileName(System.String,System.String)">
            <summary>
            The change the file name of the file path.
            </summary>
            <param name="path">The path.</param>
            <param name="newFileName">The new file name.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.PathJoin(System.String,System.String[])">
            <summary>
            Equivalent of <see cref="M:System.IO.Path.Combine(System.String,System.String)"/>.
            </summary>
            <param name="path"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.PathGetDirName(System.String)">
            <summary>
            Identical to <see cref="M:System.IO.Path.GetDirectoryName(System.String)"/>. It is useful for Wix# consuming code as it allows avoiding
            "using System.IO;" directive, which interferes with Wix# types.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:WixSharp.Extensions.ToAbsolutePath(System.String)">
            <summary>
            Converts string value representing path into an absolute path. If string is null or empty it is treated as the CurrentDirectory equivalent.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.PathGetFileName(System.String)">
            <summary>
            Identical to <see cref="M:System.IO.Path.GetFileName(System.String)"/>. It is useful for Wix# consuming code as it allows avoiding
            "using System.IO;" directive, which interferes with Wix# types.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:WixSharp.Extensions.PathChangeExtension(System.String,System.String)">
            <summary>
            Change extension of the file path.
            </summary>
            <param name="path">The path.</param>
            <param name="extension">The extension.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.PathGetFullPath(System.String)">
            <summary>
            Gets the full path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.FormatInline(System.String,System.Object[])">
            <summary>
            Formats the specified string.
            </summary>
            <param name="obj">The string to format.</param>
            <param name="args">The formatting arguments.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:WixSharp.Extensions.FormatWith(System.String,System.Object[])">
            <summary>
            Formats the specified string.
            </summary>
            <param name="obj">The string to format.</param>
            <param name="args">The formatting arguments.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:WixSharp.Extensions.With``1(``0,System.Action{``0})">
            <summary>
            Fluent method for performing an action with the object.
            </summary>
            <param name="obj">The obj.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.GetLines(System.String)">
            <summary>
            Splits string by lines. The method handles both '\r\n' and '\n' line endings.
            </summary>
            <param name="text">The text to be split.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.Expand(System.String)">
            <summary>
            Replaces all Wix# predefined string constants (Environment Constants) in the Wix# directory path with their WiX equivalents and escapes all WiX illegal characters (e.g. space character).
            <para>
            <para>It also replaces all "illegal" characters (e.g. !,\) with '_' character to allow the path value to be used as a WiX Id XML attribute.</para>
            <example>The following is an example of expanding directory name paths.
            <code>
            @"%ProgramFiles%\My Company\My Product".Expand()       -> @"ProgramFilesFolder\My_Company\My_Product"
            @"ProgramFilesFolder\My Company\My Product".Expand()   -> @"ProgramFilesFolder\My_Company\My_Product"
            @"[ProgramFilesFolder]\My Company\My Product".Expand() -> @"ProgramFilesFolder\My_Company\My_Product"
            </code>
            </example>
            </para>
            For the list of supported constants analyses <c>WixSharp.Compiler.EnvironmentConstantsMapping.Keys</c>.
            </summary>
            <param name="path">The Wix# directory path.</param>
            <returns>Replacement result.</returns>
        </member>
        <member name="M:WixSharp.Extensions.ContainsWixConstants(System.String)">
            <summary>
            Determines whether the string contains WiX constants (values enclosed into square brackets).
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.IsWixConstant(System.String)">
            <summary>
            Determines whether the value is a WiX constant (e.g. 'SystenFolder').
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the specified value is a WiX constant; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WixSharp.Extensions.Map64Dirs(System.String)">
            <summary>
            Maps the Wix# constants included in path into their x64 equivalents.
            <para>For example %ProgramFiles%\My Company\My Product should be preprocessed into %ProgramFiles64%\My Company\My Product</para>
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.ExpandWixEnvConsts(System.String)">
            <summary>
            Replaces all Wix# predefined string constants (Environment Constants) in the Wix# directory path with their WiX equivalents and escapes all WiX illegal characters (e.g. space character).
            <para>
            <example>The following is an example of expanding directory name paths.
            <code>
            @"%ProgramFiles%\My Company\My Product".Expand()       -> @"ProgramFilesFolder\My_Company\My_Product"
            @"ProgramFilesFolder\My Company\My Product".Expand()   -> @"ProgramFilesFolder\My_Company\My_Product"
            @"[ProgramFilesFolder]\My Company\My Product".Expand() -> @"ProgramFilesFolder\My_Company\My_Product"
            </code>
            </example>
            </para>
            For the list of supported constants analyse <c>WixSharp.Compiler.EnvironmentConstantsMapping.Keys</c>.
            </summary>
            <param name="path">The Wix# directory path.</param>
            <returns>Replacement result.</returns>
        </member>
        <member name="M:WixSharp.Extensions.UnEscapeEnvars(System.String)">
            <summary>
            Unescape '\%' characters in the tokens representing environment variables (e.g. "%ProgramFiles%\My Product").
            <para>Required for avoiding collisions between environment variables and WiX constants. For example to prevent
            "%ProgramFiles%\My Product" being later converted into "ProgramFilesFolder\My Product"</para>
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.EscapeEnvars(System.String)">
            <summary>
            Escape '%' characters in the tokens representing environment variables (e.g. "%ProgramFiles%\My Product").
            <para>Required for avoiding collisions between environment variables and WiX constants. For example to prevent
            "%ProgramFiles%\My Product" being later converted into "ProgramFilesFolder\My Product"</para>
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.ExpandEnvVars(System.String)">
            <summary>
            Expands the EnvironmentVariable It is nothing else but a an extension method wrapping Environment.ExpandEnvironmentVariables to allow fluent API.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.PresentIn``1(``0,``0)">
            <summary>
            Reverse equivalent of Enum.HasFlag of .NET v4.5
            </summary>
        </member>
        <member name="M:WixSharp.Extensions.None``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if the specified sequence has no items. It is opposite of IEnumerable&lt;TSource&gt;.Any().
            </summary>
            <typeparam name="TSource">The type of the T source.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.IsEmpty(System.String)">
            <summary>
            Determines whether the given string is empty.
            </summary>
            <param name="s">The string to analyze.</param>
            <returns>
            	<c>true</c> if the specified s is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WixSharp.Extensions.IsNotEmpty(System.String)">
            <summary>
            Determines whether the given string is empty or not.
            </summary>
            <param name="s">The string to analyse.</param>
            <returns>
            	<c>true</c> if the specified string is not empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WixSharp.Extensions.GetLeftIndent(System.String)">
            <summary>
            Returns all leading white-space characters.
            </summary>
            <param name="s">The string to analyse.</param>
            <returns>
            	Total count of leading white-space characters
            </returns>
        </member>
        <member name="M:WixSharp.Extensions.ConcatItems(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concats the specified strings. In the result string all items are separated with the specified delimiter.
            </summary>
            <param name="strings">The strings.</param>
            <param name="delimiter">The delimiter.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.Select(System.Xml.Linq.XContainer,System.String)">
            <summary>
            Selects from the given element the first child element matching the specified path (e.g. <c>Select("Product/Package")</c>).
            </summary>
            <param name="element">The element to be searched.</param>
            <param name="path">The path.</param>
            <returns>The element matching the path.</returns>
        </member>
        <member name="M:WixSharp.Extensions.FindDirectory(System.Xml.Linq.XElement,System.String)">
            <summary>
            Selects from the given element the first child element Directory matching the specified path (e.g. <c>Select("ProgramFiles/MyCompany") by </c>).
            </summary>
            <param name="element">The element to be searched.</param>
            <param name="path">The path.</param>
            <returns>The element matching the path.</returns>
        </member>
        <member name="M:WixSharp.Extensions.HasLocalName(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            Determines whether the XElement has the specified <c>LocalName</c>.
            </summary>
            <param name="element">The element.</param>
            <param name="elementName">Name of the element.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.AddXmlInclude``1(``0,System.String,System.String)">
             <summary>
             Adds the XML (*.wxi) include.
             <example>The following is an example of including external XML files.
             <code>
             project.AddXmlInclude("CommonProperies.wxi")
                    .AddXmlInclude("CommonProperies2.wxi");
            
             new File(@"Files\Bin\MyApp.exe")
                       .AddXmlInclude("FileItems.wxi", parentElement: "Component");
             </code>
             </example>
             </summary>
             <typeparam name="T">The type of the T.</typeparam>
             <param name="entity">The entity.</param>
             <param name="xmlFile">The XML file.</param>
             <param name="parentElement">The parent element.</param>
             <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.AddWixFragment(System.Xml.Linq.XElement,System.Xml.Linq.XElement[])">
            <summary>
            Adds the specified XML content as a WiX Fragment/FragmentRef elements combination.
            </summary>
            <param name="placementElement">The element the reference to the fragment should be placed at.</param>
            <param name="content">The fragment content.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.IncludeWixExtension(WixSharp.WixProject,WixSharp.WixExtension)">
            <summary>
            Adds the specified extension to  <see cref="T:WixSharp.WixProject" />
            </summary>
            <param name="project">The project.</param>
            <param name="extension">The extension.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.IncludeWixExtension(WixSharp.WixProject,System.String,System.String,System.String)">
            <summary>
            Adds the specified extension to  <see cref="T:WixSharp.WixProject" />
            </summary>
            <param name="project">The project.</param>
            <param name="extensionAssembly">The extension assembly.</param>
            <param name="namespacePrefix">The namespace prefix.</param>
            <param name="namespace">The namespace.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.FindSingle(System.Xml.Linq.XContainer,System.String)">
            <summary>
            Selects single descendant element with a given name (LocalName). Throws if no or more then one match found
            </summary>
            <param name="container">The element to be searched.</param>
            <param name="elementName">The element local name.</param>
            <returns>The elements matching the name.</returns>
        </member>
        <member name="M:WixSharp.Extensions.FindAll(System.Xml.Linq.XContainer,System.String)">
            <summary>
            Selects all descendant elements with a given name (LocalName). Throws if no or more then one match found
            </summary>
            <param name="element">The element to be searched.</param>
            <param name="elementName">The element local name.</param>
            <returns>The elements matching the name.</returns>
        </member>
        <member name="M:WixSharp.Extensions.FindFirst(System.Xml.Linq.XContainer,System.String)">
            <summary>
            Selects the first descendant element with a given name (LocalName).
            </summary>
            <param name="element">The element to be searched.</param>
            <param name="elementName">The element local name.</param>
            <returns>The element matching the name.</returns>
        </member>
        <member name="M:WixSharp.Extensions.MoveTo(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Removes the element from its current parent and inserts it into another element.
            </summary>
            <param name="element">The element.</param>
            <param name="newParent">The new parent.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.SelectOrCreate(System.Xml.Linq.XElement,System.String)">
            <summary>
            Selects, from the given element, the child element matching the specified path.
            <para>If the child element is not found, a new element is created matching the path.</para>
            </summary>
            <param name="element">The element to be searched.</param>
            <param name="path">The path.</param>
            <returns>The element matching the path.</returns>
        </member>
        <member name="M:WixSharp.Extensions.ToWString(Microsoft.Win32.RegistryHive)">
            <summary>
            Gets WiX compatible string representation (e.g. HKCR, HKLM).
            </summary>
            <param name="value">The <see cref="T:Microsoft.Win32.RegistryHive"/> value to convert.</param>
            <returns>WiX compatible string representation.</returns>
        </member>
        <member name="M:WixSharp.Extensions.ToWString(WixSharp.Sequence)">
            <summary>
            Converts <see cref="T:WixSharp.Sequence"/> into the WiX identifier by removing WiX illegal characters.
            </summary>
            <param name="value">The <see cref="T:WixSharp.Sequence"/> value.</param>
            <returns>Valid WiX identifier.</returns>
        </member>
        <member name="M:WixSharp.Extensions.ToWString(System.String)">
            <summary>
            Converts the string into the WiX identifier by removing WiX illegal characters.
            </summary>
            <param name="value">The value.</param>
            <returns>Valid WiX identifier.</returns>
        </member>
        <member name="M:WixSharp.Extensions.SetEnvironmentVariables(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Sets the environment variables based on Key/Value pares of the dictionary.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.EscapeKeyValue(System.String)">
            <summary>
            Escapes any serialization tokens in the key value string. These tokens are '=', ';' and '\n'.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.UnescapeKeyValue(System.String)">
            <summary>
            Unescapes any serialization tokens in the key value string. These tokens are '{$EQV}', '{$SMCOL}' and '{$NL}'.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.MergeReplace(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Merges and replaces key values in a given dictionary (<c>map</c> parameter) with another dictionary values. Another dictionary
            is provided in a serialized form (<c>data</c> parameter).
            </summary>
            <param name="map">The dictionary, which is a subject of the merge operation.</param>
            <param name="data">The merge key/values source in it's serialized form data.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.Clone(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Clones the specified collection.
            </summary>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.ToCondition(System.String)">
            <summary>
            Converts the string into the <see cref="T:WixSharp.Condition"/> instance.
            </summary>
            <param name="value">The string value.</param>
            <returns><see cref="T:WixSharp.Condition"/> instance.</returns>
        </member>
        <member name="M:WixSharp.Extensions.ToNoRevisionString(System.Version)">
            <summary>
            Generates string representation without revision part.
            </summary>
            <param name="ver">The instance of the <see cref="T:System.Version"/>.</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:WixSharp.Extensions.Combine``1(System.Array,System.Array)">
            <summary>
            Combines given <see cref="T:System.Array"/> items with items of another <see cref="T:System.Array"/>.
            </summary>
            <typeparam name="T">The type of the elements of <c>obj</c>.</typeparam>
            <param name="obj">A <see cref="T:System.Array"/> whose elements to combine.</param>
            <param name="items">Another instance of <see cref="T:System.Array"/> whose elements to combine with <c>obj</c>.</param>
            <returns>A combined <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:WixSharp.Extensions.Add``2(``0[],``1)">
            <summary>
            Adds/combines given <see cref="T:System.Array"/> object with the specified item.
            </summary>
            <typeparam name="T1">The type of the elements of <c>obj</c>.</typeparam>
            <typeparam name="T2">The type of the elements of the items being added.</typeparam>
            <param name="obj">The instance of the <see cref="T:System.Array"/>.</param>
            <param name="item">The item to be added.</param>
            <returns>Combined <see cref="T:System.Array"/> object.</returns>
        </member>
        <member name="M:WixSharp.Extensions.AddRange``2(``0[],System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Adds/combines given <see cref="T:System.Array"/> object with the specified items.
            </summary>
            <typeparam name="T1">The type of the elements of <c>obj</c>.</typeparam>
            <typeparam name="T2">The type of the elements of the items being added.</typeparam>
            <param name="obj">The instance of the <see cref="T:System.Array"/>.</param>
            <param name="items">The items to be added.</param>
            <returns>Combined <see cref="T:System.Array"/> object.</returns>
        </member>
        <member name="M:WixSharp.Extensions.Combine``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            Combines given <see cref="T:System.Collections.Generic.List"/> items with items of another <see cref="T:System.Collections.Generic.List"/>.
            </summary>
            <typeparam name="T">The type of the elements of <c>obj</c>.</typeparam>
            <param name="obj">A <see cref="T:System.Collections.Generic.List"/>.</param>
            <param name="items">Another instance of <see cref="T:System.Collections.Generic.List"/> whose elements are to be combined with those of <c>obj</c>.</param>
            <returns>A combined <see cref="T:System.Collections.Generic.List"/>.</returns>
        </member>
        <member name="M:WixSharp.Extensions.IsNullOrEmpty(System.String)">
            <summary>
            Fluent version of the <see cref="T:System.String.IsNullOrEmpty"/> for analysing the string value
            for being <c>null</c> or empty.
            </summary>
            <param name="obj">A <see cref="T:System.String"/> whose value to analyse.</param>
            <returns>true if the value parameter is null or an empty string (""); otherwise, false.</returns>
        </member>
        <member name="M:WixSharp.Extensions.IsActive(Microsoft.Deployment.WindowsInstaller.Session)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Deployment.WindowsInstaller.Session"/> is active.
            <para>It is useful for checking if the session is terminated (e.g. in deferred custom actions).</para>
            </summary>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.IsInstalled(Microsoft.Deployment.WindowsInstaller.Session)">
            <summary>
            Determines whether the product associated with the session is installed.
            <para>
            This method will fail to retrieve the correct value if called from the deferred custom action and the session properties
            that it depends on are not preserved with 'UsesProperties' or 'DefaultUsesProperties'.
            </para>
            </summary>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.IsInstalling(Microsoft.Deployment.WindowsInstaller.Session)">
            <summary>
            Gets a value indicating whether the product is being installed.
            <para>
            This method will fail to retrieve the correct value if called from the deferred custom action and the session properties
            that it depends on are not preserved with 'UsesProperties' or 'DefaultUsesProperties'.
            </para>
            </summary>
            <value>
            <c>true</c> if installing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WixSharp.Extensions.IsRepairing(Microsoft.Deployment.WindowsInstaller.Session)">
            <summary>
            Gets a value indicating whether the product is being repaired.
            <para>
            This method will fail to retrieve the correct value if called from the deferred custom action and the session properties
            that it depends on are not preserved with 'UsesProperties' or 'DefaultUsesProperties'.
            </para>
            </summary>
        </member>
        <member name="M:WixSharp.Extensions.IsUpgrading(Microsoft.Deployment.WindowsInstaller.Session)">
            <summary>
            Gets a value indicating whether the product is being upgraded.
            <para>
            This method will fail to retrieve the correct value if called from the deferred custom action and the session properties
            that it depends on are not preserved with 'UsesProperties' or 'DefaultUsesProperties'.
            </para>
            <para>
            This method relies on "UPGRADINGPRODUCTCODE" property, which is not set by MSI until previous version is uninstalled. Thus it may not be the
            most practical way of detecting upgrades. Use AppSearch.GetProductVersionFromUpgradeCode as a more reliable alternative.
            </para>
            </summary>
        </member>
        <member name="M:WixSharp.Extensions.IsModifying(Microsoft.Deployment.WindowsInstaller.Session)">
            <summary>
            Determines whether MSI is running in "modifying" mode.
            <para>
            This method will fail to retrieve the correct value if called from the deferred custom action and the session properties
            that it depends on are not preserved with 'UsesProperties' or 'DefaultUsesProperties'.
            </para>
            </summary>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.IsUninstalling(Microsoft.Deployment.WindowsInstaller.Session)">
            <summary>
            Determines whether MSI is running in "uninstalling" mode.
            <para>
            This method will fail to retrieve the correct value if called from the deferred custom action and the session properties
            that it depends on are not preserved with 'UsesProperties' or 'DefaultUsesProperties'.
            </para>
            </summary>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.IsFeatureEnabled(Microsoft.Deployment.WindowsInstaller.Session,System.String)">
            <summary>
            Determines whether the feature is selected in the feature tree of the Features dialog
            and will be installed.
            <para>
            This method will fail to retrieve the correct value if called from the deferred custom action and the session properties
            that it depends on are not preserved with 'UsesProperties' or 'DefaultUsesProperties'.
            </para>
            </summary>
            <param name="session">The session.</param>
            <param name="featureName">Name of the feature.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.IsBasic(Microsoft.Deployment.WindowsInstaller.InstallUIOptions)">
            <summary>
            Determines whether this is basic UI level.
            </summary>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.Property(Microsoft.Deployment.WindowsInstaller.Session,System.String)">
            <summary>
            Returns the value of the named property of the specified <see cref="T:Microsoft.Deployment.WindowsInstaller.Session"/> object.
            <para>It can be uses as a generic way of accessing the properties as it redirects (transparently) access to the
            <see cref="T:Microsoft.Deployment.WindowsInstaller.Session.CustomActionData"/> if the session is terminated (e.g. in deferred
            custom actions).</para>
            </summary>
            <param name="session">The session.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.QueryProperty(Microsoft.Deployment.WindowsInstaller.Session,System.String)">
            <summary>
            Queries MSI database directly for the table 'Property' value. This method is particularly useful for the stages when WiX session
            object is not fully initialized. For example properties are not discovered yet during EmbeddedUI loading event.
            </summary>
            <param name="session">The session.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.LookupInstalledVersion(Microsoft.Deployment.WindowsInstaller.Session)">
            <summary>
            Lookups the installed version.
            </summary>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.QueryUpgradeCode(Microsoft.Deployment.WindowsInstaller.Session)">
            <summary>
            Queries the upgrade code.
            </summary>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.QueryProductVersion(Microsoft.Deployment.WindowsInstaller.Session)">
            <summary>
            Queries the product version.
            </summary>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.SaveBinary(Microsoft.Deployment.WindowsInstaller.Session,System.String,System.String)">
            <summary>
            Saves the binary (from the Binary table) into the file.
            </summary>
            <param name="session">The session.</param>
            <param name="binary">The binary.</param>
            <param name="file">The file.</param>
        </member>
        <member name="M:WixSharp.Extensions.TryReadBinary(Microsoft.Deployment.WindowsInstaller.Session,System.String)">
            <summary>
            Tries the read the binary (from the Binary table) into the byte array.
            </summary>
            <param name="session">The session.</param>
            <param name="binary">The binary.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.ReadBinary(Microsoft.Deployment.WindowsInstaller.Session,System.String)">
            <summary>
            Read the binary (from the Binary table) into the byte array.
            </summary>
            <param name="session">The session.</param>
            <param name="binary">The binary.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.OpenView(Microsoft.Deployment.WindowsInstaller.Session,System.String)">
            <summary>
            A simple generic wrapper around MSI View open operation. It retrieves all view data and returns it as a
            collection of dictionaries (set of named values).
            </summary>
            <param name="session">The session.</param>
            <param name="sqlText">The SQL text.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.GetEmbeddedBitmap(Microsoft.Deployment.WindowsInstaller.Session,System.String)">
            <summary>
            Extracts the bitmap embedded into MSI (into Binary table).
            </summary>
            <param name="session">The session.</param>
            <param name="binary">The name on resource in the Binary table.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.GetEmbeddedString(Microsoft.Deployment.WindowsInstaller.Session,System.String)">
            <summary>
             Extracts the string embedded into MSI (into Binary table).
            </summary>
            <param name="session">The session.</param>
            <param name="binary">The name on resource in the Binary table.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.GetEmbeddedData(Microsoft.Deployment.WindowsInstaller.Session,System.String)">
            <summary>
             Extracts the data embedded into MSI (into Binary table).
            </summary>
            <param name="session">The session.</param>
            <param name="binary">The name on resource in the Binary table.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Extensions.HandleErrors(Microsoft.Deployment.WindowsInstaller.Session,System.Action)">
            <summary>
            Handles the errors in the specified action being executed. The all exceptions are caught and logged to the msi log.
            </summary>
            <param name="session">The session.</param>
            <param name="action">The action.</param>
            <returns><see cref="T:Microsoft.Deployment.WindowsInstaller.ActionResult.Success"/> if no errors detected, otherwise
            it returns <see cref="T:Microsoft.Deployment.WindowsInstaller.ActionResult.Failure"/>.
            </returns>
        </member>
        <member name="M:WixSharp.Extensions.ToWObject``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            To a collection into WixObject that can be passed in the Project constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="T:WixSharp.SqlDbOption">
            <summary>
            Attributes represented by this enum will be rendered as having the value 'yes'.
            If a value of 'no' is required, set the property directly after construction.
            </summary>
        </member>
        <member name="T:WixSharp.SqlDatabase">
            <summary>
            Represents WixSqlExtension SqlDatabase element. The resulting XML representation may be rendered
            inside of a component element or under the product element. The parent element depends on the
            presence of a value for at least 1 property represented by values of SqlDbOption enumeration.
            </summary>
        </member>
        <member name="M:WixSharp.SqlDatabase.#ctor">
            <summary>
            Creates an instance of the <see cref="T:WixSharp.SqlDatabase"/> representing the database//>
            </summary>
        </member>
        <member name="M:WixSharp.SqlDatabase.#ctor(System.String,System.String,WixSharp.WixEntity[])">
            <summary>
            Creates an instance of the <see cref="T:WixSharp.SqlDatabase" /> representing the database <paramref name="database" />@<paramref name="server" />
            </summary>
            <param name="database">The database.</param>
            <param name="server">The server.</param>
            <param name="items">The items.</param>
            <exception cref="T:System.ArgumentNullException">
            database;database is a null reference or empty
            or
            server;server is a null reference or empty
            </exception>
        </member>
        <member name="M:WixSharp.SqlDatabase.#ctor(WixSharp.Id,System.String,System.String,WixSharp.WixEntity[])">
            <summary>
            Creates an instance of the <see cref="T:WixSharp.SqlDatabase" /> representing the database <paramref name="database" />@<paramref name="server" />
            </summary>
            <param name="id">The identifier.</param>
            <param name="database">The database.</param>
            <param name="server">The server.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:WixSharp.SqlDatabase.#ctor(WixSharp.Feature,System.String,System.String,WixSharp.WixEntity[])">
            <summary>
            Creates an instance of the <see cref="T:WixSharp.SqlDatabase" /> representing the database <paramref name="database" />@<paramref name="server" />
            </summary>
            <param name="feature">The feature.</param>
            <param name="database">The database.</param>
            <param name="server">The server.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:WixSharp.SqlDatabase.#ctor(WixSharp.Id,WixSharp.Feature,System.String,System.String,WixSharp.WixEntity[])">
            <summary>
            Creates an instance of the <see cref="T:WixSharp.SqlDatabase"/> representing the database <paramref name="database"/>@<paramref name="server"/>
            </summary>
            <param name="id">The identifier.</param>
            <param name="feature">The feature.</param>
            <param name="database">The database.</param>
            <param name="server">The server.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:WixSharp.SqlDatabase.#ctor(System.String,System.String,WixSharp.SqlDbOption,WixSharp.WixEntity[])">
            <summary>
            Creates an instance of SqlDatbase representing the database <paramref name="database" />@<paramref name="server" />
            </summary>
            <param name="database">The database.</param>
            <param name="server">The server.</param>
            <param name="dbOptions">The database options.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:WixSharp.SqlDatabase.#ctor(WixSharp.Id,System.String,System.String,WixSharp.SqlDbOption,WixSharp.WixEntity[])">
            <summary>
            Creates an instance of SqlDatbase representing the database <paramref name="database" />@<paramref name="server" />
            </summary>
            <param name="id">The identifier.</param>
            <param name="database">The database.</param>
            <param name="server">The server.</param>
            <param name="dbOptions">The database options.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:WixSharp.SqlDatabase.#ctor(WixSharp.Feature,System.String,System.String,WixSharp.SqlDbOption,WixSharp.WixEntity[])">
            <summary>
            Creates an instance of SqlDatbase representing the database <paramref name="database" />@<paramref name="server" />
            </summary>
            <param name="feature">The feature.</param>
            <param name="database">The database.</param>
            <param name="server">The server.</param>
            <param name="dbOptions">The database options.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:WixSharp.SqlDatabase.#ctor(WixSharp.Id,WixSharp.Feature,System.String,System.String,WixSharp.SqlDbOption,WixSharp.WixEntity[])">
            <summary>
            Creates an instance of SqlDatbase representing the database <paramref name="database" />@<paramref name="server" />
            </summary>
            <param name="id">The identifier.</param>
            <param name="feature">The feature.</param>
            <param name="database">The database.</param>
            <param name="server">The server.</param>
            <param name="dbOptions">The database options.</param>
            <param name="items">The items.</param>
        </member>
        <member name="F:WixSharp.SqlDatabase.SqlScripts">
            <summary>
            The SQL scripts
            </summary>
        </member>
        <member name="F:WixSharp.SqlDatabase.SqlStrings">
            <summary>
            The SQL strings
            </summary>
        </member>
        <member name="P:WixSharp.SqlDatabase.ConfirmOverwrite">
            <summary>
            Maps to the ConfirmOverwrite property of SqlDatabase
            </summary>
        </member>
        <member name="P:WixSharp.SqlDatabase.ContinueOnError">
            <summary>
            Maps to the ContinueOnError property of SqlDatabase
            </summary>
        </member>
        <member name="P:WixSharp.SqlDatabase.CreateOnInstall">
            <summary>
            Maps to the CreateOnInstall property of SqlDatabase
            </summary>
        </member>
        <member name="P:WixSharp.SqlDatabase.CreateOnReinstall">
            <summary>
            Maps to the CreateOnReinstall property of SqlDatabase
            </summary>
        </member>
        <member name="P:WixSharp.SqlDatabase.CreateOnUninstall">
            <summary>
            Maps to the CreateOnUninstall property of SqlDatabase
            </summary>
        </member>
        <member name="P:WixSharp.SqlDatabase.Database">
            <summary>
            Maps to the Database property of SqlDatabase
            </summary>
        </member>
        <member name="P:WixSharp.SqlDatabase.DropOnInstall">
            <summary>
            Maps to the DropOnInstall property of SqlDatabase
            </summary>
        </member>
        <member name="P:WixSharp.SqlDatabase.DropOnReinstall">
            <summary>
            Maps to the DropOnReinstall property of SqlDatabase
            </summary>
        </member>
        <member name="P:WixSharp.SqlDatabase.DropOnUninstall">
            <summary>
            Maps to the DropOnUninstall property of SqlDatabase
            </summary>
        </member>
        <member name="P:WixSharp.SqlDatabase.Instance">
            <summary>
            Maps to the Instance property of SqlDatabase
            </summary>
        </member>
        <member name="P:WixSharp.SqlDatabase.Server">
            <summary>
            Maps to the Server property of SqlDatabase
            </summary>
        </member>
        <member name="P:WixSharp.SqlDatabase.User">
            <summary>
            Maps to the User property of SqlDatabase
            </summary>
        </member>
        <member name="T:WixSharp.ExecuteSql">
            <summary>
            Represents Execution options for SqlScript and SqlString elements
            </summary>
            <remarks>
            Attributes represented by this enum will be rendered as having the value 'yes'.
            If a value of 'no' is required, set the property directly after construction.
            </remarks>
        </member>
        <member name="T:WixSharp.RollbackSql">
            <summary>
            Represents Rollback options for SqlScript and SqlString elements
            </summary>
            <remarks>
            Attributes represented by this enum will be rendered as having the value 'yes'.
            If a value of 'no' is required, set the property directly after construction.
            </remarks>
        </member>
        <member name="T:WixSharp.SqlString">
            <summary>
            Represents WixSqlExtension element SqlString
            </summary>
        </member>
        <member name="M:WixSharp.SqlString.#ctor">
            <summary>
            Creates an instance of SqlString
            </summary>
        </member>
        <member name="M:WixSharp.SqlString.#ctor(System.String,WixSharp.ExecuteSql)">
            <summary>
            Creates an instance of SqlString from <paramref name="sql"/> to be execute according to <paramref name="executeOptions"/>
            </summary>
            <param name="sql"></param>
            <param name="executeOptions"></param>
        </member>
        <member name="M:WixSharp.SqlString.#ctor(WixSharp.Id,System.String,WixSharp.ExecuteSql)">
            <summary>
            Creates an instance of SqlString from <paramref name="sql"/> to be execute according to <paramref name="executeOptions"/>
            </summary>
            <param name="id"></param>
            <param name="sql"></param>
            <param name="executeOptions"></param>
        </member>
        <member name="M:WixSharp.SqlString.#ctor(WixSharp.Feature,System.String,WixSharp.ExecuteSql)">
            <summary>
            Creates an instance of SqlString from <paramref name="sql"/> to be execute according to <paramref name="executeOptions"/>
            </summary>
            <param name="feature"></param>
            <param name="sql"></param>
            <param name="executeOptions"></param>
        </member>
        <member name="M:WixSharp.SqlString.#ctor(WixSharp.Id,WixSharp.Feature,System.String,WixSharp.ExecuteSql)">
            <summary>
            Creates an instance of SqlString from <paramref name="sql"/> to be execute according to <paramref name="executeOptions"/>
            </summary>
            <param name="id"></param>
            <param name="feature"></param>
            <param name="sql"></param>
            <param name="executeOptions"></param>
        </member>
        <member name="M:WixSharp.SqlString.#ctor(System.String,WixSharp.RollbackSql)">
            <summary>
            Creates an instance of SqlString from <paramref name="sql"/> to be rolled-back according to <paramref name="rollbackOptions"/>
            </summary>
            <param name="sql"></param>
            <param name="rollbackOptions"></param>
        </member>
        <member name="M:WixSharp.SqlString.#ctor(WixSharp.Id,System.String,WixSharp.RollbackSql)">
            <summary>
            Creates an instance of SqlString from <paramref name="sql"/> to be rolled-back according to <paramref name="rollbackOptions"/>
            </summary>
            <param name="id"></param>
            <param name="sql"></param>
            <param name="rollbackOptions"></param>
        </member>
        <member name="M:WixSharp.SqlString.#ctor(WixSharp.Feature,System.String,WixSharp.RollbackSql)">
            <summary>
            Creates an instance of SqlString from <paramref name="sql"/> to be rolled-back according to <paramref name="rollbackOptions"/>
            </summary>
            <param name="feature"></param>
            <param name="sql"></param>
            <param name="rollbackOptions"></param>
        </member>
        <member name="M:WixSharp.SqlString.#ctor(WixSharp.Id,WixSharp.Feature,System.String,WixSharp.RollbackSql)">
            <summary>
            Creates an instance of SqlString from <paramref name="sql"/> to be rolled-back according to <paramref name="rollbackOptions"/>
            </summary>
            <param name="id"></param>
            <param name="feature"></param>
            <param name="sql"></param>
            <param name="rollbackOptions"></param>
        </member>
        <member name="P:WixSharp.SqlString.ContinueOnError">
            <summary>
            Maps to the ContinueOnError property of SqlString
            </summary>
        </member>
        <member name="P:WixSharp.SqlString.ExecuteOnInstall">
            <summary>
            Maps to the ExecuteOnInstall property of SqlString
            </summary>
        </member>
        <member name="P:WixSharp.SqlString.ExecuteOnReinstall">
            <summary>
            Maps to the ExecuteOnReinstall property of SqlString
            </summary>
        </member>
        <member name="P:WixSharp.SqlString.ExecuteOnUninstall">
            <summary>
            Maps to the ExecuteOnUninstall property of SqlString
            </summary>
        </member>
        <member name="P:WixSharp.SqlString.RollbackOnInstall">
            <summary>
            Maps to the RollbackOnInstall property of SqlString
            </summary>
        </member>
        <member name="P:WixSharp.SqlString.RollbackOnReinstall">
            <summary>
            Maps to the RollbackOnReinstall property of SqlString
            </summary>
        </member>
        <member name="P:WixSharp.SqlString.RollbackOnUninstall">
            <summary>
            Maps to the RollbackOnUninstall property of SqlString
            </summary>
        </member>
        <member name="P:WixSharp.SqlString.Sequence">
            <summary>
            Maps to the Sequence property of SqlString
            </summary>
        </member>
        <member name="P:WixSharp.SqlString.Sql">
            <summary>
            Maps to the Sql property of SqlString
            </summary>
        </member>
        <member name="P:WixSharp.SqlString.SqlDb">
            <summary>
            Maps to the SqlDb property of SqlString. This property is to be inferred from the containing SqlDatabase element.
            </summary>
        </member>
        <member name="P:WixSharp.SqlString.User">
            <summary>
            Maps to the User property of SqlString
            </summary>
        </member>
        <member name="T:WixSharp.SqlScript">
            <summary>
            Represents WixSqlExtension element SqlScript
            </summary>
        </member>
        <member name="M:WixSharp.SqlScript.#ctor">
            <summary>
            Creates an instance of SqlScript
            </summary>
        </member>
        <member name="M:WixSharp.SqlScript.#ctor(System.String,WixSharp.ExecuteSql)">
            <summary>
            Creates an instance of SqlScript for <paramref name="binaryKey"/> to be execute according to <paramref name="executeOptions"/>
            </summary>
            <param name="binaryKey"></param>
            <param name="executeOptions"></param>
        </member>
        <member name="M:WixSharp.SqlScript.#ctor(WixSharp.Id,System.String,WixSharp.ExecuteSql)">
            <summary>
            Creates an instance of SqlScript for <paramref name="binaryKey"/> to be execute according to <paramref name="executeOptions"/>
            </summary>
            <param name="id"></param>
            <param name="binaryKey"></param>
            <param name="executeOptions"></param>
        </member>
        <member name="M:WixSharp.SqlScript.#ctor(WixSharp.Feature,System.String,WixSharp.ExecuteSql)">
            <summary>
            Creates an instance of SqlScript for <paramref name="binaryKey"/> to be execute according to <paramref name="executeOptions"/>
            </summary>
            <param name="feature"></param>
            <param name="binaryKey"></param>
            <param name="executeOptions"></param>
        </member>
        <member name="M:WixSharp.SqlScript.#ctor(WixSharp.Id,WixSharp.Feature,System.String,WixSharp.ExecuteSql)">
            <summary>
            Creates an instance of SqlScript for <paramref name="binaryKey"/> to be execute according to <paramref name="executeOptions"/>
            </summary>
            <param name="id"></param>
            <param name="feature"></param>
            <param name="binaryKey"></param>
            <param name="executeOptions"></param>
        </member>
        <member name="M:WixSharp.SqlScript.#ctor(System.String,WixSharp.RollbackSql)">
            <summary>
            Creates an instance of SqlScript for <paramref name="binaryKey"/> to be rolled-back according to <paramref name="rollbackOptions"/>
            </summary>
            <param name="binaryKey"></param>
            <param name="rollbackOptions"></param>
        </member>
        <member name="M:WixSharp.SqlScript.#ctor(WixSharp.Id,System.String,WixSharp.RollbackSql)">
            <summary>
            Creates an instance of SqlScript for <paramref name="binaryKey"/> to be rolled-back according to <paramref name="rollbackOptions"/>
            </summary>
            <param name="id"></param>
            <param name="binaryKey"></param>
            <param name="rollbackOptions"></param>
        </member>
        <member name="M:WixSharp.SqlScript.#ctor(WixSharp.Feature,System.String,WixSharp.RollbackSql)">
            <summary>
            Creates an instance of SqlScript for <paramref name="binaryKey"/> to be rolled-back according to <paramref name="rollbackOptions"/>
            </summary>
            <param name="feature"></param>
            <param name="binaryKey"></param>
            <param name="rollbackOptions"></param>
        </member>
        <member name="M:WixSharp.SqlScript.#ctor(WixSharp.Id,WixSharp.Feature,System.String,WixSharp.RollbackSql)">
            <summary>
            Creates an instance of SqlScript for <paramref name="binaryKey"/> to be rolled-back according to <paramref name="rollbackOptions"/>
            </summary>
            <param name="id"></param>
            <param name="feature"></param>
            <param name="binaryKey"></param>
            <param name="rollbackOptions"></param>
        </member>
        <member name="P:WixSharp.SqlScript.BinaryKey">
            <summary>
            Maps to the BinaryKey property of SqlScript
            </summary>
        </member>
        <member name="P:WixSharp.SqlScript.ContinueOnError">
            <summary>
            Maps to the ContinueOnError property of SqlScript
            </summary>
        </member>
        <member name="P:WixSharp.SqlScript.ExecuteOnInstall">
            <summary>
            Maps to the ExecuteOnInstall property of SqlScript
            </summary>
        </member>
        <member name="P:WixSharp.SqlScript.ExecuteOnReinstall">
            <summary>
            Maps to the ExecuteOnReinstall property of SqlScript
            </summary>
        </member>
        <member name="P:WixSharp.SqlScript.ExecuteOnUninstall">
            <summary>
            Maps to the ExecuteOnUninstall property of SqlScript
            </summary>
        </member>
        <member name="P:WixSharp.SqlScript.RollbackOnInstall">
            <summary>
            Maps to the RollbackOnInstall property of SqlScript
            </summary>
        </member>
        <member name="P:WixSharp.SqlScript.RollbackOnReinstall">
            <summary>
            Maps to the RollbackOnReinstall property of SqlScript
            </summary>
        </member>
        <member name="P:WixSharp.SqlScript.RollbackOnUninstall">
            <summary>
            Maps to the RollbackOnUninstall property of SqlScript
            </summary>
        </member>
        <member name="P:WixSharp.SqlScript.Sequence">
            <summary>
            Maps to the Sequence property of SqlScript
            </summary>
        </member>
        <member name="P:WixSharp.SqlScript.SqlDb">
            <summary>
            Maps to the SqlDb property of SqlScript. This property is to be inferred from the containing SqlDatabase element.
            </summary>
        </member>
        <member name="P:WixSharp.SqlScript.User">
            <summary>
            Maps to the User property of SqlScript
            </summary>
        </member>
        <member name="T:WixSharp.StringEnum`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:WixSharp.StringEnum`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.StringEnum`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="F:WixSharp.StringEnum`1.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:WixSharp.StringEnum`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:WixSharp.StringEnum`1.op_Equality(WixSharp.StringEnum{`0},WixSharp.StringEnum{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="obj1">The obj1.</param>
            <param name="obj2">The obj2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:WixSharp.StringEnum`1.op_Inequality(WixSharp.StringEnum{`0},WixSharp.StringEnum{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="obj1">The obj1.</param>
            <param name="obj2">The obj2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:WixSharp.StringEnum`1.op_Implicit(WixSharp.StringEnum{`0})~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:WixSharp.Id"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="obj">The identifier.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:WixSharp.StringEnum`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:WixSharp.StringEnum`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:WixSharp.User">
            <summary>
            Represents a WixUtilExtension User
            </summary>
        </member>
        <member name="M:WixSharp.User.#ctor">
            <summary>
            Creates an instance of User
            </summary>
        </member>
        <member name="M:WixSharp.User.#ctor(System.String)">
            <summary>
            Creates an instance of User representing <paramref name="name" />
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">name;name is a null reference or empty</exception>
        </member>
        <member name="M:WixSharp.User.#ctor(WixSharp.Id,System.String)">
            <summary>
            Creates an instance of User representing <paramref name="name" />
            </summary>
            <param name="id">The identifier.</param>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">name;name is a null reference or empty</exception>
        </member>
        <member name="M:WixSharp.User.#ctor(WixSharp.Id,WixSharp.Feature,System.String)">
            <summary>
            Creates an instance of User representing <paramref name="name" />
            </summary>
            <param name="id">The identifier.</param>
            <param name="feature">The feature.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:WixSharp.User.#ctor(WixSharp.Feature,System.String)">
            <summary>
            Creates an instance of User representing <paramref name="name" />
            </summary>
            <param name="feature">The feature.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:WixSharp.User.#ctor(WixSharp.Id,System.String,System.String)">
            <summary>
            Creates an instance of User representing <paramref name="name" />@<paramref name="domain" />
            </summary>
            <param name="id">The identifier.</param>
            <param name="name">The name.</param>
            <param name="domain">The domain.</param>
        </member>
        <member name="M:WixSharp.User.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of User representing <paramref name="name" />@<paramref name="domain" />
            </summary>
            <param name="name">The name.</param>
            <param name="domain">The domain.</param>
        </member>
        <member name="M:WixSharp.User.#ctor(WixSharp.Id,WixSharp.Feature,System.String,System.String)">
            <summary>
            Creates an instance of User representing <paramref name="name" />@<paramref name="domain" />
            </summary>
            <param name="id">The identifier.</param>
            <param name="feature">The feature.</param>
            <param name="name">The name.</param>
            <param name="domain">The domain.</param>
        </member>
        <member name="M:WixSharp.User.#ctor(WixSharp.Feature,System.String,System.String)">
            <summary>
            Creates an instance of User representing <paramref name="name" />@<paramref name="domain" />
            </summary>
            <param name="feature">The feature.</param>
            <param name="name">The name.</param>
            <param name="domain">The domain.</param>
        </member>
        <member name="F:WixSharp.User.WixIncludeInComponent">
            <summary>
            Requests that the User element is included inside a Component element - allowing the User to be installed.
            If any of the following properties are assigned (non-null), this property is ignored during compilation and assumed
            to be true:
            <list type="bullet">
            <item>CanNotChangePassword</item>
            <item>CreateUser</item>
            <item>Disabled</item>
            <item>FailIfExists</item>
            <item>LogonAsBatchJob</item>
            <item>LogonAsService</item>
            <item>PasswordExpired</item>
            <item>PasswordNeverExpires</item>
            <item>RemoveOnUninstall</item>
            <item>UpdateIfExists</item>
            <item>Vital</item>
            </list>
            </summary>
        </member>
        <member name="F:WixSharp.User.CanNotChangePassword">
            <summary>
            Maps to the CanNotChangePassword property of User
            </summary>
        </member>
        <member name="F:WixSharp.User.CreateUser">
            <summary>
            Maps to the CreateUser property of User
            </summary>
        </member>
        <member name="F:WixSharp.User.Disabled">
            <summary>
            Maps to the Disabled property of User
            </summary>
        </member>
        <member name="F:WixSharp.User.Domain">
            <summary>
            Maps to the Domain property of User
            </summary>
        </member>
        <member name="F:WixSharp.User.FailIfExists">
            <summary>
            Maps to the FailIfExists property of User
            </summary>
        </member>
        <member name="F:WixSharp.User.LogonAsBatchJob">
            <summary>
            Maps to the LogOnAsBatchJob property of User
            </summary>
        </member>
        <member name="F:WixSharp.User.LogonAsService">
            <summary>
            Maps to the LogOnAsService property of User
            </summary>
        </member>
        <member name="F:WixSharp.User.Password">
            <summary>
            Maps to the Password property of User
            </summary>
        </member>
        <member name="F:WixSharp.User.PasswordExpired">
            <summary>
            Maps to the PasswordExpired property of User
            </summary>
        </member>
        <member name="F:WixSharp.User.PasswordNeverExpires">
            <summary>
            Maps to the PasswordNeverExpires property of User
            </summary>
        </member>
        <member name="F:WixSharp.User.RemoveOnUninstall">
            <summary>
            Maps to the RemoveOnUninstall property of User
            </summary>
        </member>
        <member name="F:WixSharp.User.UpdateIfExists">
            <summary>
            Maps to the UpdateIfExists property of User
            </summary>
        </member>
        <member name="F:WixSharp.User.Vital">
            <summary>
            Maps to the Vital property of User
            </summary>
        </member>
        <member name="P:WixSharp.User.MustDescendFromComponent">
            <summary>
            Gets a value indicated if this User must be generated under a Component element or not.
            </summary>
        </member>
        <member name="M:WixSharp.User.ToXml">
            <summary>
            Emits WiX XML.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WixSharp.WixExtension">
            <summary>
            Represents a Wix Extension
            </summary>
        </member>
        <member name="P:WixSharp.WixExtension.Assembly">
            <summary>
            File name of the represented Wix Extension assembly
            </summary>
            <remarks>The represented value must include the file name and extension. See example</remarks>
            <example>WixIIsExtension.dll</example>
        </member>
        <member name="F:WixSharp.WixExtension.XmlNamespacePrefix">
            <summary>
            Xml namespace declaration prefix for the represented Wix Extension
            </summary>
        </member>
        <member name="F:WixSharp.WixExtension.XmlNamespace">
            <summary>
            Xml namespace value for the represented Wix Extension
            </summary>
        </member>
        <member name="M:WixSharp.WixExtension.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a WixExtension instance representing the corresponding XML namespace declaration
            </summary>
            <param name="assembly"></param>
            <param name="prefix"></param>
            <param name="namespace"></param>
        </member>
        <member name="M:WixSharp.WixExtension.ToXNamespace">
            <summary>
            Returns XmlNamespacePrefix as an instance of XNamespace
            </summary>
            <returns></returns>
        </member>
        <member name="M:WixSharp.WixExtension.ToXName(System.String)">
            <summary>
            Creates XName based on the XNamespace and specified name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WixSharp.WixExtension.XElement(System.String,System.Object)">
            <summary>
            Creates XElement based on XName (XNamespace and specified name) and content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WixSharp.WixExtension.ToNamespaceDeclaration">
            <summary>
            Gets the xml namespace attribute for this WixExtension
            </summary>
            <returns></returns>
        </member>
        <member name="M:WixSharp.WixExtension.GetNamespaceDeclaration(System.String,System.String)">
            <summary>
            Gets the xml namespace attribute for the provided <paramref name="prefix"/> and <paramref name="namespace"/>
            </summary>
            <param name="prefix"></param>
            <param name="namespace"></param>
            <returns></returns>
        </member>
        <member name="F:WixSharp.WixExtension.Difx">
            <summary>
            Well-known Wix Extension: difx
            </summary>
        </member>
        <member name="F:WixSharp.WixExtension.Fire">
            <summary>
            Well-known Wix Extension: Fire (Firewall)
            </summary>
        </member>
        <member name="F:WixSharp.WixExtension.Util">
            <summary>
            Well-known Wix Extension: Util
            </summary>
        </member>
        <member name="F:WixSharp.WixExtension.IIs">
            <summary>
            Well-known Wix Extension IIs
            </summary>
        </member>
        <member name="F:WixSharp.WixExtension.Sql">
            <summary>
            Well-known Wix Extension Sql
            </summary>
        </member>
        <member name="F:WixSharp.WixExtension.NetFx">
            <summary>
            Well-known Wix Extension NetFx
            </summary>
        </member>
        <member name="F:WixSharp.WixExtension.UI">
            <summary>
            Well-known Wix Extension UI
            </summary>
        </member>
        <member name="T:WixSharp.IXmlAware">
            <summary>
            The interface for the Wix# types that can generate WiX XML.
            </summary>
        </member>
        <member name="M:WixSharp.IXmlAware.ToXml">
            <summary>
            Emits WiX XML.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WixSharp.WixProject">
            <summary>
            Base class for WiX projects (e.g. Project, Bundle).
            </summary>
        </member>
        <member name="P:WixSharp.WixProject.SourceBaseDir">
            <summary>
            Base directory for the relative paths of the bootstrapper items (e.g. <see cref="T:WixSharp.Bootstrapper.MsiPackage"></see>).
            </summary>
        </member>
        <member name="F:WixSharp.WixProject.CAConfigFile">
            <summary>
            The location of the config file for Managed Custom Action.
            <para>The config file (CustomAction.config) is the file to be passed to the MakeSfxCA.exe when packing the Custom Action assembly.</para>
            </summary>
        </member>
        <member name="P:WixSharp.WixProject.CustomActionConfig">
            <summary>
            Resolves user defined config file.
            </summary>
            <value>The custom action config.</value>
        </member>
        <member name="F:WixSharp.WixProject.OutFileName">
            <summary>
            Name of the MSI/MSM file (without extension) to be build.
            </summary>
        </member>
        <member name="P:WixSharp.WixProject.OutDir">
            <summary>
            The output directory. The directory where all msi and temporary files should be assembled. The <c>CurrentDirectory</c> will be used if <see cref="P:WixSharp.WixProject.OutDir"/> is left unassigned.
            </summary>
        </member>
        <member name="F:WixSharp.WixProject.WixNamespaces">
            <summary>
            Collection of XML namespaces (e.g. <c>xmlns:iis="http://schemas.microsoft.com/wix/IIsExtension"</c>) to be declared in the XML (WiX project) root.
            </summary>
        </member>
        <member name="P:WixSharp.WixProject.WixExtensions">
            <summary>
            Collection of paths to the WiX extensions.
            </summary>
        </member>
        <member name="F:WixSharp.WixProject.WxsFiles">
            <summary>
            Collection of paths to the external wsx files containing Fragment(s). 
            <para>
            At the compile time files will be pases to candle.exe but the referencing them fragments in the primary wxs (XML)
            needs to be done from WixSourceGenerated event handler.
            </para>
            </summary>
        </member>
        <member name="F:WixSharp.WixProject.WixVariables">
            <summary>
            This element exposes advanced WiX functionality. Use this element to declare WiX variables from directly within your 
            authoring. WiX variables are not resolved until the final msi/msm/pcp file is actually generated. WiX variables do not 
            persist into the msi/msm/pcp file, so they cannot be used when an MSI file is being installed; it's a WiX-only concept.
            </summary>
        </member>
        <member name="F:WixSharp.WixProject.LibFiles">
            <summary>
            Collection of paths to the external wsxlib files to be passed to the Light linker. 
            </summary>
        </member>
        <member name="P:WixSharp.WixProject.Language">
            <summary>
            Installation UI Language. If not specified <c>"en-US"</c> will be used.
            <para>It is possible to specify multiple languages separated by coma or semicolon. All extra languages will be used 
            as additional values for 'Package.Languages' attribute and light.exe '-cultures:' command line parameters.</para>
            </summary>
        </member>
        <member name="F:WixSharp.WixProject.LightOptions">
            <summary>
            WiX linker <c>Light.exe</c> options (e.g. -sice:ICE30).
            <para>The default value is "-sw1076 -sw1079" (disable warning 1076 and 1079). </para>
            </summary>
        </member>
        <member name="F:WixSharp.WixProject.CandleOptions">
            <summary>
            WiX compiler <c>Candle.exe</c> options.
            <para>The default value is "-sw1076" (disable warning 1026).</para>
            </summary>
        </member>
        <member name="E:WixSharp.WixProject.WixSourceGenerated">
            <summary>
            Occurs when WiX source code generated. Use this event if you need to modify generated XML (XDocument)
            before it is compiled into MSI.
            </summary>
        </member>
        <member name="E:WixSharp.WixProject.WixSourceSaved">
            <summary>
            Occurs when WiX source file is saved. Use this event if you need to do any post-processing of the generated/saved file.
            </summary>
        </member>
        <member name="E:WixSharp.WixProject.WixSourceFormated">
            <summary>
            Occurs when WiX source file is formatted and ready to be saved. Use this event if you need to do any custom formatting 
            of the XML content before it is saved by the compiler.
            </summary>
        </member>
        <member name="F:WixSharp.WixProject.PreserveTempFiles">
            <summary>
            Forces <see cref="T:WixSharp.Compiler"/> to preserve all temporary build files (e.g. *.wxs).
            <para>The default value is <c>false</c>: all temporary files are deleted at the end of the build/compilation.</para>
            <para>Note: if <see cref="T:WixSharp.Compiler"/> fails to build MSI the <c>PreserveTempFiles</c>
            value is ignored and all temporary files are preserved.</para>
            </summary>
        </member>
        <member name="M:WixSharp.WixProject.InvokeWixSourceGenerated(System.Xml.Linq.XDocument)">
            <summary>
            Invokes the WixSourceGenerated event handlers.
            </summary>
            <param name="doc">The XML document.</param>
        </member>
        <member name="M:WixSharp.WixProject.AddWixFragment(System.String,System.Xml.Linq.XElement[])">
            <summary>
            Adds the specified XML content as a WiX Fragment/FragmentRef elements combination.
            </summary>
            <param name="placementPath">The placement path to the element matching the specified path (e.g. <c>Select("Product/Package")</c>.</param>
            <param name="content">The XML fragment content.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.WixProject.AddWixFragment(System.String,WixSharp.IXmlAware[])">
            <summary>
            Adds the specified XML content as a WiX Fragment/FragmentRef elements combination.
            </summary>
            <param name="placementPath">The placement path to the element matching the specified path (e.g. <c>Select("Product/Package")</c>.</param>
            <param name="content">The XML fragment content. Collection of objects that can be converted to XML with ToXML() call</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.WixProject.InvokeWixSourceSaved(System.String)">
            <summary>
            Invokes the WixSourceSaved event handlers.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:WixSharp.WixProject.InvokeWixSourceFormated(System.String@)">
            <summary>
            Invokes the WixSourceFormated event handlers.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="T:WixSharp.Controls.Control">
            <summary>
            Defines generic WiX Control.  
            </summary>
        </member>
        <member name="M:WixSharp.Controls.Control.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Controls.Control"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.Controls.Control.#ctor(WixSharp.Id)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Controls.Control"/> class.
            </summary>
            <param name="id">The <c>Control</c> id.</param>
        </member>
        <member name="F:WixSharp.Controls.Control.Type">
            <summary>
            The type of the control. Could be one of the following: Billboard, Bitmap, CheckBox, ComboBox, DirectoryCombo, DirectoryList, Edit, GroupBox, Icon, Line, ListBox, ListView, MaskedEdit, PathEdit, ProgressBar, PushButton, RadioButtonGroup, ScrollableText, SelectionTree, Text, VolumeCostList, VolumeSelectCombo.
            Use <see cref="T:WixSharp.Controls.ControlType"></see> constants to define the type of the control.
            </summary>
        </member>
        <member name="F:WixSharp.Controls.Control.X">
            <summary>
            Horizontal coordinate of the upper-left corner of the rectangular boundary of the control. This must be a non-negative number.
            </summary>
        </member>
        <member name="F:WixSharp.Controls.Control.Y">
            <summary>
            Width of the rectangular boundary of the control. This must be a non-negative number.
            </summary>
        </member>
        <member name="F:WixSharp.Controls.Control.Height">
            <summary>
            Vertical coordinate of the upper-left corner of the rectangular boundary of the control. This must be a non-negative number.
            </summary>
        </member>
        <member name="F:WixSharp.Controls.Control.Width">
            <summary>
            Width of the rectangular boundary of the control. This must be a non-negative number.
            </summary>
        </member>
        <member name="F:WixSharp.Controls.Control.Text">
            <summary>
            A localizable string used to set the initial text contained in a control.
            This attribute can contain a formatted string that is processed at install time to insert the values of properties using [PropertyName] syntax. Also supported are environment variables, file installation paths, and component installation directories.
            </summary>
        </member>
        <member name="F:WixSharp.Controls.Control.Hidden">
            <summary>
            Sets whether the control is hidden.
            </summary>
        </member>
        <member name="F:WixSharp.Controls.Control.Disabled">
            <summary>
            Sets whether the control is disabled.
            </summary>
        </member>
        <member name="F:WixSharp.Controls.Control.Property">
            <summary>
            The name of a defined property to be linked to this control. This column is required for active controls.
            </summary>
        </member>
        <member name="F:WixSharp.Controls.Control.EmbeddedXML">
            <summary>
            The raw XML string to be embedded into WiX <c>Control</c> element.
            </summary>
        </member>
        <member name="F:WixSharp.Controls.Control.Tooltip">
            <summary>
            The string used for the Tooltip.
            </summary>
        </member>
        <member name="F:WixSharp.Controls.Control.Conditions">
            <summary>
            Conditions for the control.
            </summary>
        </member>
        <member name="F:WixSharp.Controls.Control.Actions">
            <summary>
            The actions.
            </summary>
        </member>
        <member name="M:WixSharp.Controls.Control.ToXElement">
            <summary>
            Converts the <see cref="T:WixSharp.Control"/> instance into WiX <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <returns><see cref="T:System.Xml.Linq.XElement"/> instance.</returns>
        </member>
        <member name="T:WixSharp.Controls.ClickHandler">
            <summary>
            Delegate for  <see cref="T:WixSharp.Controls.IWixInteractiveControl"/> event <c>Click</c>.
            </summary>
        </member>
        <member name="T:WixSharp.Controls.IWixInteractiveControl">
            <summary>
            The interface for the WinForm control representing WiX custom UI control exhibiting interactive behavior.
            </summary>
        </member>
        <member name="P:WixSharp.Controls.IWixInteractiveControl.Actions">
            <summary>
            Gets the actions associated with the WiX <c>Control</c>.
            </summary>
            <value>
            The actions.
            </value>
        </member>
        <member name="E:WixSharp.Controls.IWixInteractiveControl.Click">
            <summary>
            Occurs when <see cref="T:WixSharp.Compiler"/> triggers it in order to generate WiX XML
            for the control action(s).
            </summary>
        </member>
        <member name="M:WixSharp.Controls.IWixInteractiveControl.PerformClick">
            <summary>
            Triggers <c>Click</c> event.
            </summary>
        </member>
        <member name="T:WixSharp.Controls.IWixControl">
            <summary>
            The interface for the WinForm control representing generic WiX custom UI control.
            </summary>
        </member>
        <member name="P:WixSharp.Controls.IWixControl.Id">
            <summary>
            Gets or sets the Id.
            </summary>
            <value>
            The Id.
            </value>
        </member>
        <member name="P:WixSharp.Controls.IWixControl.BoundProperty">
            <summary>
            Gets or sets the bound property name.
            </summary>
            <value>
            The bound property name.
            </value>
        </member>
        <member name="P:WixSharp.Controls.IWixControl.Tooltip">
            <summary>
            Gets or sets the tooltip.
            </summary>
            <value>
            The tooltip.
            </value>
        </member>
        <member name="P:WixSharp.Controls.IWixControl.WixAttributes">
            <summary>
            Gets or sets the WiX attributes.
            </summary>
            <value>
            The WiX attributes.
            </value>
        </member>
        <member name="P:WixSharp.Controls.IWixControl.WixSize">
            <summary>
            Gets the size of the <c>Control</c>.
            </summary>
            <value>
            The size of the <c>Control</c>.
            </value>
        </member>
        <member name="P:WixSharp.Controls.IWixControl.WixLocation">
            <summary>
            Gets the <c>Control</c> location.
            </summary>
            <value>
            The <c>Control</c> location.
            </value>
        </member>
        <member name="P:WixSharp.Controls.IWixControl.Hidden">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WixSharp.Controls.IWixControl"/> is hidden.
            </summary>
            <value>
              <c>true</c> if hidden; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WixSharp.Controls.IWixControl.Conditions">
            <summary>
            Gets or sets the control conditions.
            </summary>
            <value>
            The control conditions.
            </value>
        </member>
        <member name="M:WixSharp.Controls.IWixControl.ToWControl">
            <summary>
            Converts the WinForm control into WiX custom UI control <see cref="T:WixSharp.Control"/>.
            </summary>
            <returns>Instance of the WixSharp.Control.</returns>
        </member>
        <member name="T:WixSharp.Controls.ControlType">
            <summary>
            UI Control types supported by wiX/MSI.
            </summary>
        </member>
        <member name="T:WixSharp.Controls.PublishingInfo">
            <summary>
            Defines the association between an MSI dialog control and the <see cref="T:WixSharp.PublishingInfo" />.
            </summary>
        </member>
        <member name="P:WixSharp.Controls.PublishingInfo.Dialog">
            <summary>
            Gets or sets the dialog Id.
            </summary>
            <value>
            The dialog Id.
            </value>
        </member>
        <member name="P:WixSharp.Controls.PublishingInfo.Control">
            <summary>
            Gets or sets the control Id.
            </summary>
            <value>
            The control Id.
            </value>
        </member>
        <member name="F:WixSharp.Controls.PublishingInfo.Actions">
            <summary>
            The actions associated with the dialog control.
            </summary>
        </member>
        <member name="T:WixSharp.Controls.ShowDialog">
            <summary>
            Defines <see cref="T:WixSharp.DialogAction"/> for showing MSI dialog.
            </summary>
        </member>
        <member name="M:WixSharp.Controls.ShowDialog.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Controls.ShowDialog"/> class.
            </summary>
            <param name="dialogName">Name of the dialog.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:WixSharp.Controls.ShowDialog.#ctor(System.String,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Controls.ShowDialog"/> class.
            </summary>
            <param name="dialogName">Name of the dialog.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="T:WixSharp.Controls.SpawnDialog">
            <summary>
            Defines <see cref="T:WixSharp.DialogAction"/> for creating a child of a modal dialog box while keeping the present dialog box running. 
            </summary>
        </member>
        <member name="M:WixSharp.Controls.SpawnDialog.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Controls.SpawnDialog"/> class.
            </summary>
            <param name="dialogName">Name of the dialog.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:WixSharp.Controls.SpawnDialog.#ctor(System.String,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Controls.SpawnDialog"/> class.
            </summary>
            <param name="dialogName">Name of the dialog.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="T:WixSharp.Controls.ExecuteCustomAction">
            <summary>
            Defines <see cref="T:WixSharp.DialogAction"/> for executing MSI CustomAction ("DoAction").
            </summary>
        </member>
        <member name="M:WixSharp.Controls.ExecuteCustomAction.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Controls.ExecuteCustomAction"/> class.
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:WixSharp.Controls.ExecuteCustomAction.#ctor(WixSharp.Action,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Controls.ExecuteCustomAction"/> class.
            </summary>
            <param name="action">The action.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="T:WixSharp.Controls.SetTargetPath">
            <summary>
            Defines "SetTargetPath" <see cref="T:WixSharp.DialogAction"/>.
            </summary>
        </member>
        <member name="M:WixSharp.Controls.SetTargetPath.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Controls.SetTargetPath"/> class.
            </summary>
            <param name="propertyValue">The property value. Default value is "[WIXUI_INSTALLDIR]".</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="T:WixSharp.Controls.SetProperty">
            <summary>
            Defines <see cref="T:WixSharp.DialogAction"/> for setting property.
            </summary>
        </member>
        <member name="M:WixSharp.Controls.SetProperty.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Controls.SetProperty"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="T:WixSharp.Controls.CloseDialog">
            <summary>
            Defines custom UI control "Close Dialog" action.
            </summary>
        </member>
        <member name="M:WixSharp.Controls.CloseDialog.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.CloseDialog"/> class.
            </summary>
            <param name="returnValue">The return value.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:WixSharp.Controls.CloseDialog.#ctor(System.String,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.CloseDialog"/> class.
            </summary>
            <param name="returnValue">The return value.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="T:WixSharp.Controls.DialogAction">
            <summary>
            Defines custom UI control generic action. 
            </summary>
        </member>
        <member name="T:WixSharp.Controls.DialogSequence">
            <summary>
            Simple class that defines custom UI (WiX <c>UI</c> element). This is a specialized version of <see cref="T:WixSharp.CustomUI" /> class
            designed to allow simple customization of the dialogs sequence without the introduction of any custom dialogs.
            <example>The following is an example demonstrates how to skip <c>License Agreement</c> dialog,
            which is otherwise displayed between <c>Welcome</c> and <c>InstallDir</c> dialogs.
            <code>
            project.CustomUI = new DialogSequence()
            .On(Dialogs.WelcomeDlg, Buttons.Next, new ShowDialog(Dialogs.InstallDirDlg))
            .On(Dialogs.InstallDirDlg, Buttons.Back, new ShowDialog(Dialogs.WelcomeDlg));
            </code></example>
            </summary>
        </member>
        <member name="M:WixSharp.Controls.DialogSequence.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Controls.DialogSequence"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.Controls.DialogSequence.On(System.String,System.String,WixSharp.Controls.DialogAction[])">
            <summary>
            Defines the WiX Dialog UI control Action (event handler).
            <para>Note that all handlers will have <c>Order</c> field automatically assigned '5' 
            to ensure the overriding the default WiX event handlers</para>
            </summary>
            <param name="dialog">The dialog.</param>
            <param name="control">The control.</param>
            <param name="handlers">The handlers.</param>
            <returns></returns>
        </member>
        <member name="F:WixSharp.Controls.DialogSequence.DefaultOrder">
            <summary>
            The default value of the Order of the DialogAction. It is automatically assigned of handler doesn't have it set.
            </summary>
        </member>
        <member name="T:WixSharp.Controls.CustomUI">
            <summary>
            Defines custom UI (WiX <c>UI</c> element). This class is to be used to define the customization of the standard MSI UI. 
            The usual scenario of the customization is the injection of the custom <see cref="T:WixSharp.Dialog"/> 
            into the sequence of the standard dialogs. This can be accomplished by defining the custom dialog as  
            <see cref="T:WixSharp.WixForm"/>. Such a <see cref="T:WixSharp.WixForm"/> can be edited with the Visual Studio form designer. 
            <para>
            When <see cref="T:WixSharp.WixForm"/> is complete it can be converted into <see cref="T:WixSharp.Dialog"/> 
            with the <see cref="T:WixSharp.Dialog.ToWDialog"/>() call. And at compile time Wix# compiler converts 
            <see cref="T:WixSharp.Dialog"/> into the final WiX <c>UI</c> element XML definition.
            </para>
            <para>
            While it is possible to construct <see cref="T:WixSharp.CustomUI"/> instance manually it is preferred to use 
            Factory methods of  <see cref="T:WixSharp.CustomUIBuilder"/> (e.g. BuildPostLicenseDialogUI) for this.
            </para>
            <code>
             project.UI = WUI.WixUI_Common;
             project.CustomUI = CustomUIBuilder.BuildPostLicenseDialogUI(productActivationDialog,
                                                                         onNextActions: new DialogAction[]{
                                                                                            new ExecueteCustomAction ("ValidateLicenceKey"),
                                                                                            new ShowDialog(Dialogs.InstallDirDlg, "SERIALNUMBER_VALIDATED = \"TRUE\"")});
            </code>
            </summary>
        </member>
        <member name="F:WixSharp.Controls.CustomUI.Properties">
            <summary>
            The collection of PropertyId vs. PropertyValue pairs to be defined as the <c>Property</c> WiX elements inside of the <c>UI</c> element.
            </summary>
        </member>
        <member name="F:WixSharp.Controls.CustomUI.TextStyles">
            <summary>
            The collection of StyleId vs. Font pairs to be defined as the <c>TextStyle</c> WiX elements inside of the <c>UI</c> element.
            </summary>
        </member>
        <member name="F:WixSharp.Controls.CustomUI.DialogRefs">
            <summary>
            The collection of dialog IDs to be defined as the <c>DialogRef</c> WiX elements inside of the <c>UI</c> element.
            By default it contains references to all MSI predefined dialogs.
            </summary>
        </member>
        <member name="F:WixSharp.Controls.CustomUI.CustomDialogs">
            <summary>
            The collection of <see cref="T:WixSharp.Dialog"/>s to be defined as the custom <c>Dialog</c> WiX elements inside of the <c>UI</c> element.
            </summary>
        </member>
        <member name="F:WixSharp.Controls.CustomUI.UISequence">
            <summary>
            Defines UI sequence via collection of <see cref="T:WixSharp.PublishingInfo"/> items containing association between Dialog controls and MSI Dialog actions. 
            </summary>
        </member>
        <member name="M:WixSharp.Controls.CustomUI.On(System.String,System.String,WixSharp.Controls.DialogAction[])">
            <summary>
            Defines the WiX Dialog UI control Action (event handler).
            <code>
            customUI.On(Dialogs.WelcomeDlg, Buttons.Next, new ShowDialog(Dialogs.LicenseAgreementDlg));
            </code>
            </summary>
            <param name="dialog">The dialog.</param>
            <param name="control">The control.</param>
            <param name="handlers">The handlers.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Controls.CustomUI.On(WixSharp.Controls.Dialog,System.String,WixSharp.Controls.DialogAction[])">
            <summary>
            Defines the <see cref="T:WixSharp.Dialog" /> UI control Action (event handler).
            <code>
            customUI.On(activationDialog, Buttons.Cancel, new CloseDialog("Exit"));
            </code>
            </summary>
            <param name="dialog">The dialog.</param>
            <param name="control">The control.</param>
            <param name="handlers">The handlers.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Controls.CustomUI.ToXElement">
            <summary>
            Converts the <see cref="T:WixSharp.CustomUI"/> instance into WiX <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <returns><see cref="T:System.Xml.Linq.XElement"/> instance.</returns>
        </member>
        <member name="T:WixSharp.Controls.CommomDialogsUI">
            <summary>
            Class defining all <c>Publish</c> declarations associated with the <c>WixUI_Common</c> dialogs. This class is used as a starting point for 
            UI customization with injection of CLR Dialog (WinForms). 
            </summary>
        </member>
        <member name="M:WixSharp.Controls.CommomDialogsUI.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Controls.CommomDialogsUI"/> class.
            </summary>
        </member>
        <member name="T:WixSharp.Controls.CommonDialogs">
            <summary>
            Defines values (names) for the WiX custom UI predefined dialog types. 
            </summary>
        </member>
        <member name="M:WixSharp.Controls.CommonDialogs.AllValues">
            <summary>
            Returns all WiX custom UI predefined dialog types.
            </summary>
            <returns>Array of dialog types.</returns>
        </member>
        <member name="T:WixSharp.Controls.NativeDialogs">
            <summary>
            Defines values (names) for the standard WiX dialogs. 
            </summary>
        </member>
        <member name="F:WixSharp.Controls.NativeDialogs.CustomizeDlg">
            <summary>
            The customize features dialog
            </summary>
        </member>
        <member name="T:WixSharp.Controls.ControlActionData">
            <summary>
            Predefined values for the <c>Control</c> actions.
            </summary>
        </member>
        <member name="T:WixSharp.Controls.ControlAction">
            <summary>
            Predefined WiX custom UI control (element) action types.
            </summary>
        </member>
        <member name="T:WixSharp.Controls.EndDialogValue">
            <summary>
            Predefined values for the <c>EndDialog</c> action.
            </summary>
        </member>
        <member name="T:WixSharp.Controls.Buttons">
            <summary>
            Defines values (names) for the WiX custom UI predefined buttons. 
            </summary>
        </member>
        <member name="T:WixSharp.Controls.CustomUIBuilder">
            <summary>
            The Factory class for building <see cref="T:WixSharp.CustomUI"/>. 
            <para>
            While it is possible to construct  instance manually it is preferred to use 
            Factory methods of  <see cref="T:WixSharp.CustomUIBuilder"/> for this.
            </para>
            <code>
             project.UI = WUI.WixUI_Common;
             project.CustomUI = CustomUIBuilder.BuildPostLicenseDialogUI(productActivationDialog,
                                                                         onNextActions: new DialogAction[]{
                                                                                            new ExecueteCustomAction ("ValidateLicenceKey"),
                                                                                            new ShowDialog(Dialogs.InstallDirDlg, "SERIALNUMBER_VALIDATED = \"TRUE\"")});
            </code>
            </summary>
        </member>
        <member name="M:WixSharp.Controls.CustomUIBuilder.BuildPostLicenseDialogUI(WixSharp.Controls.Dialog,WixSharp.Controls.DialogAction[],WixSharp.Controls.DialogAction[],WixSharp.Controls.DialogAction[])">
            <summary>
            Builds <see cref="T:WixSharp.CustomUI"/> instance and injects <see cref="T:WixSharp.Dialog"/> into the standard UI sequence 
            just after <c>LicenceDialog</c> step. 
            </summary>
            <param name="customDialog">The <see cref="T:WixSharp.Dialog"/> dialog to be injected.</param>
            <param name="onNextActions">The on next actions.</param>
            <param name="onBackActions">The on back actions.</param>
            <param name="onCancelActions">The on cancel actions.</param>
            <returns><see cref="T:WixSharp.CustomUI"/> instance.</returns>
        </member>
        <member name="T:WixSharp.Controls.Dialog">
            <summary>
            Defines MSI Dialog. It represents WiX <c>Dialog</c> element.
            </summary>
        </member>
        <member name="M:WixSharp.Controls.Dialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Controls.Dialog"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.Controls.Dialog.#ctor(WixSharp.Id)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Controls.Dialog"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="F:WixSharp.Controls.Dialog.Height">
            <summary>
            The height of the dialog box in dialog units.
            </summary>
        </member>
        <member name="F:WixSharp.Controls.Dialog.Width">
            <summary>
            The width of the dialog box in dialog units.
            </summary>
        </member>
        <member name="F:WixSharp.Controls.Dialog.Title">
            <summary>
            The title of the dialog box.
            </summary>
        </member>
        <member name="F:WixSharp.Controls.Dialog.Controls">
            <summary>
            Collection of the contained nested <see cref="T:WixSharp.Controls.Control"/>s (UI elements).
            </summary>
        </member>
        <member name="M:WixSharp.Controls.Dialog.ToXElement">
            <summary>
            Converts the <see cref="T:WixSharp.Dialog"/> instance into WiX <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <returns><see cref="T:System.Xml.Linq.XElement"/> instance.</returns>
        </member>
        <member name="M:WixSharp.Controls.Dialog.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:WixSharp.Controls.Dialog.op_Implicit(WixSharp.Controls.Dialog)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:WixSharp.Controls.Dialog"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:WixSharp.Controls.WixControlCondition">
            <summary>
            Defines Form designer compatible <c>Condition</c> associated with the WixControl action.
            </summary>
        </member>
        <member name="P:WixSharp.Controls.WixControlCondition.Action">
            <summary>
            Gets or sets the action.
            <para>Used only under Control elements and is required. Allows
            specific actions to be applied to a control based on the result of this condition. This attribute's value must be one of the following:</para>
            <para>- default</para>
            <para>- enable </para>
            <para>- disable</para>
            <para>- hide</para>
            <para>- show</para>
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="P:WixSharp.Controls.WixControlCondition.Value">
            <summary>
            Gets or sets the value for the action condition of the WiX Control element.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:WixSharp.Controls.ConditionAction">
            <summary>
            Defines condition action type values for the WiX Control elements. 
            </summary>
        </member>
        <member name="T:WixSharp.ElevatedManagedAction">
            <summary>
            Defines WiX Managed CustomAction, which is to be run with elevated privileges (UAC).
            <para>
            Any CustomAction, which needs elevation must be run with  <see cref="F:WixSharp.Action.Impersonate"/> set to
            <c>false</c> and <see cref="F:WixSharp.Action.Execute"/> set to <c>Execute.deferred</c>. Thus <see cref="T:WixSharp.ElevatedManagedAction"/> is
            a full equivalent of <see cref="T:WixSharp.ManagedAction"/> with appropriately adjusted <see cref="F:WixSharp.Action.Execute"/> and
            <see cref="F:WixSharp.Action.Impersonate"/> during the instantiation:
            </para>
            <code>
             public ElevatedManagedAction() : base()
             {
                 Impersonate = false;
                 Execute = Execute.deferred;
             }
            </code>
            </summary>summary>
        </member>
        <member name="M:WixSharp.ElevatedManagedAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ElevatedManagedAction"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.ElevatedManagedAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ElevatedManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="name">Name of the CustomAction. The name should match the method implementing the custom action functionality.</param>
        </member>
        <member name="M:WixSharp.ElevatedManagedAction.#ctor(WixSharp.CustomActionMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ElevatedManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="action">The full name of static CustomAction method.</param>
        </member>
        <member name="M:WixSharp.ElevatedManagedAction.#ctor(WixSharp.Id,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ElevatedManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ElevatedManagedAction"/> instance.</param>
            <param name="name">Name of the CustomAction. The name should match the method implementing the custom action functionality.</param>
        </member>
        <member name="M:WixSharp.ElevatedManagedAction.#ctor(WixSharp.Id,WixSharp.CustomActionMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ElevatedManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ElevatedManagedAction"/> instance.</param>
            <param name="action">The full name of static CustomAction method.</param>
        </member>
        <member name="M:WixSharp.ElevatedManagedAction.#ctor(WixSharp.CustomActionMethod,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ElevatedManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="action">The full name of static CustomAction method.</param>
            <param name="actionAssembly">Path to the assembly containing the CustomAction implementation. Specify <c>"%this%"</c> if the assembly
            is in the Wix# script.</param>
        </member>
        <member name="M:WixSharp.ElevatedManagedAction.#ctor(WixSharp.Id,WixSharp.CustomActionMethod,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ElevatedManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ElevatedManagedAction"/> instance.</param>
            <param name="action">The full name of static CustomAction method.</param>
            <param name="actionAssembly">Path to the assembly containing the CustomAction implementation. Specify <c>"%this%"</c> if the assembly
            is in the Wix# script.</param>
        </member>
        <member name="M:WixSharp.ElevatedManagedAction.#ctor(WixSharp.CustomActionMethod,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ElevatedManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="action">The full name of static CustomAction method.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ManagedAction"/>.</param>
        </member>
        <member name="M:WixSharp.ElevatedManagedAction.#ctor(WixSharp.CustomActionMethod,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ElevatedManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="action">The full name of static CustomAction method.</param>
            <param name="actionAssembly">Path to the assembly containing the CustomAction implementation. Specify <c>"%this%"</c> if the assembly
            is in the Wix# script.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ManagedAction"/>.</param>
        </member>
        <member name="M:WixSharp.ElevatedManagedAction.#ctor(WixSharp.Id,WixSharp.CustomActionMethod,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ElevatedManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ElevatedManagedAction"/> instance.</param>
            <param name="action">The full name of static CustomAction method.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ManagedAction"/>.</param>
        </member>
        <member name="M:WixSharp.ElevatedManagedAction.#ctor(WixSharp.Id,WixSharp.CustomActionMethod,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ElevatedManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ElevatedManagedAction"/> instance.</param>
            <param name="action">The full name of static CustomAction method.</param>
            <param name="actionAssembly">Path to the assembly containing the CustomAction implementation. Specify <c>"%this%"</c> if the assembly
            is in the Wix# script.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ManagedAction"/>.</param>
        </member>
        <member name="M:WixSharp.ElevatedManagedAction.#ctor(WixSharp.CustomActionMethod,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ElevatedManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="action">The full name of static CustomAction method.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ManagedAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="M:WixSharp.ElevatedManagedAction.#ctor(WixSharp.CustomActionMethod,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ElevatedManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="action">The full name of static CustomAction method.</param>
            <param name="actionAssembly">Path to the assembly containing the CustomAction implementation. Specify <c>"%this%"</c> if the assembly
            is in the Wix# script.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ManagedAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="M:WixSharp.ElevatedManagedAction.#ctor(WixSharp.Id,WixSharp.CustomActionMethod,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ElevatedManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ElevatedManagedAction"/> instance.</param>
            <param name="action">The full name of static CustomAction method.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ManagedAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="M:WixSharp.ElevatedManagedAction.#ctor(WixSharp.Id,WixSharp.CustomActionMethod,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ElevatedManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ElevatedManagedAction"/> instance.</param>
            <param name="action">The full name of static CustomAction method.</param>
            <param name="actionAssembly">Path to the assembly containing the CustomAction implementation. Specify <c>"%this%"</c> if the assembly
            is in the Wix# script.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ManagedAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="T:WixSharp.ExeFileShortcut">
            <summary>
            Defines <see cref="T:WixSharp.ExeFileShortcut"/> to be installed. <para><see cref="T:WixSharp.ExeFileShortcut"/> is a specialized version of the <see cref="T:WixSharp.Shortcut"/> designed 
            for using <see cref="T:WixSharp.Shortcut"/> as a <see cref="T:WixSharp.Dir"/> nested element</para>
            <para>There are different ways of defining shortcuts of the Wix# project: </para>
            <para> - It can be specified as a nested element of the <see cref="T:WixSharp.File"/>. In this case after 
            the installation the shortcut will point to the file it belongs to.</para>
            <para> - Alternatively the <c>Shortcut</c> can be specified as a <see cref="T:WixSharp.Dir"/> nested 
            element. In this case after the installation the shortcut will point to the file 
            it belongs to.</para>
            </summary>
            
            <example>
            The following is an example of installing "Uninstall Product" shortcut to the product directory.
            <code>
            var project = 
                new Project("My Product",
                
                    new Dir(@"%ProgramFiles%\My Company\My Product",
                        new ExeFileShortcut("Uninstall MyApp", 
                                            "[System64Folder]msiexec.exe", 
                                            "/x [ProductCode]")),
                            
                    ...
                    
            Compiler.BuildMsi(project);
            </code>
            </example>
        </member>
        <member name="M:WixSharp.ExeFileShortcut.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ExeFileShortcut"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.ExeFileShortcut.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ExeFileShortcut"/> class with properties/fields initialized with specified parameters.
            <para>This constructor should be used to instantiate shortcuts which belong to the <see cref="T:WixSharp.Dir"/> element.</para>
            <para>The shortcut will be installed in the directory defined by the parent <see cref="T:WixSharp.Dir"/> element.</para>
            </summary>
            <param name="name">The name of the shortcut to be installed.</param>
            <param name="target">The path to the executable the shortcut is associated with.</param>
            <param name="arguments">The shortcut arguments.</param>
        </member>
        <member name="M:WixSharp.ExeFileShortcut.#ctor(WixSharp.Feature,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ExeFileShortcut"/> class with properties/fields initialized with specified parameters.
            <para>This constructor should be used to instantiate shortcuts which belong to the <see cref="T:WixSharp.Dir"/> element.</para>
            <para>The shortcut will be installed in the directory defined by the parent <see cref="T:WixSharp.Dir"/> element.</para>
            </summary>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the shortcut should be included in.</param>
            <param name="name">The name of the shortcut to be installed.</param>
            <param name="target">The path to the executable the shortcut is associated with.</param>
            <param name="arguments">The shortcut arguments.</param>
        </member>
        <member name="M:WixSharp.ExeFileShortcut.#ctor(WixSharp.Id,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ExeFileShortcut"/> class with properties/fields initialized with specified parameters.
            <para>This constructor should be used to instantiate shortcuts which belong to the <see cref="T:WixSharp.Dir"/> element.</para>
            <para>The shortcut will be installed in the directory defined by the parent <see cref="T:WixSharp.Dir"/> element.</para>
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ExeFileShortcut"/> instance.</param>
            <param name="name">The name of the shortcut to be installed.</param>
            <param name="target">The path to the executable the shortcut is associated with.</param>
            <param name="arguments">The shortcut arguments.</param>
        </member>
        <member name="M:WixSharp.ExeFileShortcut.#ctor(WixSharp.Id,WixSharp.Feature,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ExeFileShortcut"/> class with properties/fields initialized with specified parameters.
            <para>This constructor should be used to instantiate shortcuts which belong to the <see cref="T:WixSharp.Dir"/> element.</para>
            <para>The shortcut will be installed in the directory defined by the parent <see cref="T:WixSharp.Dir"/> element</para>
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ExeFileShortcut"/> instance.</param>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the shortcut should be included in.</param>
            <param name="name">The name of the shortcut to be installed.</param>
            <param name="target">The path to the executable the shortcut is associated with.</param>
            <param name="arguments">The shortcut arguments.</param>
        </member>
        <member name="T:WixSharp.EnvironmentVariable">
             <summary>
             Defines FileType association to be created for the file extension and the installed file/application (parent  <see cref="T:WixSharp.File"/>).
             </summary>
            <example>The following is an example of associating file extension ".my" with installed application MyViewer.exe.
            <code>
             var project =
                 new Project("My Product",
                     new Dir(@"%ProgramFiles%\My Company\My Product",
                         new Dir(@"Notepad",
                             new File("MyViewer.exe",
                                 new FileAssociation("my", "application/my", "open", "\"%1\"")))),
                     new EnvironmentVariable("MYPRODUCT_DIR", "[INSTALLDIR]"),
                     new EnvironmentVariable("PATH", "[INSTALLDIR]") { Part = EnvVarPart.last });
                     ...
            
             Compiler.BuildMsi(project);
             </code>
             </example>
        </member>
        <member name="M:WixSharp.EnvironmentVariable.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.EnvironmentVariable"/> class.
            </summary>
            <param name="name">The name of the environment variable.</param>
            <param name="value">The value of the environment variable.</param>
        </member>
        <member name="M:WixSharp.EnvironmentVariable.#ctor(WixSharp.Id,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.EnvironmentVariable"/> class.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.EnvironmentVariable"/> instance.</param>
            <param name="name">The name of the environment variable.</param>
            <param name="value">The value of the environment variable.</param>
        </member>
        <member name="M:WixSharp.EnvironmentVariable.#ctor(WixSharp.Feature,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.EnvironmentVariable"/> class.
            </summary>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the environment variable should be included in.</param>
            <param name="name">The name of the environment variable.</param>
            <param name="value">The value of the environment variable.</param>
        </member>
        <member name="M:WixSharp.EnvironmentVariable.#ctor(WixSharp.Id,WixSharp.Feature,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.EnvironmentVariable"/> class.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.EnvironmentVariable"/> instance.</param>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the environment variable should be included in.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:WixSharp.EnvironmentVariable.System">
            <summary>
            Specifies that the environment variable should be added to the system environment space. The default is 'no' which
            indicates the environment variable is added to the user environment space.
            </summary>
        </member>
        <member name="F:WixSharp.EnvironmentVariable.Permanent">
            <summary>
            Specifies that the environment variable should not be removed on uninstall.
            </summary>
        </member>
        <member name="F:WixSharp.EnvironmentVariable.Value">
            <summary>
            The value to set into the environment variable. If this attribute is not set, the environment variable is removed
            during installation if it exists on the machine.
            </summary>
        </member>
        <member name="F:WixSharp.EnvironmentVariable.Action">
            <summary>
            Specifies whether the environmental variable should be created, set or removed when the parent component is installed. <see cref="T:WixSharp.EnvironmentVariable.Action"/>.
            </summary>
        </member>
        <member name="F:WixSharp.EnvironmentVariable.Part">
            <summary>
            Indicates how value should be set.
            </summary>
        </member>
        <member name="F:WixSharp.EnvironmentVariable.Condition">
            <summary>
            Defines the installation <see cref="F:WixSharp.EnvironmentVariable.Condition"/>, which is to be checked during the installation to
            determine if the registry value should be created on the target system.
            </summary>
        </member>
        <member name="M:WixSharp.EnvironmentVariable.ToXml">
            <summary>
            Emits the XML.
            </summary>
        </member>
        <member name="T:WixSharp.FileAssociation">
             <summary>
             Defines FileType association to be created for the file extension and the installed file/application (parent  <see cref="T:WixSharp.File"/>).
             </summary>
            <example>The following is an example of associating file extension ".my" with installed application MyViewer.exe.
            <code>
             var project = 
                 new Project("My Product",
                     new Dir(@"%ProgramFiles%\My Company\My Product",
                         new Dir(@"Notepad",
                             new File("MyViewer.exe",
                                 new FileAssociation("my", "application/my", "open", "\"%1\"")))));  
                     ...
                     
             Compiler.BuildMsi(project);
             </code>
             </example>
        </member>
        <member name="M:WixSharp.FileAssociation.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.FileAssociation"/> class.
            </summary>
            <param name="extension">The file extension, like "doc" or "xml". Do not include the preceding period.</param>
            <param name="contentType">The MIME type that is to be written (e.g. <c>application/notepad)</c>.</param>
            <param name="command">The localized text displayed on the context menu (e.g. <c>Open</c>).</param>
            <param name="commandArguments">Value for the command arguments (e.g. <c>"%1"</c>).</param>
        </member>
        <member name="M:WixSharp.FileAssociation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.FileAssociation"/> class.
            </summary>
            <param name="extension">The file extension, like "doc" or "xml". Do not include the preceding period.</param>
        </member>
        <member name="P:WixSharp.FileAssociation.Extension">
            <summary>
            This is simply the file extension, like "doc" or "xml". Do not include the preceding period.
            </summary>
            <value>The extension.</value>
        </member>
        <member name="F:WixSharp.FileAssociation.Command">
            <summary>
            The localized text displayed on the context menu. The default is <c>Open</c>.
            </summary>
        </member>
        <member name="F:WixSharp.FileAssociation.Arguments">
            <summary>
            Value for the command arguments.  The default is <c>"%1"</c>.
            </summary>
        </member>
        <member name="F:WixSharp.FileAssociation.SequenceNo">
            <summary>
            The sequence of the commands. Only <see cref="T:WixSharp.FileAssociation"/> for which the SequenceNo is specified are 
            used to prepare an ordered list for the default value of the shell key. 
            The <see cref="T:WixSharp.FileAssociation"/> with the lowest value in this column becomes the default <see cref="T:WixSharp.FileAssociation"/>. 
            Used only for Advertised <see cref="T:WixSharp.FileAssociation"/>.
            </summary>
        </member>
        <member name="F:WixSharp.FileAssociation.Description">
            <summary>
            Optional localizable description of the <see cref="T:WixSharp.FileAssociation"/>.
            </summary>
        </member>
        <member name="F:WixSharp.FileAssociation.Icon">
            <summary>
            Reference to <c>Icon</c> element to be used to install the file association <c>DefaultIcon</c>. If the value is not set, Wix# compiler will use the <c>Id</c> of the <c>File</c> element of the parent component.<see cref="T:WixSharp.FileAssociation"/>.
            <para>Set this value to <c>null</c> if you do not want to install <c>DefaultIcon</c> at all.</para>
            </summary>
        </member>
        <member name="F:WixSharp.FileAssociation.IconIndex">
            <summary>
            The zero-based index of the icon associated with this ProgId. The default value is <c>0</c>. 
            </summary>
        </member>
        <member name="F:WixSharp.FileAssociation.ContentType">
            <summary>
            The MIME type that is to be written. The default is <c>application/[extension]</c>.
            </summary>
        </member>
        <member name="F:WixSharp.FileAssociation.Advertise">
            <summary>
            Whether this extension is to be advertised. The default is <c>false</c>.
            </summary>
        </member>
        <member name="T:WixSharp.FileShortcut">
            <summary>
            Defines <see cref="T:WixSharp.FileShortcut"/> to be installed.
            <para>
            <see cref="T:WixSharp.FileShortcut"/> is a specialized version of the <see cref="T:WixSharp.Shortcut"/> designed 
            for using <see cref="T:WixSharp.Shortcut"/> as a <see cref="T:WixSharp.File"/> nested element.
            </para>
            <para>There are different ways of defining shortcuts of the Wix# project: </para>
            <para> - It can be specified as a nested element of the <see cref="T:WixSharp.File"/>. In this case, after 
            the installation, the shortcut will point to the file it belongs to.</para>
            <para> - Alternatively the <c>Shortcut</c> can be specified as a <see cref="T:WixSharp.File"/> nested 
            element. In this case after the installation the shortcut will point to the file 
            will point to the file it belongs to.</para>
            </summary>
            
            <example>
            The following is an example of installing <c>MyApp.exe</c> file with the corresponding 
            shortcuts in on <c>Desktop</c> and <c>Program Menu</c>.
            <code>
            var project = 
                new Project("My Product",
                
                    new Dir(@"%ProgramFiles%\My Company\My Product",
                    
                        new File(binaries, @"AppFiles\MyApp.exe",
                            new FileShortcut("MyApp", @"%ProgramMenu%\My Company\My Product"),
                            new FileShortcut("MyApp", @"%Desktop%")),
                            
                    ...
                    
            Compiler.BuildMsi(project);
            </code>
            </example>
        </member>
        <member name="M:WixSharp.FileShortcut.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.FileShortcut"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.FileShortcut.#ctor(WixSharp.Id,WixSharp.Feature,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.FileShortcut"/> class with properties/fields initialized with specified parameters.
            <para>This constructor should be used to instantiate shortcuts, which belong to the <see cref="T:WixSharp.File"/> element.</para>
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.FileShortcut"/> instance.</param>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the shortcut should be included in.</param>
            <param name="location">The directory where the shortcut should be installed.</param>
        </member>
        <member name="M:WixSharp.FileShortcut.#ctor(WixSharp.Feature,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.FileShortcut"/> class with properties/fields initialized with specified parameters.
            <para>This constructor should be used to instantiate shortcuts, which belong to the <see cref="T:WixSharp.File"/> element.</para>
            </summary>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the shortcut should be included in.</param>
            <param name="location">The directory where the shortcut should be installed.</param>
        </member>
        <member name="M:WixSharp.FileShortcut.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.FileShortcut"/> class with properties/fields initialized with specified parameters.
            <para>This constructor should be used to instantiate shortcuts, which belong to the <see cref="T:WixSharp.File"/> element.</para>
            </summary>
            <param name="name">The name of the shortcut to be installed.</param>
            <param name="location">The directory where the shortcut should be installed.</param>
        </member>
        <member name="P:WixSharp.FileShortcut.Condition">
            <summary>
            Inherited member, which you should not use as the WiX Shortcut element doesn't support Condition.
            </summary>
        </member>
        <member name="M:WixSharp.FileShortcut.#ctor(WixSharp.Id,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.FileShortcut"/> class with properties/fields initialized with specified parameters.
            <para>This constructor should be used to instantiate shortcuts, which belong to the <see cref="T:WixSharp.File"/> element.</para>
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.FileShortcut"/> instance.</param>
            <param name="name">The name of the shortcut to be installed.</param>
            <param name="location">The directory where the shortcut should be installed.</param>
        </member>
        <member name="M:WixSharp.FileShortcut.#ctor(WixSharp.Feature,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.FileShortcut"/> class with properties/fields initialized with specified parameters.
            <para>This constructor should be used to instantiate shortcuts, which belong to the <see cref="T:WixSharp.File"/> element.</para>
            </summary>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the shortcut should be included in.</param>
            <param name="name">The name of the shortcut to be installed.</param>
            <param name="location">The directory where the shortcut should be installed.</param>
        </member>
        <member name="M:WixSharp.FileShortcut.#ctor(WixSharp.Id,WixSharp.Feature,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.FileShortcut"/> class with properties/fields initialized with specified parameters.
            <para>This constructor should be used to instantiate shortcuts, which belong to the <see cref="T:WixSharp.File"/> element.</para>
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.FileShortcut"/> instance.</param>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the shortcut should be included in.</param>
            <param name="name">The name of the shortcut to be installed.</param>
            <param name="location">The directory where the shortcut should be installed.</param>
        </member>
        <member name="T:WixSharp.LaunchCondition">
             <summary>
             Defines WiX <c>Condition</c>. <c>Condition</c> is normally associated with <c>CustomActions</c> or WiX elements (e.g. <c>Shortcut</c>).
             <para>
             <see cref="T:WixSharp.Condition"/> is nothing else but an XML friendly string wrapper, containing
             some predefined (commonly used) condition values. You can either use one of the
             predefined condition values (static members) or define your by specifying full string representation of
             the required WiX condition when calling the constructor or static method <c>Create</c>.
             </para>
             </summary>
             <example>The following is an example of initializing the Shortcut.<see cref="F:WixSharp.Shortcut.Condition"/>
             with custom value <c>INSTALLDESKTOPSHORTCUT="yes"</c> and
             the InstalledFileAction.<see cref="T:WixSharp.InstalledFileAction.Condition"/> with perefined value <c>NOT_Installed</c>:
             <code>
             var project =
                 new Project("My Product",
                 ...
                 new Dir(@"%Desktop%",
                     new WixSharp.Shortcut("MyApp", "[INSTALL_DIR]MyApp.exe", "")
                     {
                        Condition = new Condition("INSTALLDESKTOPSHORTCUT=\"yes\"")
                     }),
            
                 new InstalledFileAction("MyApp.exe", "",
                                          Return.check,
                                          When.After,
                                          Step.InstallFinalize,
                                          Condition.NOT_Installed),
                     ...
            
             </code>
             </example>
        </member>
        <member name="M:WixSharp.LaunchCondition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.LaunchCondition"/> class.
            It is made protected to encourage user to use non-default constructor to handle Escape Characters
            of the <c>value</c> string properly.
            </summary>
        </member>
        <member name="M:WixSharp.LaunchCondition.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.LaunchCondition"/> class with properties/fields initialized with specified parameters
            </summary>
            <param name="value">The value of the WiX condition expression.</param>
            <param name="message">The message to be displayed during the installation if <see cref="T:WixSharp.LaunchCondition"/> evaluated as <c>False</c>.</param>
        </member>
        <member name="M:WixSharp.LaunchCondition.ToString">
            <summary>
             Returns the WiX <c>LaunchCondition</c> as a string.
            </summary>
            <returns>A string representing the condition.</returns>
        </member>
        <member name="M:WixSharp.LaunchCondition.ToCData">
            <summary>
             Returns the WiX <c>Condition</c> as a <see cref="T:System.Xml.Linq.XCData"/>.
             <remarks> Normally <c>Condition</c> is not designed to be parsed by the XML parser thus it should be embedded as CDATA</remarks>
            <code>
            &lt;Condition&gt;&lt;![CDATA[NETFRAMEWORK20="#0"]]&gt;&lt;/Condition&gt;
            </code>
            </summary>
            <returns>A CDATA string representing the condition.</returns>
        </member>
        <member name="F:WixSharp.LaunchCondition.Value">
            <summary>
            String value of WiX <c>Condition</c>.
            </summary>
        </member>
        <member name="F:WixSharp.LaunchCondition.Message">
            <summary>
            The message to be displayed during the installation if <see cref="T:WixSharp.LaunchCondition"/> evaluated as <c>False</c>.
            </summary>
        </member>
        <member name="T:WixSharp.IProgressDialog">
            <summary>
            Interface of a typical UI dialog for reflecting the installation progress. It is functionally a typical
            <see cref="T:WixSharp.IManagedDialog"/> except that it initiates the MSI execution by calling
            <see cref="T:WixSharp.IManagedUIShell.StartExecute"/> on loading the dialog. ManagedUI dialogs sequence
            should have only a single dialog of this type.
            </summary>
        </member>
        <member name="T:WixSharp.IManagedDialog">
            <summary>
            Interface of a typical UI dialog managed by shell (the main window) of the MSI external/embedded UI.
            </summary>
        </member>
        <member name="P:WixSharp.IManagedDialog.Shell">
            <summary>
            Gets or sets the UI shell (main UI window). This property is set the ManagedUI runtime (IManagedUI).
            On the other hand it is consumed (accessed) by the UI dialog (IManagedDialog).
            </summary>
            <value>
            The shell.
            </value>
        </member>
        <member name="M:WixSharp.IManagedDialog.ProcessMessage(Microsoft.Deployment.WindowsInstaller.InstallMessage,Microsoft.Deployment.WindowsInstaller.Record,Microsoft.Deployment.WindowsInstaller.MessageButtons,Microsoft.Deployment.WindowsInstaller.MessageIcon,Microsoft.Deployment.WindowsInstaller.MessageDefaultButton)">
            <summary>
            Processes information and progress messages sent to the user interface.
            <para> This method directly mapped to the
            <see cref="T:Microsoft.Deployment.WindowsInstaller.IEmbeddedUI.ProcessMessage"/>.</para>
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="messageRecord">The message record.</param>
            <param name="buttons">The buttons.</param>
            <param name="icon">The icon.</param>
            <param name="defaultButton">The default button.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.IManagedDialog.OnExecuteComplete">
            <summary>
            Called when MSI execution is complete.
            </summary>
        </member>
        <member name="M:WixSharp.IManagedDialog.OnExecuteStarted">
            <summary>
            Called when MSI execute started.
            </summary>
        </member>
        <member name="M:WixSharp.IManagedDialog.OnProgress(System.Int32)">
            <summary>
            Called when MSI execution progress is changed.
            </summary>
            <param name="progressPercentage">The progress percentage.</param>
        </member>
        <member name="T:WixSharp.IShellView">
            <summary>
            The interface representing main window of the embedded UI.
            </summary>
        </member>
        <member name="M:WixSharp.IShellView.SetSize(System.Int32,System.Int32)">
            <summary>
            Sets the size of the main window of the embedded UI.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="E:WixSharp.IShellView.OnCurrentDialogChanged">
            <summary>
            Occurs when on current dialog changed (e.g. because of 'Next' navigation).
            </summary>
        </member>
        <member name="P:WixSharp.IShellView.CurrentDialog">
            <summary>
            Gets the current dialog of the UI sequence.
            </summary>
            <value>The current dialog.</value>
        </member>
        <member name="T:WixSharp.IManagedUIShell">
            <summary>
            Interface of the main window implementation of the MSI external/embedded UI. This interface is designed to be
            used by the Wix#/MSI UI dialogs. It is the interface that is directly available for all UI dialogs and it
            allows the dialogs accessing the MSI runtime context.
            </summary>
        </member>
        <member name="P:WixSharp.IManagedUIShell.RuntimeContext">
            <summary>
            Gets the runtime context object. Typically this object is of the <see cref="T:WixSharp.MsiRuntime"/> type.
            </summary>
            <value>
            The runtime context.
            </value>
        </member>
        <member name="P:WixSharp.IManagedUIShell.Log">
            <summary>
            Gets the MSI log text.
            </summary>
            <value>
            The log.
            </value>
        </member>
        <member name="P:WixSharp.IManagedUIShell.UserInterrupted">
            <summary>
            Gets a value indicating whether the MSI session was interrupted (canceled) by user.
            </summary>
            <value>
              <c>true</c> if it was user interrupted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WixSharp.IManagedUIShell.Errors">
            <summary>
            Gets the MSI installation errors.
            </summary>
            <value>
            The errors.
            </value>
        </member>
        <member name="P:WixSharp.IManagedUIShell.ErrorDetected">
            <summary>
            Gets a value indicating whether MSI session ended with error.
            </summary>
            <value>
              <c>true</c> if error was detected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WixSharp.IManagedUIShell.Dialogs">
            <summary>
            Gets the sequence of the UI dialogs specific for the current setup type (e.g. install vs. modify).
            </summary>
            <value>
            The dialogs.
            </value>
        </member>
        <member name="M:WixSharp.IManagedUIShell.GoNext">
            <summary>
            Proceeds to the next UI dialog.
            </summary>
        </member>
        <member name="M:WixSharp.IManagedUIShell.GoPrev">
            <summary>
            Moves to the previous UI Dialog.
            </summary>
        </member>
        <member name="M:WixSharp.IManagedUIShell.GoTo(System.Int32)">
            <summary>
            Moves to the UI Dialog by the specified index in the <see cref="T:WixSharp.IManagedUIShell.Dialogs"/> sequence.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:WixSharp.IManagedUIShell.GoTo``1">
            <summary>
            Moves to the UI Dialog by the specified index in the <see cref="T:WixSharp.IManagedUIShell.Dialogs"/> sequence.
            </summary>
        </member>
        <member name="M:WixSharp.IManagedUIShell.Cancel">
            <summary>
            Cancels the MSI installation.
            </summary>
        </member>
        <member name="M:WixSharp.IManagedUIShell.Exit">
            <summary>
            Exits this MSI UI application.
            </summary>
        </member>
        <member name="M:WixSharp.IManagedUIShell.StartExecute">
            <summary>
            Starts the execution of the MSI installation.
            </summary>
        </member>
        <member name="P:WixSharp.IManagedUIShell.IsDemoMode">
            <summary>
            Gets or sets a value indicating whether this instance is demo mode.
            </summary>
            <value>
            <c>true</c> if this instance is demo mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WixSharp.IManagedUI">
            <summary>
            Interface for an embedded external user interface implementing Wix# ManagedUI architecture (ManagedUI runtime).
            <para>The interface itself is reasonable simple and it basically implements the
            collection/sequence of the runtime UI dialogs with a couple of methods for integrating the ManagedUI
            with the MSI.</para>
            </summary>
        </member>
        <member name="P:WixSharp.IManagedUI.InstallDirId">
            <summary>
            Gets or sets the id of the 'installdir' (destination folder) directory. It is the directory,
            which is bound to the input UI elements of the Browse dialog (e.g. WiX BrowseDlg, Wix# InstallDirDialog).
            </summary>
            <value>
            The install dir identifier.
            </value>
        </member>
        <member name="P:WixSharp.IManagedUI.Icon">
            <summary>
            A window icon that appears in the left top corner of the UI shell window.
            </summary>
        </member>
        <member name="P:WixSharp.IManagedUI.InstallDialogs">
            <summary>
            Sequence of the dialogs to be displayed during the installation of the product.
            </summary>
        </member>
        <member name="P:WixSharp.IManagedUI.ModifyDialogs">
            <summary>
            Sequence of the dialogs to be displayed during the customization of the installed product.
            </summary>
        </member>
        <member name="M:WixSharp.IManagedUI.BeforeBuild(WixSharp.ManagedProject)">
            <summary>
            This method is called (indirectly) by Wix# compiler just before building the MSI. It allows embedding UI specific resources (e.g. license file, properties)
            into the MSI.
            </summary>
            <param name="project">The project.</param>
        </member>
        <member name="T:WixSharp.ManagedDialogs">
            <summary>
            Customized version of 'List&lt;Type&gt;', containing Fluent extension methods
            </summary>
        </member>
        <member name="M:WixSharp.ManagedDialogs.Add``1">
            <summary>
            Adds an typeof(T) object to the end of the collections.
            </summary>
            <typeparam name="T">Type implementing ManagedUI dialog</typeparam>
            <returns></returns>
        </member>
        <member name="M:WixSharp.ManagedDialogs.Add(System.Type)">
            <summary>
            Adds an Type object to the end of the collections.
            </summary>
            <param name="type">Type implementing ManagedUI dialog.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.ManagedDialogs.Clear">
            <summary>
            Clears the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WixSharp.ManagedProjectActions">
             <summary>
            
             </summary>
        </member>
        <member name="M:WixSharp.ManagedProjectActions.WixSharp_InitRuntime_Action(Microsoft.Deployment.WindowsInstaller.Session)">
            <summary>
            Internal ManagedProject action. It must be public for the DTF accessibility but it is not to be used by the user/developer.
            </summary>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.ManagedProjectActions.WixSharp_Load_Action(Microsoft.Deployment.WindowsInstaller.Session)">
            <summary>
            Internal ManagedProject action. It must be public for the DTF accessibility but it is not to be used by the user/developer.
            </summary>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.ManagedProjectActions.WixSharp_BeforeInstall_Action(Microsoft.Deployment.WindowsInstaller.Session)">
            <summary>
            Internal ManagedProject action. It must be public for the DTF accessibility but it is not to be used by the user/developer.
            </summary>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.ManagedProjectActions.WixSharp_AfterInstall_Action(Microsoft.Deployment.WindowsInstaller.Session)">
            <summary>
            Internal ManagedProject action. It must be public for the DTF accessibility but it is not to be used by the user/developer.
            </summary>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.ManagedProjectActions.CancelRequestHandler(Microsoft.Deployment.WindowsInstaller.Session)">
            <summary>
            Internal ManagedProject action. It must be public for the DTF accessibility but it is not to be used by the user/developer.
            </summary>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="T:WixSharp.ManagedProject">
             <summary>
             Extends <see cref="T:WixSharp.Project"/> with runtime event-driven behavior ans managed UI (see <see cref="T:WixSharp.ManagedUI"/> and
             <see cref="T:WixSharp.UI.Forms.ManagedForm"/>).
             <para>
             The managed project has three very important events that are raised during deployment at run: Load/BeforeInstall/AfterInstall.
             </para>
             <remark>
             ManagedProject still maintains backward compatibility for the all older features. That is why it is important to distinguish the use cases
             associated with the project class members dedicated to the same problem domain but resolving the problems in different ways:
             <para><c>UI support</c></para>
             <para>   project.UI - to be used to define native MSI/WiX UI.</para>
             <para>   project.CustomUI - to be used for minor to customization of native MSI/WiX UI and injection of CLR dialogs. </para>
             <para>   project.ManagedUI - to be used to define managed Embedded UI. It allows full customization of the UI</para>
             <para> </para>
             <para><c>Events</c></para>
             <para>   project.WixSourceGenerated</para>
             <para>   project.WixSourceFormated</para>
             <para>   project.WixSourceSaved - to be used at compile time to customize WiX source code (XML) generation.</para>
             <para> </para>
             <para>   project.Load</para>
             <para>   project.BeforeInstall</para>
             <para>   project.AfterInstall - to be used at runtime (msi execution) to customize deployment behaver.</para>
             </remark>
             </summary>
             <example>The following is an example of a simple setup handling the three setup events at runtime.
             <code>
             var project = new ManagedProject("ManagedSetup",
                               new Dir(@"%ProgramFiles%\My Company\My Product",
                                   new File(@"..\Files\bin\MyApp.exe")));
            
             project.GUID = new Guid("6f330b47-2577-43ad-9095-1861ba25889b");
            
             project.ManagedUI = ManagedUI.Empty;
            
             project.Load += project_Load;
             project.BeforeInstall += project_BeforeInstall;
             project.AfterInstall += project_AfterInstall;
            
             project.BuildMsi();
             </code>
             </example>
        </member>
        <member name="M:WixSharp.ManagedProject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ManagedProject"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.ManagedProject.#ctor(System.String,WixSharp.WixObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ManagedProject"/> class.
            </summary>
            <param name="name">The name of the project. Typically it is the name of the product to be installed.</param>
            <param name="items">The project installable items (e.g. directories, files, registry keys, Custom Actions).</param>
        </member>
        <member name="P:WixSharp.ManagedProject.MinimalCustomDrawing">
            <summary>
            Gets or sets a value indicating whether the full or reduced custom drawing algorithm should be used for rendering the Features dialog
            tree view control. The reduced algorithm involves no manual positioning of the visual elements so it handles better custom screen resolutions.
            However it also leads to the slightly less intuitive tree view item appearance.
            <para>Reduced custom drawing will render disabled tree view items with the text grayed out.</para>
            <para>Full custom drawing will render disabled tree view items with the checkbox grayed out.</para>
            </summary>
            <value>
            <c>true</c> (default) if custom drawing should be reduced otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WixSharp.ManagedProject.SetupEventHandler">
            <summary>
            Event handler of the ManagedSetup for the MSI runtime events.
            </summary>
            <param name="e">The <see cref="T:WixSharp.SetupEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:WixSharp.ManagedProject.AbortSetupOnUnhandledExceptions">
            <summary>
            Indicates if the installations should be aborted if managed event handler throws an unhanded exception.
            <para>
            Aborting is the default behavior if this field is not set.
            </para>
            </summary>
        </member>
        <member name="E:WixSharp.ManagedProject.UIInitialized">
            <summary>
            Occurs on EmbeddedUI initialized but before the first dialog is displayed. It is only invoked if ManagedUI is set.
            </summary>
        </member>
        <member name="E:WixSharp.ManagedProject.UILoaded">
            <summary>
            Occurs on EmbeddedUI loaded and ShellView (main window) is displayed but before first dialog is positioned within ShellView.
            It is only invoked if ManagedUI is set.
            <para>Note that this event is fired on the loading the UI main window thus it's not a good stage for any decision regarding
            aborting/continuing the whole setup process. That is UILoaded event will ignore any value set to SetupEventArgs.Result by the user.
            </para>
            </summary>
        </member>
        <member name="E:WixSharp.ManagedProject.Load">
            <summary>
            Occurs before AppSearch standard action.
            </summary>
        </member>
        <member name="E:WixSharp.ManagedProject.BeforeInstall">
            <summary>
            Occurs before InstallFiles standard action.
            </summary>
        </member>
        <member name="E:WixSharp.ManagedProject.AfterInstall">
            <summary>
            Occurs after InstallFiles standard action. The event is fired from the elevated execution context.
            </summary>
        </member>
        <member name="F:WixSharp.ManagedProject.ManagedUI">
            <summary>
            An instance of ManagedUI defining MSI UI dialogs sequence. User should set it if he/she wants native MSI dialogs to be
            replaced by managed ones.
            </summary>
        </member>
        <member name="P:WixSharp.ManagedProject.DefaultDeferredProperties">
            <summary>
            The default properties mapped for use with the deferred custom actions. See <see cref="F:WixSharp.ManagedAction.UsesProperties"/> for the details.
            <para>The default value is "INSTALLDIR,UILevel"</para>
            </summary>
        </member>
        <member name="F:WixSharp.ManagedProject.AlwaysScheduleInitRuntime">
            <summary>
            Flags that indicates if <c>WixSharp_InitRuntime_Action</c> custom action should be always scheduled. The default value is <c>true</c>.
            <para><c>WixSharp_InitRuntime_Action</c> is the action, which ManagedSetup performs at startup (before AppSearch).
            In this action the most important MSI properties are pushed into Session.CustomActionData. These properties are typically consumed
            from other custom actions (e.g. Project.AfterInstall event) and they are:
            <list type="bullet">
            <item><description>Installed</description></item>
            <item><description>REMOVE</description></item>
            <item><description>ProductName</description></item>
            <item><description>REINSTALL</description></item>
            <item><description>UPGRADINGPRODUCTCODE</description></item>
            <item><description>UILevel</description></item>
            <item><description>WIXSHARP_MANAGED_UI</description></item>
            </list>
            </para>
            <para>However in same cases (e.g. oversizes msi file) it is desirable to minimize amount of time the msi loaded into memory
            (e.g. by custom actions). Thus setting AlwaysScheduleInitRuntime to <c>false</c> will prevent scheduling <c>WixSharp_InitRuntime_Action</c>
            unless any of the ManagedProject events (e.g. Project.AfterInstall) has user handler assigned.
            </para>
            </summary>
        </member>
        <member name="M:WixSharp.ManagedProject.ReadDialogs(System.String)">
            <summary>
            Reads and returns the dialog types from the string definition. This method is to be used by WixSharp assembly.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="T:WixSharp.SetupEventArgs">
             <summary>
            
             </summary>
        </member>
        <member name="T:WixSharp.SetupEventArgs.SetupMode">
             <summary>
            
             </summary>
        </member>
        <member name="F:WixSharp.SetupEventArgs.SetupMode.Installing">
            <summary>
            The installing mode
            </summary>
        </member>
        <member name="F:WixSharp.SetupEventArgs.SetupMode.Modifying">
            <summary>
            The modifying mode
            </summary>
        </member>
        <member name="F:WixSharp.SetupEventArgs.SetupMode.Uninstalling">
            <summary>
            The uninstalling mode
            </summary>
        </member>
        <member name="F:WixSharp.SetupEventArgs.SetupMode.Reparing">
            <summary>
            The repairing mode
            </summary>
        </member>
        <member name="F:WixSharp.SetupEventArgs.SetupMode.Unknown">
            <summary>
            The unknown mode
            </summary>
        </member>
        <member name="P:WixSharp.SetupEventArgs.Session">
            <summary>
            Gets or sets the session.
            </summary>
            <value>
            The session.
            </value>
        </member>
        <member name="P:WixSharp.SetupEventArgs.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="P:WixSharp.SetupEventArgs.ProductName">
            <summary>
            Gets name of the product being installed
            </summary>
        </member>
        <member name="P:WixSharp.SetupEventArgs.IsUISupressed">
            <summary>
            Gets a value indicating whether Authored UI and wizard dialog boxes suppressed.
            </summary>
            <value>
            <c>true</c> if UI is suppressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WixSharp.SetupEventArgs.UILevel">
            <summary>
            Gets the UIlevel.
            <para>UILevel > 4 lead to displaying modal dialogs. See https://msdn.microsoft.com/en-us/library/aa369487(v=vs.85).aspx. </para>
            </summary>
            <value>
            The UI level.
            </value>
        </member>
        <member name="P:WixSharp.SetupEventArgs.ManagedUIShell">
            <summary>
            The managed UI main window object. It is a main System.Windows.Forms.Form window of the standard Wix# embedded UI.
            <para>This member is only populated when it is handled by the <see cref="T:WixSharp.ManagedProject.UILoaded"/> event handler.
            It has the default <c>null</c> value for all other events.</para>
            </summary>
        </member>
        <member name="F:WixSharp.SetupEventArgs.ManagedUI">
            <summary>
            The managed UI main window object. It is a main System.Windows.Forms.Form window of the standard Wix# embedded UI.
            <para>This member is only populated when it is handled by the <see cref="T:WixSharp.ManagedProject.UILoaded"/> event handler.
            It has the default <c>null</c> value for all other events.</para>
            </summary>
        </member>
        <member name="P:WixSharp.SetupEventArgs.IsElevated">
            <summary>
            Gets a value indicating whether the event handler is executed from the elevated context.
            </summary>
            <value>
            <c>true</c> if the execution context is elevated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WixSharp.SetupEventArgs.IsInstalled">
            <summary>
            Gets a value indicating whether the product is installed.
            </summary>
            <value>
            <c>true</c> if the product is installed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WixSharp.SetupEventArgs.IsInstalling">
            <summary>
            Gets a value indicating whether the product is being installed.
            </summary>
            <value>
            <c>true</c> if installing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WixSharp.SetupEventArgs.IsModifying">
            <summary>
            Gets a value indicating whether the installed product is being modified.
            </summary>
            <value>
            <c>true</c> if modifying; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WixSharp.SetupEventArgs.IsUpgrading">
            <summary>
            Gets a value indicating whether the installed product is being upgraded.
            <para>
            This property relies on "UPGRADINGPRODUCTCODE" MSI property, which is not set by MSI until previous version is uninstalled. Thus it may not be the
            most practical way of detecting upgrades. Use AppSearch.GetProductVersionFromUpgradeCode as a more reliable alternative.
            </para>
            </summary>
            <value>
            <c>true</c> if modifying; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WixSharp.SetupEventArgs.IsRepairing">
            <summary>
            Gets a value indicating whether the installed product is being repaired.
            </summary>
            <value>
            <c>true</c> if repairing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WixSharp.SetupEventArgs.IsUninstalling">
            <summary>
            Gets a value indicating whether the installed product is being uninstalled.
            </summary>
            <value>
            <c>true</c> if uninstalling; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WixSharp.SetupEventArgs.ModifyAction">
            <summary>
            Gets the action name from the standard Change/Modify dialog. The action is stored in <c>MODIFY_ACTION</c>
            session property. And it can be one of these predefined values: Change, Repair or Remove.
            <para>Note this value is set only by ManagedUI Maintenance dialog.</para>
            </summary>
            <value>The modify action.</value>
        </member>
        <member name="P:WixSharp.SetupEventArgs.MsiFile">
            <summary>
            Gets the msi file location.
            </summary>
            <value>
            The msi file.
            </value>
        </member>
        <member name="P:WixSharp.SetupEventArgs.Mode">
            <summary>
            Gets the setup mode.
            </summary>
            <value>
            The mode.
            </value>
        </member>
        <member name="P:WixSharp.SetupEventArgs.InstallDir">
            <summary>
            Gets or sets the install directory.
            </summary>
            <value>
            The install dir.
            </value>
        </member>
        <member name="P:WixSharp.SetupEventArgs.IsManagedUISession">
            <summary>
            Gets a value indicating whether this session is started via ManagedUI.
            </summary>
            <value>
            <c>true</c> if this session is a managed UI session; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WixSharp.SetupEventArgs.ManagedUIHandle">
            <summary>
            Gets the ManagedUI window handle.
            </summary>
            <value>The window handle.</value>
        </member>
        <member name="P:WixSharp.SetupEventArgs.UpgradingProductCode">
            <summary>
            Gets the upgrading product code. Note this property is normally set by MSI for the
            uninstall session being triggered by upgrading to a higher version.
            </summary>
            <value>The upgrading product code.</value>
        </member>
        <member name="P:WixSharp.SetupEventArgs.ProductCode">
            <summary>
            Gets the product code.
            </summary>
            <value>
            The product code.
            </value>
        </member>
        <member name="P:WixSharp.SetupEventArgs.UpgradeCode">
            <summary>
            Gets the upgrade code.
            </summary>
            <value>
            The upgrade code.
            </value>
        </member>
        <member name="P:WixSharp.SetupEventArgs.Data">
            <summary>
            Gets or sets the Data.
            <para>Data is a free form data storage for custom user defined and Wix# generated settings. In a way it's an
            alternative to the MSI session properties. The Data interface is identical to the Session properties -
            string dictionary. Though a very important difference is that Data (as opposite to session) does maintain
            the all entries during the whole MSI session. Even for the deferred action.</para>
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="M:WixSharp.SetupEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.SetupEventArgs"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.SetupEventArgs.SaveData">
            <summary>
            Saves the user data.
            </summary>
        </member>
        <member name="T:WixSharp.SetupEventArgs.AppData">
             <summary>
            Class that encapsulated parsing of the CustomActionData content
             </summary>
        </member>
        <member name="M:WixSharp.SetupEventArgs.AppData.InitFrom(System.String)">
            <summary>
            Initializes from string.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:WixSharp.SetupEventArgs.AppData.InitFrom(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes from dictionary.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:WixSharp.SetupEventArgs.AppData.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:WixSharp.SetupEventArgs.AppData.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.SetupEventArgs.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:WixSharp.Merge">
             <summary>
             Defines MergeModule to be embedded into MSI.
             <para>
             Note that WiX syntax allows Merge element to belong to the Product element. However the documentation (WiX v3.0.4917.0) explicitly requires
             it to be nested inside of the Directory element (even if there is no neither technical nor logical reason for this). Thus Wix# simply follows
             the WiX convention.
             </para>
             </summary>
            
            <example>The following is an example of using <c>MyMergeModule.msm</c> file.
            <code>
             var project =
                new Project("MyMergeModule",
                    new Dir(@"%ProgramFiles%\My Company",
                        new Merge("MyMergeModule.msm")));,
            
                     ...
            
             Compiler.BuildMsi(project);
             </code>
             </example>
        </member>
        <member name="M:WixSharp.Merge.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Merge"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.Merge.#ctor(System.String)">
            <summary>
            Creates instance of the <see cref="T:WixSharp.Merge"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="sourceFile">Relative path to the msm file to be taken for building the MSI.</param>
        </member>
        <member name="M:WixSharp.Merge.#ctor(WixSharp.Feature,System.String)">
            <summary>
            Creates instance of the <see cref="T:WixSharp.Merge"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the msm should be included in.</param>
            <param name="sourceFile">Relative path to the msm file to be taken for building the MSI.</param>
        </member>
        <member name="F:WixSharp.Merge.FileCompression">
            <summary>
            Specifies if the files in the merge module should be compressed.
            </summary>
        </member>
        <member name="F:WixSharp.Merge.SourceFile">
            <summary>
            Path to the merge module file.
            </summary>
        </member>
        <member name="T:WixSharp.NativeBootstrapper">
            <summary>
            Defines native (un-managed) bootstrapper. The primary usage of <see cref="T:WixSharp.NativeBootstrapper"/> is to build bootstrappers for automatically installing .NET 
            for executing MSIs containing managed Custom Actions (<see cref="T:WixSharp.ManagedAction"/>).
            <para></para>
            <remarks>
            NativeBootstrapper is subject to the following limitations:
            <list type="bullet">
            <item><description>Only Win32 native bootstrapper can be built.</description></item>
            <item><description>Only one <c>Prerequisite</c> cen be defined.</description></item>
            </list>
            </remarks>
            </summary>
            <example>The following is an example of defining and building bootstrapper for installing MyProduct.msi and 
            .NET setup (dotnetfx.exe) as prerequisite installation.
            <para></para>
            <code>
            string setup = new NativeBootstrapper
                               {
                                   PrerequisiteFile = "C:\Users\Public\Public Downloads\dotnetfx.exe",
                                   PrimaryFile = "MyProduct.msi",
                                   OutputFile = "setup.exe",
                                   PrerequisiteRegKeyValue = @"HKLM:SOFTWARE\Microsoft\.NETFramework:InstallRoot"
                               }
                               .Build();
            </code>
            </example>
        </member>
        <member name="P:WixSharp.NativeBootstrapper.PrerequisiteFile">
            <summary>
            Gets or sets the prerequisite file.
            </summary>
            <value>The prerequisite file.</value>
        </member>
        <member name="P:WixSharp.NativeBootstrapper.PrimaryFile">
            <summary>
            Gets or sets the primary setup file.
            </summary>
            <value>The primary setup file.</value>
        </member>
        <member name="P:WixSharp.NativeBootstrapper.PrerequisiteRegKeyValue">
            <summary>
            Gets or sets the prerequisite registry key value. This value is used to determine if the <see cref="P:WixSharp.NativeBootstrapper.PrerequisiteFile"/> should be launched.
            <para>This value must comply with the following pattern: &lt;RegistryHive&gt;:&lt;KeyPath&gt;:&lt;ValueName&gt;.</para>
            <code>PrerequisiteRegKeyValue = @"HKLM:Software\My Company\My Product:Installed";</code>
            Existence of the specified registry value at runtime is interpreted as an indication that the <see cref="P:WixSharp.NativeBootstrapper.PrerequisiteFile"/> has been alreday installed.
            Thus bootstrapper will execute <see cref="P:WixSharp.NativeBootstrapper.PrimaryFile"/> without launching <see cref="P:WixSharp.NativeBootstrapper.PrerequisiteFile"/> first.
            </summary>
            <value>The prerequisite registry key value.</value>
        </member>
        <member name="P:WixSharp.NativeBootstrapper.OutputFile">
            <summary>
            Gets or sets the output file (bootsrtapper) name.
            </summary>
            <value>The output file name.</value>
        </member>
        <member name="P:WixSharp.NativeBootstrapper.DoNotPostVerifyPrerequisite">
            <summary>
            Gets or sets the flag which allows you to disable verification of <see cref="P:WixSharp.NativeBootstrapper.PrerequisiteRegKeyValue"/> after the prerequisite setup is completed.
            <para>Normally if <c>bootstrapper</c> checkes if <see cref="P:WixSharp.NativeBootstrapper.PrerequisiteRegKeyValue"/> exists stright after the prerequisite installation and starts
            the primary setup only if it does.</para>
            <para>It is possible to instruct bootstrapper to continue with the primary setup regardless of the prerequisite installation outcome. This can be done
            by setting DoNotPostVerifyPrerequisite to <c>true</c> (default is <c>false</c>)</para>
            </summary>
            <value>The do not post verify prerequisite.</value>
        </member>
        <member name="P:WixSharp.NativeBootstrapper.OptionalArguments">
            <summary>
            Gets or sets the optional arguments for the bootstrapper compiler.
            </summary>
            <value>The optional arguments.</value>
        </member>
        <member name="M:WixSharp.NativeBootstrapper.Build">
            <summary>
            Builds bootstrapper file.
            </summary>
            <returns>Path to the built bootstrapper file. Returns <c>null</c> if bootstrapper cannot be built.</returns>
        </member>
        <member name="T:WixSharp.ProductInfo">
            <summary>
            Defines product properties as they appear in 'Add/Remove Programs' of Control Panel. 
            <example>
            <code>
             var project = new Project("MyProduct",
                               new Dir(@"%ProgramFiles%\My Company\My Product",
                               ...
            project.ControlPanelInfo.Comments = "Simple test msi";
            project.ControlPanelInfo.Readme = "https://wixsharp.codeplex.com/manual";
            project.ControlPanelInfo.HelpLink = "https://wixsharp.codeplex.com/support";
            project.ControlPanelInfo.HelpTelephone = "111-222-333-444";
            project.ControlPanelInfo.UrlInfoAbout = "https://wixsharp.codeplex.com/About";
            project.ControlPanelInfo.UrlUpdateInfo = "https://wixsharp.codeplex.com/update";
            project.ControlPanelInfo.ProductIcon = "app_icon.ico";
            project.ControlPanelInfo.Contact = "Product owner";
            project.ControlPanelInfo.Manufacturer = "My Company";
            project.ControlPanelInfo.InstallLocation = "[INSTALLDIR]";        
            project.ControlPanelInfo.NoModify = true;
            project.ControlPanelInfo.NoRepair = true,
            project.ControlPanelInfo.NoRemove = true,
            project.ControlPanelInfo.SystemComponent = true, //if set will not be shown in Control Panel
            
            Compiler.BuildMsi(project);
            </code>
            </example>
            </summary>
        </member>
        <member name="P:WixSharp.ProductInfo.Comments">
            <summary>
            Provides Comments for the Add/Remove Programs in the Control Panel. 
            </summary>
        </member>
        <member name="P:WixSharp.ProductInfo.Contact">
            <summary>
            Provides the Contact for Add/Remove Programs in the Control Panel. 
            </summary>
        </member>
        <member name="F:WixSharp.ProductInfo.Manufacturer">
            <summary>
            Product manufacturer name
            </summary>
        </member>
        <member name="P:WixSharp.ProductInfo.InstallLocation">
            <summary>
            Fully qualified path to the application's primary folder. 
            </summary>
        </member>
        <member name="P:WixSharp.ProductInfo.HelpLink">
            <summary>
            Internet address, or URL, for technical support. 
            </summary>
        </member>
        <member name="P:WixSharp.ProductInfo.HelpTelephone">
            <summary>
            Technical support phone numbers. 
            </summary>
        </member>
        <member name="P:WixSharp.ProductInfo.NoModify">
            <summary>
            Prevents display of a Change button for the product in Add/Remove Programs in the Control Panel. Note  This only affects the display in the ARP. The Windows Installer is still capable of repairing, installing-on-demand, and uninstalling applications through a command line or the programming interface.
            </summary>
        </member>
        <member name="P:WixSharp.ProductInfo.NoRemove">
            <summary>
            Prevents display of a Remove button for the product in the Add/Remove Programs in the Control Panel. The product can still be removed by selecting the Change button if the installation package has been authored with a user interface that provides product removal as an option. Note  This only affects the display in the ARP. The Windows Installer is still capable of repairing, installing-on-demand, and uninstalling applications through a command line or the programming interface.
            </summary>
        </member>
        <member name="P:WixSharp.ProductInfo.NoRepair">
            <summary>
            Disables the Repair button in the Add/Remove Programs in the Control Panel. Note  This only affects the display in the ARP. The Windows Installer is still capable of repairing, installing-on-demand, and uninstalling applications through a command line or the programming interface. 
            </summary>
        </member>
        <member name="P:WixSharp.ProductInfo.ProductIcon">
            <summary>
            Identifies the icon displayed in Add/Remove Programs. If this property is not defined, Add/Remove Programs specifies the display icon.
            </summary>
        </member>
        <member name="P:WixSharp.ProductInfo.Readme">
            <summary>
            Provides the ReadMe for Add/Remove Programs in Control Panel. 
            </summary>
        </member>
        <member name="P:WixSharp.ProductInfo.SystemComponent">
            <summary>
            Prevents display of the application in the Programs List of the Add/Remove Programs in the Control Panel. Note  This only affects the display in the ARP. The Windows Installer is still capable of repairing, installing-on-demand, and uninstalling applications through a command line or the programming interface.
            </summary>
        </member>
        <member name="P:WixSharp.ProductInfo.UrlInfoAbout">
            <summary>
            URL for application's home page. 
            </summary>
        </member>
        <member name="P:WixSharp.ProductInfo.UrlUpdateInfo">
            <summary>
            URL for application update information. 
            </summary>
        </member>
        <member name="T:WixSharp.Binary">
            <summary>
            Defines binary file to be embedded into MSI (<c>Binary</c> table).
            <para>
            You can use this class to embed any file (e.g. exe, dll, image) to be used during the installation. 
            Note that none of the binary files are installed on the target system. They are just available at installation time
            for using <c>CustomActions</c>.
            </para>
            </summary>
            
            <example>The following is an example of embedding <c>CRTSetup.msi</c> file into MSI for further use in 
            <c>InstallCRTAction</c>  <see cref="T:WixSharp.ManagedAction"/>.
            <code>
            var project = new Project("MyProduct",
                
                    new Dir(@"%ProgramFiles%\My Company\My Product",
                        new File("readme.txt")),
                        ...
                        
                    new Binary("CRTSetup.msi"),
                    new ManagedAction("InstallCRTAction",
                    ... 
                                        
            </code>
            </example>
        </member>
        <member name="M:WixSharp.Binary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Binary"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.Binary.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Binary"/> class with properties initialized with specified parameters.
            </summary>
            <param name="sourcePath">Relative path to the file to be taken for building the MSI.</param>
        </member>
        <member name="M:WixSharp.Binary.#ctor(WixSharp.Id,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Binary"/> class.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.Binary"/> instance.</param>
            <param name="sourcePath">Relative path to the file to be taken for building the MSI.</param>
        </member>
        <member name="F:WixSharp.Binary.IsAssembly">
            <summary>
            The flag that indicates if the binary file is a .NET assembly.
            </summary>
        </member>
        <member name="T:WixSharp.EmbeddedAssembly">
            <summary>
            Defines assembly file to be embedded into MSI (<c>Binary</c> table).
            <para>
            You can use this class to embed any .NET assembly to be used during the installation. 
            Note that none of the binary files are installed on the target system. They are just available at installation time
            for using <c>CustomActions</c>.
            </para>
            </summary>
            
            <example>The following is an example of embedding <c>CRTSetup.msi</c> file into MSI for further use in 
            <c>InstallCRTAction</c>  <see cref="T:WixSharp.ManagedAction"/>.
            <code>
            var project = new Project("MyProduct",
                
                    new Dir(@"%ProgramFiles%\My Company\My Product",
                        new File(@"readme.txt")),
                        ...
                        
                    new EmbeddedAssembly("config.exe") { RefAssemblies = new [] { "utils.dll" }},
                    new ManagedAction("InstallCRTAction",
                    ... 
                                        
            </code>
            </example>
        </member>
        <member name="M:WixSharp.EmbeddedAssembly.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.EmbeddedAssembly"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.EmbeddedAssembly.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.EmbeddedAssembly"/> class with properties initialized with specified parameters.
            </summary>
            <param name="sourcePath">Relative path to the assembly file to be taken for building the MSI.</param>
        </member>
        <member name="M:WixSharp.EmbeddedAssembly.#ctor(WixSharp.Id,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.EmbeddedAssembly"/> class.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.EmbeddedAssembly"/> instance.</param>
            <param name="sourcePath">Relative path to the assembly file to be taken for building the MSI.</param>
        </member>
        <member name="F:WixSharp.EmbeddedAssembly.RefAssemblies">
            <summary>
            The referenced assemblies the EmbeddedAssembly depends on.
            </summary>
        </member>
        <member name="T:WixSharp.AutoGenerationOptions">
            <summary>
            This class holds the settings for Wix# XML auto-generation: generation of WiX XML elements, which do not have direct
            representation in the Wix# script. The detailed information about Wix# auto-generation can be found here: http://www.csscript.net/WixSharp/ID_Allocation.html.
            </summary>
        </member>
        <member name="F:WixSharp.AutoGenerationOptions.InstallDirDefaultId">
            <summary>
            directories specified indirectly (e.g. by Shortcut working directory)
            </summary>
        </member>
        <member name="F:WixSharp.AutoGenerationOptions.Map64InstallDirs">
            <summary>
            Flag indicating if all system folders (e.g. %ProgramFiles%) should be auto-mapped into their x64 equivalents
            when 'project.Platform = Platform.x64'
            </summary>
        </member>
        <member name="T:WixSharp.MSBuild">
            <summary>
            Settings class for controlling MSBuild integration.
            </summary>
        </member>
        <member name="P:WixSharp.MSBuild.EmitAutoGenFiles">
            <summary>
            Indicates whether compiler should emit "&lt;projDir&gt;\wix\&lt;projName&gt;.g.wxs" file.
            <para> If set to <c>true</c> the Wix# compiler will also update te project file with the inclusion
            of the autogenerated file(s) with "Build Action" set to <c>None</c>.
            </para>
            </summary>
        </member>
        <member name="T:WixSharp.XDocumentGeneratedDlgt">
            <summary>
            Delegate for  <see cref="T:WixSharp.Compiler"/> event <c>WixSourceGenerated</c>
            </summary>
        </member>
        <member name="T:WixSharp.XDocumentSavedDlgt">
            <summary>
            Delegate for  <see cref="T:WixSharp.Compiler"/> event <c>WixSourceSaved</c>
            </summary>
        </member>
        <member name="T:WixSharp.XDocumentFormatedDlgt">
            <summary>
            Delegate for  <see cref="T:WixSharp.Compiler"/> event <c>WixSourceFormated</c>
            </summary>
        </member>
        <member name="T:WixSharp.Condition">
            <summary>
            Defines WiX <c>Condition</c>. <c>Condition</c> is normally associated with <c>CustomActions</c> or WiX elements (e.g. <c>Shortcut</c>).
            <para>
            		<see cref="T:WixSharp.Condition"/> is nothing else but an XML friendly string wrapper, containing
            some predefined (commonly used) condition values. You can either use one of the
            predefined condition values (static members) or define your by specifying full string representation of
            the required WiX condition when calling the constructor or static method <c>Create</c>.
            </para>
            </summary>
            <example>The following is an example of initializing the Shortcut.<see cref="F:WixSharp.Shortcut.Condition"/>
            with custom value <c>INSTALLDESKTOPSHORTCUT="yes"</c> and
            the InstalledFileAction.<see cref="T:WixSharp.InstalledFileAction.Condition"/> with perefined value <c>NOT_Installed</c>:
              <code>
            var project =
                new Project("My Product",
                            ...
                            new Dir(@"%Desktop%",
                                new WixSharp.Shortcut("MyApp", "[INSTALL_DIR]MyApp.exe", "")
                                {
                                    Condition = new Condition("INSTALLDESKTOPSHORTCUT=\"yes\"")
                                }),
                            new InstalledFileAction("MyApp.exe", "",
                                                    Return.check,
                                                    When.After,
                                                    Step.InstallFinalize,
                                                    Condition.NOT_Installed),
                                                    ...
              </code>
              </example>
        </member>
        <member name="F:WixSharp.Condition.Value">
            <summary>
            String value of WiX <c>Condition</c>.
            </summary>
        </member>
        <member name="M:WixSharp.Condition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Condition"/> class.
            </summary>
            <param name="value">The value of the WiX condition expression.</param>
        </member>
        <member name="M:WixSharp.Condition.ToString">
            <summary>
             Returns the WiX <c>Condition</c> as a string.
            </summary>
            <returns>A string representing the condition.</returns>
        </member>
        <member name="M:WixSharp.Condition.GetDistinctProperties">
            <summary>
            Extracts the distinct names of properties from the condition string expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Condition.op_Implicit(WixSharp.Condition)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:WixSharp.Condition"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:WixSharp.Condition.op_Implicit(System.String)~WixSharp.Condition">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:WixSharp.Condition"/>.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:WixSharp.Condition.ToCData">
            <summary>
             Returns the WiX <c>Condition</c> as a <see cref="T:System.Xml.Linq.XCData"/>.
             <remarks> Normally <c>Condition</c> is not designed to be parsed by the XML parser thus it should be embedded as CDATA</remarks>
            <code>
            &lt;Condition&gt;&lt;![CDATA[NETFRAMEWORK20="#0"]]&gt;&lt;/Condition&gt;
            </code>
            </summary>
            <returns>A CDATA string representing the condition.</returns>
        </member>
        <member name="F:WixSharp.Condition.ClrDialog_BackPressed">
            <summary>
            String representation of the <c>Custom_UI_Command = "back"</c> condition. This condition is triggered when user presses 'Back' button in the CLR Dialog.
            </summary>
        </member>
        <member name="F:WixSharp.Condition.ClrDialog_NextPressed">
            <summary>
            String representation of the <c>Custom_UI_Command = "next"</c> condition. This condition is triggered when user presses 'Next' button in the CLR Dialog.
            </summary>
        </member>
        <member name="F:WixSharp.Condition.ClrDialog_CancelPressed">
            <summary>
            String representation of the <c>Custom_UI_Command = "abort"</c> condition. This condition is triggered when user presses 'Cancel' button in the CLR Dialog.
            </summary>
        </member>
        <member name="F:WixSharp.Condition.NOT_Installed">
            <summary>
            String representation of the <c>NOT Installed</c> condition of the WiX <c>Condition</c>.
            </summary>
        </member>
        <member name="F:WixSharp.Condition.Installed">
            <summary>
            String representation of the <c>Installed</c> condition of the WiX <c>Condition</c>.
            </summary>
        </member>
        <member name="F:WixSharp.Condition.Always">
            <summary>
            String representation of "always true" condition of the WiX <c>Condition</c>.
            </summary>
        </member>
        <member name="F:WixSharp.Condition.NOT_BeingRemoved">
            <summary>
            String representation of the <c>NOT (REMOVE="ALL")</c> condition of the WiX <c>Condition</c>.
            </summary>
        </member>
        <member name="F:WixSharp.Condition.NOT_Silent">
            <summary>
            String representation of the <c>UILevel > 3</c> condition of the WiX <c>Condition</c>.
            </summary>
        </member>
        <member name="F:WixSharp.Condition.Silent">
            <summary>
            String representation of the <c>UILevel &lt; 4</c> condition of the WiX <c>Condition</c>.
            </summary>
        </member>
        <member name="F:WixSharp.Condition.BeingRemoved">
            <summary>
            String representation of the <c>REMOVE="ALL"</c> condition of the WiX <c>Condition</c>.
            </summary>
        </member>
        <member name="F:WixSharp.Condition.UninstallCondition">
            <summary>
            Software is being removed and no newer version is being installed.
            </summary>
        </member>
        <member name="F:WixSharp.Condition.Net20_Installed">
            <summary>
            The .NET2.0 installed. This condition is to be used in Project.SetNetFxPrerequisite.
            </summary>
        </member>
        <member name="F:WixSharp.Condition.Net35_Installed">
            <summary>
            The .NET3.5 installed. This condition is to be used in Project.SetNetFxPrerequisite.
            </summary>
        </member>
        <member name="F:WixSharp.Condition.Net45_Installed">
            <summary>
            The .NET4.5 installed. This condition is to be used in Project.SetNetFxPrerequisite.
            </summary>
        </member>
        <member name="F:WixSharp.Condition.Net451_Installed">
            <summary>
            The .NET4.5.1 installed. This condition is to be used in Project.SetNetFxPrerequisite.
            </summary>
        </member>
        <member name="F:WixSharp.Condition.Net452_Installed">
            <summary>
            The .NET4.5.2 installed. This condition is to be used in Project.SetNetFxPrerequisite.
            </summary>
        </member>
        <member name="F:WixSharp.Condition.Net46_Installed">
            <summary>
            The .NET4.6 installed. This condition is to be used in Project.SetNetFxPrerequisite.
            </summary>
        </member>
        <member name="F:WixSharp.Condition.Net461_Installed">
            <summary>
            The .NET4.6.1 installed. This condition is to be used in Project.SetNetFxPrerequisite.
            </summary>
        </member>
        <member name="F:WixSharp.Condition.Net462_Installed">
            <summary>
            The .NET4.6.2 installed. This condition is to be used in Project.SetNetFxPrerequisite.
            </summary>
        </member>
        <member name="F:WixSharp.Condition.Net30_SP_Installed">
            <summary>
            The .NET3.0 SP installed. This condition is to be used in Project.SetNetFxPrerequisite.
            </summary>
        </member>
        <member name="M:WixSharp.Condition.Create(System.String)">
             <summary>
             Creates WiX <c>Condition</c> condition from the given string value.
             </summary>
             <param name="value">String value of the <c>Condition</c> to be created.</param>
             <returns>Instance of the <c>Condition</c></returns>
             <example>The following is an example of initializing the Shortcut.<see cref="F:WixSharp.Shortcut.Condition"/>
             with custom value <c>INSTALLDESKTOPSHORTCUT="yes"</c>:
             <code>
                 new Dir(@"%Desktop%",
                     new WixSharp.Shortcut("MyApp", "[INSTALL_DIR]MyApp.exe", "")
                     {
                        Condition = Condition.Create("INSTALLDESKTOPSHORTCUT=\"yes\"")
                     })
            
             </code>
             </example>
        </member>
        <member name="T:WixSharp.FeatureCondition">
            <summary>
            Specialized Condition for conditionally installing WiX Features.
            </summary>
            <remarks>
            Setting Attributes on FeatureCondition is ignored.
            </remarks>
        </member>
        <member name="M:WixSharp.FeatureCondition.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.FeatureCondition"/> class.
            </summary>
            <param name="value">The value of the WiX condition expression.</param>
            <param name="level">The level value of the WiX condition.</param>
        </member>
        <member name="P:WixSharp.FeatureCondition.Level">
            <summary>
            Allows modifying the level of a Feature based on the result of this condition.
            </summary>
        </member>
        <member name="P:WixSharp.FeatureCondition.Attributes">
            <summary>
            Not Supported.
            </summary>
            <exception cref="T:System.NotImplementedException">Raised when getting or setting Attributes.</exception>
        </member>
        <member name="T:WixSharp.Dir">
             <summary>
             Defines directory to be installed on target system.
             <para>
             Use this class to define file/directory structure of the deployment solution.
             </para>
              You can use predefined Wix# environment constants for well-known installation locations. They are directly mapped
              to the corresponding WiX constants:
              <para>For the full list of the constants consult WiX documentation or use <c>Compiler.GetMappedWixConstants</c>
              to explore them programatically./</para>
              <para>
              <para><c>Wix#</c> - <c>WiX</c></para>
              <para>%WindowsFolder% - [WindowsFolder]</para>
              <para>%ProgramFiles% - [ProgramFilesFolder]</para>
              <para>%ProgramMenu% - [ProgramMenuFolder]</para>
              <para>%CommonAppDataFolder% - [CommonAppDataFolder]</para>
              <para>%AppDataFolder% - [AppDataFolder]</para>
              <para>%CommonFilesFolder% - [CommonFilesFolder]</para>
              <para>%LocalAppDataFolder% - [LocalAppDataFolder]</para>
              <para>%ProgramFiles64Folder% - [ProgramFiles64Folder]</para>
              <para>%System64Folder% - [System64Folder]</para>
              <para>%SystemFolder% - [SystemFolder]</para>
              <para>%TempFolder% - [TempFolder]</para>
              <para>%Desktop% - [DesktopFolder]</para>
              <para>...</para>
              </para>
             </summary>
             <example>The following is an example of defining installation directory <c>Progam Files/My Company/My Product</c>
             containing a single file <c>MyApp.exe</c> and subdirectory <c>Documentation</c> with <c>UserManual.pdf</c> file.
             <code>
             var project = new Project("MyProduct",
            
                     new Dir(@"%ProgramFiles%\My Company\My Product",
                         new File(@"Release\MyApp.exe"),
                         new Dir("Documentation",
                             new File(@"Release\UserManual.pdf")),
                         ...
             </code>
             </example>
        </member>
        <member name="M:WixSharp.Dir.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Dir"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.Dir.#ctor(WixSharp.Id,System.String,WixSharp.WixEntity[])">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Dir"/> class with properties/fields initialized with specified parameters
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.Dir"/> instance.</param>
            <param name="targetPath">The name of the directory. Note if the directory is a root installation directory <c>targetPath</c> must
            be specified as a full path. However if the directory is a nested installation directory the name must be a directory name only.</param>
            <param name="items">Any <see cref="T:WixSharp.WixEntity"/> which can be contained by directory (e.g. file, subdirectory).</param>
        </member>
        <member name="M:WixSharp.Dir.#ctor(System.String,WixSharp.WixEntity[])">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Dir"/> class with properties/fields initialized with specified parameters
            </summary>
            <param name="targetPath">The name of the directory. Note if the directory is a root installation directory <c>targetPath</c> must
            be specified as a full path. However if the directory is a nested installation directory the name must be a directory name only.</param>
            <param name="items">Any <see cref="T:WixSharp.WixEntity"/> which can be contained by directory (e.g. file, subdirectory).</param>
        </member>
        <member name="M:WixSharp.Dir.#ctor(WixSharp.Feature,System.String,WixSharp.WixEntity[])">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Dir"/> class with properties/fields initialized with specified parameters
            </summary>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the directory should be included in.</param>
            <param name="targetPath">The name of the directory. Note if the directory is a root installation directory <c>targetPath</c> must
            be specified as a full path. However if the directory is a nested installation directory the name must be a directory name only.</param>
            <param name="items">Any <see cref="T:WixSharp.WixEntity"/> which can be contained by directory (e.g. file, subdirectory).</param>
        </member>
        <member name="M:WixSharp.Dir.#ctor(WixSharp.Id,WixSharp.Feature,System.String,WixSharp.WixEntity[])">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Dir"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.Dir"/> instance.</param>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the directory should be included in.</param>
            <param name="targetPath">The name of the directory. Note if the directory is a root installation directory <c>targetPath</c> must
            be specified as a full path. However if the directory is a nested installation directory the name must be a directory name only.</param>
            <param name="items">Any <see cref="T:WixSharp.WixEntity"/> which can be contained by directory (e.g. file, subdirectory).</param>
        </member>
        <member name="F:WixSharp.Dir.Dirs">
            <summary>
            Collection of the contained nested <see cref="T:WixSharp.Dir"/>s (subdirectories).
            </summary>
        </member>
        <member name="F:WixSharp.Dir.Files">
            <summary>
            Collection of the contained <see cref="T:WixSharp.File"/>s.
            </summary>
        </member>
        <member name="F:WixSharp.Dir.DirFileCollections">
            <summary>
            Collection of the <see cref="T:WixSharp.DirFiles"/> objects. <see cref="T:WixSharp.DirFiles"/> type is used to specify files
            contained by a specific directory with wildcard character pattern.
            Files in subdirectories are not included.
            <para>
            <see cref="T:WixSharp.DirFiles"/> type is related to but not identical to <see cref="F:WixSharp.Dir.Files"/>, which defines files of
            not only a single level directory but all subdirectories as well.
            </para>
            </summary>
        </member>
        <member name="F:WixSharp.Dir.FileCollections">
            <summary>
            Collection of the <see cref="F:WixSharp.Dir.Files"/> objects. <see cref="F:WixSharp.Dir.Files"/> type is used to specify files
            contained by a specific directory and all subdirectories with wildcard character pattern.
            <para>
            <see cref="F:WixSharp.Dir.Files"/> type is related to but not identical to <see cref="T:WixSharp.DirFiles"/>, which defines only files
            of a single level directory.
            </para>
            </summary>
        </member>
        <member name="F:WixSharp.Dir.ODBCDataSources">
            <summary>
            Collection of WiX/MSI <see cref="T:WixSharp.ODBCDataSource"/> objects to be created during the installed.
            </summary>
        </member>
        <member name="F:WixSharp.Dir.IISVirtualDirs">
            <summary>
            Collection of WiX/MSI <see cref="T:WixSharp.IISVirtualDir"/> objects to be created during the installed.
            </summary>
        </member>
        <member name="F:WixSharp.Dir.GenericItems">
            <summary>
            Collection of the user defined <see cref="T:WixSharp.IGenericEntity"/> items.
            </summary>
        </member>
        <member name="F:WixSharp.Dir.MergeModules">
            <summary>
            Collection of the contained <see cref="T:WixSharp.Merge"/> modules.
            </summary>
        </member>
        <member name="F:WixSharp.Dir.Shortcuts">
            <summary>
            Collection of the contained <see cref="T:WixSharp.ExeFileShortcut"/>s.
            </summary>
        </member>
        <member name="F:WixSharp.Dir.Permissions">
            <summary>
            Collection of directory permissions to be applied to this directory.
            </summary>
        </member>
        <member name="P:WixSharp.Dir.IsInstallDir">
            <summary>
            Indicates if the directory is an installation directory.
            <para>
            Wix# assigns a dedicated WiX UI property WIXUI_INSTALLDIR
            to the Id value of the directory, which is marked by user as <see cref="P:WixSharp.Dir.IsInstallDir"/> or the directory
            with the designated Dir Id value defined by Compiler.AutoGeneration.InstallDirDefaultId ('INSTALLDIR' by default).
            </para>
            </summary>
        </member>
        <member name="M:WixSharp.Dir.ToString">
            <summary>
             Returns the WiX <c>Directory</c> as a string.
            </summary>
            <returns>A string representing the directory.</returns>
        </member>
        <member name="T:WixSharp.Files">
            <summary>
            Defines all files of a given source directory and all subdirectories to be installed on target system.
            <para>
            Use this class to define files to be automatically included into the deployment solution
            if their name matches specified wildcard character pattern (<see cref="F:WixSharp.Files.IncludeMask"/>).
            </para>
            <para>
            This class is a logical equivalent of <see cref="T:WixSharp.DirFiles"/> except it also analyses all files in all subdirectories.
            <see cref="T:WixSharp.DirFiles"/> excludes files in subdirectories.
            </para>
            </summary>
            <remarks>
            Note that all files matching wildcard are resolved into absolute path thus it may not always be suitable
            if the Wix# script is to be compiled into WiX XML source only (Compiler.<see cref="M:WixSharp.Compiler.BuildWxs(WixSharp.Project)"/>). Though it is not a problem at all if the Wix# script
            is compiled into MSI file (Compiler.<see cref="M:WixSharp.Compiler.BuildMsi(WixSharp.Project)"/>).
            </remarks>b
            <example>The following is an example of defining installation files with wildcard character pattern.
            <code>
            new Project("MyProduct",
                new Dir(@"%ProgramFiles%\MyCompany\MyProduct",
                    new Files(@"Release\Bin\*.*"),
                    ...
            </code>
            </example>
        </member>
        <member name="M:WixSharp.Files.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Files"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.Files.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Files"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="sourcePath">The relative path to source directory. It must include wildcard pattern for files to be included
            into MSI (e.g. <c>new Files(@"Release\Bin\*.*")</c>).</param>
        </member>
        <member name="M:WixSharp.Files.#ctor(System.String,System.Predicate{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Files"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="sourcePath">The relative path to source directory. It must include wildcard pattern for files to be included
            into MSI (e.g. <c>new Files(@"Release\Bin\*.*")</c>).</param>
            <param name="filter">Filter to be applied for every file to be evaluated for the inclusion into MSI.
            (e.g. <c>new Files(typical, @"Release\Bin\*.dll", f => !f.EndsWith(".Test.dll"))</c>).</param>
        </member>
        <member name="M:WixSharp.Files.#ctor(WixSharp.Feature,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Files"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the directory files should be included in.</param>
            <param name="sourcePath">The relative path to source directory. It must include wildcard pattern for files to be included
            into MSI (e.g. <c>new Files(@"Release\Bin\*.*")</c>).</param>
        </member>
        <member name="M:WixSharp.Files.#ctor(WixSharp.Feature,System.String,System.Predicate{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Files"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the directory files should be included in.</param>
            <param name="sourcePath">The relative path to source directory. It must include wildcard pattern for files to be included
            into MSI (e.g. <c>new Files(@"Release\Bin\*.*")</c>).</param>
            <param name="filter">Filter to be applied for every file to be evaluated for the inclusion into MSI.
            (e.g. <c>new Files(typical, @"Release\Bin\*.dll", f => !f.EndsWith(".Test.dll"))</c>).</param>
        </member>
        <member name="F:WixSharp.Files.Directory">
            <summary>
            The relative path to source directory to search for files matching the <see cref="F:WixSharp.Files.IncludeMask"/>.
            </summary>
        </member>
        <member name="F:WixSharp.Files.Filter">
            <summary>
            The filter delegate. It is applied for every file to be evaluated for the inclusion into MSI.
            </summary>
        </member>
        <member name="F:WixSharp.Files.IncludeMask">
            <summary>
            Wildcard pattern for files to be included into MSI.
            <para>Default value is <c>*.*</c>.</para>
            </summary>
        </member>
        <member name="M:WixSharp.Files.GetAllItems(System.String,WixSharp.Dir)">
            <summary>
            Analyses <paramref name="baseDirectory"/> and returns all files (including subdirectories) matching <see cref="F:WixSharp.Files.IncludeMask"/>.
            </summary>
            <param name="baseDirectory">The base directory for file analysis. It is used in conjunction with
            relative <see cref="F:WixSharp.Files.Directory"/>. Though <see cref="F:WixSharp.Files.Directory"/> takes precedence if it is an absolute path.</param>
            <returns>Array of <see cref="T:WixSharp.WixEntity"/> instances, which are either <see cref="T:WixSharp.File"/> or/and <see cref="T:WixSharp.Dir"/> objects.</returns>
            <param name="parentWixDir">Parent Wix# directory</param>
        </member>
        <member name="T:WixSharp.SerializingExtensions">
            <summary>
            'Byte array to string' serialization methods.
            </summary>
        </member>
        <member name="M:WixSharp.SerializingExtensions.DecodeFromHex(System.String)">
            <summary>
            Decodes hexadecimal string representation into the byte array.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.SerializingExtensions.EncodeToHex(System.Byte[])">
            <summary>
            Encodes byte array into its hexadecimal string representation.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.SerializingExtensions.GetString(System.Byte[],System.Text.Encoding)">
            <summary>
            Converts bytes into text according the specified Encoding..
            </summary>
            <param name="obj">The object.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.SerializingExtensions.GetBytes(System.String,System.Text.Encoding)">
            <summary>
            Gets the bytes of the text according the specified Encoding.
            </summary>
            <param name="obj">The text.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="T:WixSharp.XmlMapping">
             <summary>
             Serializes CLR entity into XML, based on the type members being marked for the serialization with <see cref="T:WixSharp.XmlAttribute"/>.
             <code>
             public class RemoveFolderEx : WixEntity, IGenericEntity
             {
                 [Xml]
                 public InstallEvent? On;
            
                 [Xml]
                 public string Property;
            
                 [Xml]
                 public string Id;
             }
             </code>
             </summary>
        </member>
        <member name="M:WixSharp.XmlMapping.ToXElement(WixSharp.WixObject,System.Xml.Linq.XName)">
            <summary>
            Serializes the <see cref="T:WixSharp.WixObject"/> into XML based on the members marked with
            <see cref="T:WixSharp.XmlAttribute"/> and <see cref="P:WixSharp.WixObject.Attributes"/>.
            </summary>
            <param name="obj"></param>
            <param name="elementName"></param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.XmlMapping.ToXElement(WixSharp.WixObject,WixSharp.WixExtension,System.String)">
            <summary>
            Serializes the <see cref="T:WixSharp.WixObject"/> into XML based on the members marked with
            <see cref="T:WixSharp.XmlAttribute"/> and <see cref="P:WixSharp.WixObject.Attributes"/>.
            </summary>
            <param name="obj">The obj.</param>
            <param name="extension">The extension.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.XmlMapping.MapToXmlAttributes(System.Object)">
            <summary>
            Serializes the object into XML based on the members marked with
            <see cref="T:WixSharp.XmlAttribute"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.XmlMapping.ToSecureString(System.String)">
            <summary>
            Converts source string to SecureString
            </summary>
            <param name="source">Insecure string</param>
            <returns>Secure version of the source string</returns>
        </member>
        <member name="M:WixSharp.XmlMapping.ToInsecureString(System.Security.SecureString)">
            <summary>
            Converts secure version of the string to insecure string
            </summary>
            <param name="input">Secure string</param>
            <returns>Insecure version of the SecureString</returns>
        </member>
        <member name="T:WixSharp.XmlAttribute">
            <summary>
            The attribute indicating the type member being mapped to XML element. Used by Wix# compiler to emmit XML base on CLR types.
            </summary>
        </member>
        <member name="P:WixSharp.XmlAttribute.Name">
            <summary>
            Gets or sets the name of the mapped XML element.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:WixSharp.Feature">
             <summary>
             Defines WiX Feature.
             <para>
             All installable WiX components belong to one or more features. By default, if no <see cref="T:WixSharp.Feature"/>s are defined by user, Wix# creates "Complete"
             feature, which contains all installable components.
             </para>
             </summary>
             <example>
             <list type="bullet">
            
             <item>
             <description>The example of defining <see cref="T:WixSharp.Feature"/>s explicitly:
             <code>
             Feature binaries = new Feature("My Product Binaries");
             Feature docs = new Feature("My Product Documentation");
            
             var project =
                 new Project("My Product",
                     new Dir(@"%ProgramFiles%\My Company\My Product",
                         new File(binaries, @"AppFiles\MyApp.exe",
                         ...
             </code>
             </description>
             </item>
            
             <item>
             <description>The example of defining nested features .
             <code>
             Feature binaries = new Feature("My Product Binaries");
             Feature docs = new Feature("My Product Documentation");
             Feature docViewers = new Feature("Documentation viewers");
             docs.Children.Add(docViewers);
                ...
             </code>
             </description>
             </item>
            
             <item>
             <description>The example of defining "Complete" <see cref="T:WixSharp.Feature"/> implicitly.
             Note <see cref="T:WixSharp.File"/> constructor does not use <see cref="T:WixSharp.Feature"/> argument.
             <code>
             var project =
                 new Project("My Product",
                     new Dir(@"%ProgramFiles%\My Company\My Product",
                         new File(@"AppFiles\MyApp.exe",
                         ...
             </code>
             </description>
             </item>
             </list>
             </example>
        </member>
        <member name="M:WixSharp.Feature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Feature"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.Feature.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Feature"/> class  with properties/fields initialized with specified parameters.
            </summary>
            <param name="name">The feature name.</param>
        </member>
        <member name="M:WixSharp.Feature.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Feature"/> class  with properties/fields initialized with specified parameters.
            </summary>
            <param name="name">The feature name.</param>
            <param name="description">The feature description.</param>
        </member>
        <member name="M:WixSharp.Feature.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Feature"/> class  with properties/fields initialized with specified parameters.
            </summary>
            <param name="name">The feature name.</param>
            <param name="isEnabled">Defines if the <see cref="T:WixSharp.Feature"/> is enabled at startup.
            Use this parameter if the feature should be disabled by default and only enabled after
            processing the <c>Condition Table</c> or user input.</param>
        </member>
        <member name="M:WixSharp.Feature.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Feature"/> class  with properties/fields initialized with specified parameters.
            </summary>
            <param name="name">The feature name.</param>
            <param name="description">The feature description.</param>
            <param name="isEnabled">Defines if the <see cref="T:WixSharp.Feature"/> is enabled at startup.
            Use this parameter if the feature should be disabled by default and only enabled after
            processing the <c>Condition Table</c> or user input.</param>
        </member>
        <member name="M:WixSharp.Feature.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Feature"/> class  with properties/fields initialized with specified parameters.
            </summary>
            <param name="name">The feature name.</param>
            <param name="description">The feature description.</param>
            <param name="isEnabled">Defines if the <see cref="T:WixSharp.Feature"/> is enabled at startup.
            Use this parameter if the feature should be disabled by default and only enabled after
            processing the <c>Condition Table</c> or user input.</param>
            <param name="allowChange">Defines if setup allows the user interface to display an option to change the <see cref="T:WixSharp.Feature"/> state to Absent.</param>
        </member>
        <member name="M:WixSharp.Feature.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Feature"/> class  with properties/fields initialized with specified parameters.
            </summary>
            <param name="name">The feature name.</param>
            <param name="isEnabled">Defines if the <see cref="T:WixSharp.Feature"/> is enabled at startup.
            Use this parameter if the feature should be disabled by default and only enabled after
            processing the <c>Condition Table</c> or user input.</param>
            <param name="allowChange">Defines if setup allows the user interface to display an option to change the <see cref="T:WixSharp.Feature"/> state to Absent.</param>
        </member>
        <member name="M:WixSharp.Feature.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Feature"/> class  with properties/fields initialized with specified parameters.
            </summary>
            <param name="name">The feature name.</param>
            <param name="description">The feature description.</param>
            <param name="configurableDir">The default path of the feature <c>ConfigurableDirectory</c>. If set to non-empty string, MSI runtime will place
            <c>Configure</c> button for the feature in the <c>Feature Selection</c> dialog.</param>
        </member>
        <member name="M:WixSharp.Feature.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Feature"/> class  with properties/fields initialized with specified parameters.
            </summary>
            <param name="name">The feature name.</param>
            <param name="description">The feature description.</param>
            <param name="isEnabled">Defines if the <see cref="T:WixSharp.Feature"/> is enabled at startup.
            Use this parameter if the feature should be disabled by default and only enabled after
            processing the <c>Condition Table</c> or user input.</param>
            <param name="allowChange">Defines if setup allows the user interface to display an option to change the <see cref="T:WixSharp.Feature"/> state to Absent.</param>
            <param name="configurableDir">The default path of the feature <c>ConfigurableDirectory</c>. If set to non-empty string, MSI runtime will place
            <c>Configure</c> button for the feature in the <c>Feature Selection</c> dialog.</param>
        </member>
        <member name="F:WixSharp.Feature.IsEnabled">
            <summary>
            <para>
            Defines if the <see cref="T:WixSharp.Feature"/> is enabled at startup.
            Use this parameter if the feature should be disabled by default and only enabled after
            processing the <c>Condition Table</c> or user input.
            </para>
            The default value is <c>true</c>.
            </summary>
        </member>
        <member name="F:WixSharp.Feature.AllowChange">
            <summary>
            <para>
            Defines if setup allows the user interface to display an option to change the <see cref="T:WixSharp.Feature"/> state to Absent.
            </para>
            <para>This property is translated into WiX Feature.Absent attribute.</para>
            The default value is <c>true</c>.
            </summary>
        </member>
        <member name="F:WixSharp.Feature.Description">
            <summary>
            The feature description.
            </summary>
        </member>
        <member name="F:WixSharp.Feature.ConfigurableDir">
            <summary>
            The default path of the feature <c>ConfigurableDirectory</c>. If set to non-empty string, MSI runtime will place
            <c>Configure</c> button for the feature in the <c>Feature Selection</c> dialog.
            </summary>
        </member>
        <member name="F:WixSharp.Feature.Children">
            <summary>
            Child <see cref="T:WixSharp.Feature"/>. To be added in the nested Features scenarios.
            </summary>
        </member>
        <member name="M:WixSharp.Feature.Add(WixSharp.Feature[])">
            <summary>
            Adds the specified nested features.
            </summary>
            <param name="features">The features.</param>
            <returns></returns>
        </member>
        <member name="F:WixSharp.Feature.Condition">
            <summary>
            Defines the installation <see cref="F:WixSharp.Feature.Condition"/>, which is to be checked during the installation to
            determine if the feature should be installed on the target system.
            </summary>
        </member>
        <member name="F:WixSharp.Feature.Display">
            <summary>
            Determines the initial display of this feature in the feature tree.
            </summary>
        </member>
        <member name="M:WixSharp.Feature.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:WixSharp.File">
             <summary>
             Defines file to be installed.
             </summary>
            
            <example>The following is an example of installing <c>MyApp.exe</c> file.
            <code>
             var project =
                 new Project("My Product",
            
                     new Dir(@"%ProgramFiles%\My Company\My Product",
            
                         new File(binaries, @"AppFiles\MyApp.exe",
                             new WixSharp.Shortcut("MyApp", @"%ProgramMenu%\My Company\My Product"),
                             new WixSharp.Shortcut("MyApp", @"%Desktop%")),
            
                     ...
            
             Compiler.BuildMsi(project);
             </code>
             </example>
        </member>
        <member name="M:WixSharp.File.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:WixSharp.File"/>.
            <para>This property is designed to produce a friendlier string representation of the <see cref="T:WixSharp.File"/>
            for debugging purposes.</para>
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the <see cref="T:WixSharp.File"/>.
            </returns>
        </member>
        <member name="M:WixSharp.File.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.File"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.File.#ctor(WixSharp.Feature,System.String,WixSharp.WixEntity[])">
            <summary>
            Creates instance of the <see cref="T:WixSharp.File"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the file should be included in.</param>
            <param name="sourcePath">Relative path to the file to be taken for building the MSI.</param>
            <param name="items">Optional parameters defining additional members (e.g. <see cref="T:WixSharp.FileShortcut"/> shortcuts
            to the file to be created during the installation).</param>
        </member>
        <member name="M:WixSharp.File.#ctor(WixSharp.Id,WixSharp.Feature,System.String,WixSharp.WixEntity[])">
            <summary>
            Creates instance of the <see cref="T:WixSharp.File"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.File"/> instance.</param>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the file should be included in.</param>
            <param name="sourcePath">Relative path to the file to be taken for building the MSI.</param>
            <param name="items">Optional parameters defining additional members (e.g. <see cref="T:WixSharp.FileShortcut"/> shortcuts
            to the file to be created during the installation).</param>
        </member>
        <member name="M:WixSharp.File.#ctor(System.String,WixSharp.WixEntity[])">
            <summary>
            Creates instance of the <see cref="T:WixSharp.File"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="sourcePath">Relative path to the file to be taken for building the MSI.</param>
            <param name="items">Optional parameters defining additional members (e.g. <see cref="T:WixSharp.FileShortcut"/> shortcuts
            to the file to be created during the installation).</param>
        </member>
        <member name="M:WixSharp.File.#ctor(WixSharp.Id,System.String,WixSharp.WixEntity[])">
            <summary>
            Creates instance of the <see cref="T:WixSharp.File"></see> class with properties initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.File"/> instance.</param>
            <param name="sourcePath">Relative path to the file to be taken for building the MSI.</param>
            <param name="items">Optional parameters defining additional members (e.g. <see cref="T:WixSharp.FileShortcut"/> shortcuts
            to the file to be created during the installation).</param>
        </member>
        <member name="F:WixSharp.File.Associations">
            <summary>
            Collection of the <see cref="T:WixSharp.FileAssociation"/>s associated with the file.
            </summary>
        </member>
        <member name="F:WixSharp.File.ServiceInstaller">
            <summary>
            The service installer associated with the file.
             Set this field to the properly initialized instance of <see cref="F:WixSharp.File.ServiceInstaller"/> if the file is a windows service module.
            </summary>
        </member>
        <member name="F:WixSharp.File.DriverInstaller">
            <summary>
            The driver installer associated with the file. Set this field to the properly initialized
            instance of <see cref="F:WixSharp.File.DriverInstaller"/> if the file is a windows driver.
            </summary>
        </member>
        <member name="F:WixSharp.File.IISVirtualDirs">
            <summary>
            Collection of the contained <see cref="T:WixSharp.IISVirtualDir"/>s.
            </summary>
        </member>
        <member name="F:WixSharp.File.Shortcuts">
            <summary>
            Collection of the <see cref="T:WixSharp.Shortcut"/>s associated with the file.
            </summary>
        </member>
        <member name="F:WixSharp.File.Condition">
            <summary>
            Defines the installation <see cref="F:WixSharp.File.Condition"/>, which is to be checked during the installation to
            determine if the file should be installed on the target system.
            </summary>
        </member>
        <member name="F:WixSharp.File.Permissions">
            <summary>
            Collection of <see cref="T:WixSharp.FilePermission" /> to be applied to the file.
            </summary>
        </member>
        <member name="F:WixSharp.File.FirewallExceptions">
            <summary>
            Collection of <see cref="T:WixSharp.FirewallException" /> to be applied to the file.
            </summary>
        </member>
        <member name="F:WixSharp.File.GenericItems">
            <summary>
            Collection of <see cref="T:WixSharp.IGenericEntity" /> to be applied to the file.
            </summary>
        </member>
        <member name="P:WixSharp.File.NeverOverwrite">
            <summary>
            Gets or sets the NeverOverwrite attribute of the associated WiX component.
            <para>If this attribute is set to 'true', the installer does not install or reinstall the component
             if a key path file for the component already exists. </para>
            </summary>
            <value>
            The never overwrite.
            </value>
        </member>
        <member name="T:WixSharp.DirFiles">
            <summary>
            Defines files of a given source directory to be installed on target system.
            Note that files in subdirectories are not included.
            <para>
            Use this class to define files to be automatically included into the deployment solution
            if their name matches specified wildcard character pattern (<see cref="F:WixSharp.DirFiles.IncludeMask"/>).
            </para>
            <para>
            This class is a logical equivalent of <see cref="T:WixSharp.Files"/> except that it analyses files in a single directory.
            </para>
            </summary>
            <remarks>
            Note that all files matching the wildcard are resolved into absolute paths, so it may not always be suitable
            if the Wix# script is to be compiled into WiX XML source only (Compiler.<see cref="M:WixSharp.Compiler.BuildWxs(WixSharp.Project)"/>).
            This is not a problem if the Wix# script
            is compiled into MSI file (Compiler.<see cref="M:WixSharp.Compiler.BuildMsi(WixSharp.Project)"/>).
            </remarks>
            <example>The following is an example of defining installation files with a wildcard character pattern.
            <code>
            new Project("MyProduct",
                new Dir(@"%ProgramFiles%\MyCompany\MyProduct",
                    new DirFiles(@"Release\Bin\*.*"),
                        new Dir("GlobalResources", new DirFiles(@"Release\Bin\GlobalResources\*.*")),
                        new Dir("Images", new DirFiles(@"Release\Bin\Images\*.*")),
                        ...
            </code>
            </example>
        </member>
        <member name="M:WixSharp.DirFiles.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.DirFiles"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="sourcePath">The relative path to directory source directory. It must include wildcard pattern for files to be included
            into MSI (<c>new DirFiles(@"Release\Bin\*.*")</c>).</param>
        </member>
        <member name="M:WixSharp.DirFiles.#ctor(System.String,System.Predicate{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.DirFiles"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="sourcePath">The relative path to directory source directory. It must include wildcard pattern for files to be included
            into MSI (e.g. <c>new DirFiles(@"Release\Bin\*.*")</c>).</param>
            <param name="filter">Filter to be applied for every file to be evaluated for the inclusion into MSI.
            (e.g. <c>new Files(typical, @"Release\Bin\*.dll", f => !f.EndsWith(".Test.dll"))</c>).</param>
        </member>
        <member name="M:WixSharp.DirFiles.#ctor(WixSharp.Feature,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.DirFiles"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the directory files should be included in.</param>
            <param name="sourcePath">The relative path to directory source directory. It must include wildcard pattern for files to be included
            into MSI (e.g. <c>new DirFiles(@"Release\Bin\*.*")</c>).</param>
        </member>
        <member name="M:WixSharp.DirFiles.#ctor(WixSharp.Feature,System.String,System.Predicate{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.DirFiles"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the directory files should be included in.</param>
            <param name="sourcePath">The relative path to directory source directory. It must include wildcard pattern for files to be included
            into MSI (e.g. <c>new DirFiles(@"Release\Bin\*.*")</c>).</param>
            <param name="filter">Filter to be applied for every file to be evaluated for the inclusion into MSI.
            (e.g. <c>new Files(typical, @"Release\Bin\*.dll", f => !f.EndsWith(".Test.dll"))</c>).</param>
        </member>
        <member name="F:WixSharp.DirFiles.Directory">
            <summary>
            The relative path from source directory to directory to lookup for files matching the <see cref="F:WixSharp.DirFiles.IncludeMask"/>.
            </summary>
        </member>
        <member name="F:WixSharp.DirFiles.IncludeMask">
            <summary>
            Wildcard pattern for files to be included into MSI.
            <para>Default value is <c>*.*</c>.</para>
            </summary>
        </member>
        <member name="F:WixSharp.DirFiles.Filter">
            <summary>
            The filter delegate. It is applied for every file to be evaluated for the inclusion into MSI.
            </summary>
        </member>
        <member name="M:WixSharp.DirFiles.GetFiles(System.String)">
            <summary>
            Analyses <paramref name="baseDirectory"/> and returns all files matching <see cref="F:WixSharp.DirFiles.IncludeMask"/>.
            </summary>
            <param name="baseDirectory">The base directory for file analysis. It is used in conjunction with
            relative <see cref="F:WixSharp.DirFiles.Directory"/>.Though <see cref="F:WixSharp.DirFiles.Directory"/> takes precedence if it is an absolute path.</param>
            <returns>Array of <see cref="T:WixSharp.File"/>s.</returns>
        </member>
        <member name="T:WixSharp.InstalledFileAction">
            <summary>
            Defines WiX InstalledFileAction for executing installed file. 
            </summary>
            
            <example>The following is an example of using <c>InstalledFileAction</c> to run
            installed executable <c>Registrator.exe</c> with different arguments depending 
            in installation type (install/uninstall):
            <code>
            var project = 
                new Project("My Product",
                
                    new Dir(@"%ProgramFiles%\My Company\My Product",
                    
                        new File(binaries, @"AppFiles\MyApp.exe",
                            new WixSharp.Shortcut("MyApp", @"%ProgramMenu%\My Company\My Product"),
                            new WixSharp.Shortcut("MyApp", @"%Desktop%")),
                            
                        new File(binaries, @"AppFiles\Registrator.exe"),
                        
                    new InstalledFileAction("Registrator.exe", "", 
                                            Return.check, 
                                            When.After, 
                                            Step.InstallFinalize, 
                                            Condition.NOT_Installed),
                                            
                    new InstalledFileAction("Registrator.exe", "/u", 
                                            Return.check, 
                                            When.Before, 
                                            Step.InstallFinalize, 
                                            Condition.Installed), 
                    ...
                    
            Compiler.BuildMsi(project);
            </code>
            </example>
        </member>
        <member name="M:WixSharp.InstalledFileAction.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.InstalledFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="key">The key (file name) of the installed file to be executed.</param>
            <param name="args">The arguments to be passed to the file during the execution.</param>
        </member>
        <member name="M:WixSharp.InstalledFileAction.#ctor(WixSharp.Id,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.InstalledFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.InstalledFileAction"/> instance.</param>
            <param name="key">The key (file name) of the installed file to be executed.</param>
            <param name="args">The arguments to be passed to the file during the execution.</param>
        </member>
        <member name="M:WixSharp.InstalledFileAction.#ctor(System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.InstalledFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="key">The key (file name) of the installed file to be executed.</param>
            <param name="args">The arguments to be passed to the file during the execution.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.InstalledFileAction"/>.</param>
        </member>
        <member name="M:WixSharp.InstalledFileAction.#ctor(WixSharp.Id,System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.InstalledFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.InstalledFileAction"/> instance.</param>
            <param name="key">The key (file name) of the installed file to be executed.</param>
            <param name="args">The arguments to be passed to the file during the execution.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.InstalledFileAction"/>.</param>
        </member>
        <member name="M:WixSharp.InstalledFileAction.#ctor(System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.InstalledFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="key">The key (file name) of the installed file to be executed.</param>
            <param name="args">The arguments to be passed to the file during the execution.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.InstalledFileAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="M:WixSharp.InstalledFileAction.#ctor(WixSharp.Id,System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.InstalledFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.InstalledFileAction"/> instance.</param>
            <param name="key">The key (file name) of the installed file to be executed.</param>
            <param name="args">The arguments to be passed to the file during the execution.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.InstalledFileAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="F:WixSharp.InstalledFileAction.Key">
            <summary>
            The key (file name) of the installed file to be executed.
            </summary>
        </member>
        <member name="F:WixSharp.InstalledFileAction.Args">
            <summary>
            The arguments to be passed to the file during the execution.
            </summary>
        </member>
        <member name="T:WixSharp.CustomActionMethod">
            <summary>
            Method delegate implementing WiX CustomAction.
            </summary>
        </member>
        <member name="T:WixSharp.ManagedAction">
            <summary>
            Defines WiX Managed CustomAction. 
            <para>
            Managed CustomAction can be defined either in the Wix# script or in the external assembly or C# file.
            The only requirements for any C# method to be qualified for being Managed CustomAcyion is to 
            have DTF Action signature <c>public static ActionResult MyManagedAction(Session session)</c>, and be
            marked with <c>[CustomAction]</c> attribute.
            </para>
            <para>
            If Managed CustomAction depends on any assembly, which will not be registered with GAC on the 
            target system such assembly needs to be listed in the <see cref="F:WixSharp.ManagedAction.RefAssemblies"/>.
            </para>
            <remarks>
            <see cref="T:WixSharp.ManagedAction"/> often needs to be executed with the elevated privileges. Thus after instantiation it will have 
            <see cref="F:WixSharp.Action.Impersonate"/> set to <c>false</c> and <see cref="F:WixSharp.Action.Execute"/> set to <c>Execute.deferred</c> to allow elevating.
            </remarks>
            </summary>
            <example>The following is an example of using <c>MyManagedAction</c> method of the class 
            <c>CustomActions</c> as a Managed CustomAction.
            <code>
            class Script
            {
                static public void Main(string[] args)
                {
                    var project = 
                        new Project("My Product",
                
                            new Dir(@"%ProgramFiles%\My Company\My Product",
                    
                                new File(@"AppFiles\MyApp.exe",
                                    new WixSharp.Shortcut("MyApp", @"%ProgramMenu%\My Company\My Product"),
                                    new WixSharp.Shortcut("MyApp", @"%Desktop%")),
                            
                                new File(@"AppFiles\Readme.txt"),
                        
                            new ManagedAction(CustomActions.MyManagedAction),
                    
                            ...
                    
                    Compiler.BuildMsi(project);
                }
            }
            
            public class CustomActions
            {
                [CustomAction]
                public static ActionResult MyManagedAction(Session session)
                {
                    MessageBox.Show("Hello World!", "Managed CA");
                    return ActionResult.Success;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:WixSharp.ManagedAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ManagedAction"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.ManagedAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="name">Name of the CustomAction. The name should match the method implementing the custom action functionality.</param>
        </member>
        <member name="M:WixSharp.ManagedAction.#ctor(WixSharp.CustomActionMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="action">The full name of static CustomAction method.</param>
        </member>
        <member name="M:WixSharp.ManagedAction.#ctor(WixSharp.Id,WixSharp.CustomActionMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ManagedAction"/> instance.</param>
            <param name="action">The full name of static CustomAction method.</param>
        </member>
        <member name="M:WixSharp.ManagedAction.#ctor(WixSharp.CustomActionMethod,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="action">The full name of static CustomAction method.</param>
            <param name="actionAssembly">Path to the assembly containing the CustomAction implementation. Specify <c>"%this%"</c> if the assembly 
            is in the Wix# script.</param>
        </member>
        <member name="M:WixSharp.ManagedAction.#ctor(WixSharp.Id,WixSharp.CustomActionMethod,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ManagedAction"/> instance.</param>
            <param name="action">The full name of static CustomAction method.</param>
            <param name="actionAssembly">Path to the assembly containing the CustomAction implementation. Specify <c>"%this%"</c> if the assembly 
            is in the Wix# script.</param>
        </member>
        <member name="M:WixSharp.ManagedAction.#ctor(WixSharp.CustomActionMethod,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="action">The full name of static CustomAction method.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ManagedAction"/>.</param>
        </member>
        <member name="M:WixSharp.ManagedAction.#ctor(WixSharp.CustomActionMethod,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="action">The full name of static CustomAction method.</param>
            <param name="actionAssembly">Path to the assembly containing the CustomAction implementation. Specify <c>"%this%"</c> if the assembly 
            is in the Wix# script.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ManagedAction"/>.</param>
        </member>
        <member name="M:WixSharp.ManagedAction.#ctor(WixSharp.Id,WixSharp.CustomActionMethod,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="action">The full name of static CustomAction method.</param>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ManagedAction"/> instance.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ManagedAction"/>.</param>
        </member>
        <member name="M:WixSharp.ManagedAction.#ctor(WixSharp.Id,WixSharp.CustomActionMethod,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ManagedAction"/> instance.</param>
            <param name="action">The full name of static CustomAction method.</param>
            <param name="actionAssembly">Path to the assembly containing the CustomAction implementation. Specify <c>"%this%"</c> if the assembly 
            is in the Wix# script.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ManagedAction"/>.</param>
        </member>
        <member name="M:WixSharp.ManagedAction.#ctor(WixSharp.CustomActionMethod,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="action">The full name of static CustomAction method.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ManagedAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="M:WixSharp.ManagedAction.#ctor(WixSharp.CustomActionMethod,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="action">The full name of static CustomAction method.</param>
            <param name="actionAssembly">Path to the assembly containing the CustomAction implementation. Specify <c>"%this%"</c> if the assembly 
            is in the Wix# script.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ManagedAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="M:WixSharp.ManagedAction.#ctor(WixSharp.Id,WixSharp.CustomActionMethod,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ManagedAction"/> instance.</param>
            <param name="action">The full name of static CustomAction method.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ManagedAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="M:WixSharp.ManagedAction.#ctor(WixSharp.Id,WixSharp.CustomActionMethod,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ManagedAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ManagedAction"/> instance.</param>
            <param name="action">The full name of static CustomAction method.</param>
            <param name="actionAssembly">Path to the assembly containing the CustomAction implementation. Specify <c>"%this%"</c> if the assembly 
            is in the Wix# script.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ManagedAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="F:WixSharp.ManagedAction.RefAssemblies">
            <summary>
            Collection of path strings for dependency assemblies to be included in MSI. <c>RefAssemblies</c> should be used if the Managed CustomAction 
            depends on any assembly, which will not be registered with GAC on the target system.
            </summary>
        </member>
        <member name="F:WixSharp.ManagedAction.ActionAssembly">
            <summary>
            Path to the assembly containing the CustomAction implementation. Specify <c>"%this%"</c> if the assembly 
            is in the Wix# script. 
            <para>Default value is <c>%this%</c>.</para>
            </summary>
        </member>
        <member name="F:WixSharp.ManagedAction.MethodName">
            <summary>
            Name of the method implementing the Managed CustomAction action functionality.
            </summary>
        </member>
        <member name="F:WixSharp.ManagedAction.UsesProperties">
            <summary>
            Comma separated list of properties which the custom action is intended to use. Set this property if you are implementing the 'deferred' (as well as 'rollback'  and 'commit')  action. 
            <remarks>
            <para>Deferred custom actions cannot access any session property as the session is terminated at the time of the action execution (limitation of MSI).
            The standard way of overcoming this limitation is to create a new custom action for setting the property, set the property name to the name of the deferred action,
            set the property value to the specially formatted map, schedule the execution of the custom action and access the mapped properties only via <see cref="T:Microsoft.Deployment.WindowsInstaller.Session.CustomActionData"/>. 
            </para>
            <para> All this can be done in a single hit with Wix# as it fully automates creation of the all mapping infrastructure. 
            </para>   
            </remarks>    
            </summary>
            <example>The following is the example of passing the location of the MyApp.exe file in the deferred managed action.
            <code>
            var project =
                new Project("My Product",
                    new Dir(@"%ProgramFiles%\My Company\My Product",
                        new File(@"Files\MyApp.exe"),
                        new File(@"Files\MyApp.exe.config")),
                    new ElevatedManagedAction("ConfigureProduct", Return.check, When.After, Step.InstallFiles, Condition.NOT_Installed)
                    {
                        UsesProperties = "INSTALLDIR"
                    });
            
            ...
            
            [CustomAction]
            public static ActionResult ConfigureProduct(Session session)
            {
                string configFile = session.Property("INSTALLDIR") + "MyApp.exe.config";
                ...
            </code>
            </example>
            <remarks> 
            <para>Note that you don't even have to specify <c>UsesProperties = "INSTALLDIR"</c> as by default Wix# always maps INSTALLDIR and 
            UILevel for all deferred managed actions. The default mapping is controlled by <see cref="F:WixSharp.ManagedAction.DefaultUsesProperties"/>.</para>
            <para>It is also possible to map the 'deferred' properties in the typical WiX way: </para>
            <code>UsesProperties = "CONFIG_FILE=[INSTALLDIR]MyApp.exe.config, APP_FILE=[INSTALLDIR]MyApp.exe"</code>
            </remarks>
        </member>
        <member name="F:WixSharp.ManagedAction.DefaultUsesProperties">
            <summary>
            The default properties mapped for use with the 'deferred' (as well as 'rollback'  and 'commit') custom actions. See <see cref="F:WixSharp.ManagedAction.UsesProperties"/> for the details.
            <para>The default value is "INSTALLDIR,UILevel"</para>
            </summary>
        </member>
        <member name="T:WixSharp.PathFileAction">
            <summary>
            Defines WiX CustomAction for executing file specified by the path on the target system. 
            </summary>
            <example>The following is an example of using <c>PathFileAction</c> to run
            executable present on the target system (<c>Notepad.exe</c>):
            <code>
            var project = 
                new Project("My Product",
                
                    new Dir(@"%ProgramFiles%\My Company\My Product",
                    
                        new File(@"AppFiles\MyApp.exe",
                            new WixSharp.Shortcut("MyApp", @"%ProgramMenu%\My Company\My Product"),
                            new WixSharp.Shortcut("MyApp", @"%Desktop%")),
                            
                        new File(@"AppFiles\Readme.txt"),
                        
                   new PathFileAction(@"%WindowsFolder%\notepad.exe", 
                                       "Readme.txt", 
                                       @"%ProgramFiles%\My Company\My Product", 
                                       Return.asyncNoWait, 
                                       When.After, 
                                       Step.InstallFinalize, 
                                       Condition.NOT_Installed), 
                    ...
                    
            Compiler.BuildMsi(project);
            </code>
            </example>
        </member>
        <member name="M:WixSharp.PathFileAction.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.PathFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="appPath">Path to the file to be executed on the target system.</param>
            <param name="args">The arguments to be passed to the file during the execution.</param>
            <param name="workingDir">Working directory for the file execution.</param>
        </member>
        <member name="M:WixSharp.PathFileAction.#ctor(WixSharp.Id,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.PathFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.PathFileAction"/> instance.</param>
            <param name="appPath">Path to the file to be executed on the target system.</param>
            <param name="args">The arguments to be passed to the file during the execution.</param>
            <param name="workingDir">Working directory for the file execution.</param>
        </member>
        <member name="M:WixSharp.PathFileAction.#ctor(System.String,System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.PathFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="appPath">Path to the file to be executed on the target system.</param>
            <param name="args">The arguments to be passed to the file during the execution.</param>
            <param name="workingDir">Working directory for the file execution.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.PathFileAction"/>.</param>
        </member>
        <member name="M:WixSharp.PathFileAction.#ctor(WixSharp.Id,System.String,System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.PathFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.PathFileAction"/> instance.</param>
            <param name="appPath">Path to the file to be executed on the target system.</param>
            <param name="args">The arguments to be passed to the file during the execution.</param>
            <param name="workingDir">Working directory for the file execution.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.PathFileAction"/>.</param>
        </member>
        <member name="M:WixSharp.PathFileAction.#ctor(System.String,System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.PathFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="appPath">Path to the file to be executed on the target system.</param>
            <param name="args">The arguments to be passed to the file during the execution.</param>
            <param name="workingDir">Working directory for the file execution.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.PathFileAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="M:WixSharp.PathFileAction.#ctor(WixSharp.Id,System.String,System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.PathFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.PathFileAction"/> instance.</param>
            <param name="appPath">Path to the file to be executed on the target system.</param>
            <param name="args">The arguments to be passed to the file during the execution.</param>
            <param name="workingDir">Working directory for the file execution.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.PathFileAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="F:WixSharp.PathFileAction.WorkingDir">
            <summary>
            Working directory for the file execution.
            </summary>
        </member>
        <member name="F:WixSharp.PathFileAction.AppPath">
            <summary>
            Path to the file to be executed on the target system.
            </summary>
        </member>
        <member name="F:WixSharp.PathFileAction.Args">
            <summary>
            The arguments to be passed to the file during the execution.
            </summary>
        </member>
        <member name="T:WixSharp.Project">
             <summary>
             Represents Wix# project. This class defines the WiX/MSI entities and their relationships.
             <para>
             		<see cref="T:WixSharp.Project"/> instance can be compiled into complete MSI or WiX source file with one of the <see cref="T:WixSharp.Compiler"/> "Build" methods.
             </para>
             	<para>
             Use <see cref="T:WixSharp.Project"/> non-default constructor or C# initializers to specify required installation components.
             </para>
             </summary>
             <example>
             	<code>
             var project = new Project("MyProduct",
                                       new Dir(@"%ProgramFiles%\My Company\My Product",
                                                 new File(@"Files\Bin\MyApp.exe"),
                                                 new Dir(@"Docs\Manual",
                                                 new File(@"Files\Docs\Manual.txt"))));
            
             project.GUID = new Guid("6f330b47-2577-43ad-9095-1861ba25889b");
             project.BuildMsi();
             </code>
             </example>
        </member>
        <member name="M:WixSharp.Project.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Project"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.Project.#ctor(System.String,WixSharp.WixObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Project"/> class.
            </summary>
            <param name="name">The name of the project. Typically it is the name of the product to be installed.</param>
            <param name="items">The project installable items (e.g. directories, files, registry keys, Custom Actions).</param>
        </member>
        <member name="F:WixSharp.Project.Description">
            <summary>
            The product full name or description.
            </summary>
        </member>
        <member name="F:WixSharp.Project.DigitalSignature">
            <summary>
            Parameters of digitaly sign of this project
            </summary>
        </member>
        <member name="F:WixSharp.Project.Package">
             <summary>
             Generic <see cref="T:WixSharp.WixEntity"/> container for defining WiX <c>Package</c> element attributes.
             <para>These attributes are the properties about the package to be placed in the Summary Information Stream. These are visible from COM through the IStream interface, and these properties can be seen on the package in Explorer. </para>
            <example>The following is an example of defining the <c>Package</c> attributes.
            <code>
             var project =
                 new Project("My Product",
                     new Dir(@"%ProgramFiles%\My Company\My Product",
            
                 ...
            
             project.Package.AttributesDefinition = @"AdminImage=Yes;
                                                      Comments=Release candidate;
                                                      Description=Fantastic product...";
            
             Compiler.BuildMsi(project);
             </code>
             </example>
             </summary>
        </member>
        <member name="F:WixSharp.Project.Platform">
            <summary>
            The target platform type.
            </summary>
        </member>
        <member name="F:WixSharp.Project.Media">
             <summary>
             Collection of Media generic <see cref="T:WixSharp.WixEntity"/> containers for defining WiX <c>Media</c> elements
             attributes. Project is always initialized with a sinle Media item. Though if you add multiples media items via
             <see cref="T:WixSharp.Project"/> constructor it remeve the initial Media item befeore adding any new items.
             <para>These attributes describe a disk that makes up the source media for the installation.</para>
            <example>The following is an example of defining the <c>Package</c> attributes.
            <code>
             var project =
                 new Project("My Product",
                     new Dir(@"%ProgramFiles%\My Company\My Product",
            
                 ...
            
             project.Media.First().Id = 2;
             project.Media.First().CompressionLevel = CompressionLevel.mszip;
            
             Compiler.BuildMsi(project);
             </code>
             </example>
             </summary>
        </member>
        <member name="F:WixSharp.Project.LicenceFile">
            <summary>
            Relative path to RTF file with the custom licence agreement to be displayed in the Licence dialog.
            If this value is not specified the default WiX licence agreement will be used.
            </summary>
        </member>
        <member name="F:WixSharp.Project.Encoding">
            <summary>
            The Encoding to be used for MSI UI dialogs. If not specified the
            <c>System.Text.Encoding.Default</c> will be used.
            </summary>
        </member>
        <member name="F:WixSharp.Project.UI">
            <summary>
            Type of the MSI User Interface. This value is assigned to the <c>UIRef</c> WiX element during the compilation.
            If not specified <see cref="F:WixSharp.WUI.WixUI_Minimal"/> will used.
            </summary>
        </member>
        <member name="F:WixSharp.Project.EmbeddedUI">
            <summary>
            The Binary (assembly) implementing WiX embedded UI
            </summary>
        </member>
        <member name="F:WixSharp.Project.CustomUI">
            <summary>
            The custom UI definition. Use CustomUIBuilder to generate the WiX UI definition or compose
            <see cref="T:WixSharp.Controls.CustomUI"/> manually.
            </summary>
        </member>
        <member name="F:WixSharp.Project.MajorUpgrade">
            <summary>
            Simplifies authoring for major upgrades, including support for preventing downgrades.
            </summary>
        </member>
        <member name="F:WixSharp.Project.UpgradeCode">
            <summary>
            This is the value of the <c>UpgradeCode</c> attribute of the Wix <c>Product</c> element.
            <para>Both WiX and MSI consider this element as optional even it is the only available identifier
            for defining relationship between different versions of the same product. Wix# in contrary enforces
            that value to allow any future updates of the product being installed.
            </para>
            <para>
            If user doesn't specify this value Wix# engine will use <see cref="P:WixSharp.Project.GUID"/> as <c>UpgradeCode</c>.
            </para>
            </summary>
        </member>
        <member name="P:WixSharp.Project.GUID">
            <summary>
            This value uniquely identifies the software product being installed.
            <para>
            All setup build scripts for different versions of the same product should have the same <see cref="P:WixSharp.Project.GUID"/>.
            If user doesn't specify this value Wix# engine will generate new random GUID for it.
            </para>
            <remarks>This value should not be confused with MSI <c>ProductId</c>, which is in fact
            not an identifier of the product but rather an identifier of the product particular version.
            MSI uses <c>UpgradeCode</c> as a common identification of the product regardless of it's version.
            <para>In a way <see cref="P:WixSharp.Project.GUID"/> is an alias for <see cref="F:WixSharp.Project.UpgradeCode"/>.</para>
            </remarks>
            </summary>
        </member>
        <member name="F:WixSharp.Project.ControlPanelInfo">
            <summary>
             Set of values in 'Add/Remove Programs' of Control Panel.
            </summary>
        </member>
        <member name="F:WixSharp.Project.ScheduleReboot">
            <summary>
            Provides fine control over rebooting at the end of installation.
            <para>If set it creates <c>ScheduleReboot</c> element in the <c>InstallExecuteSequence</c> or <c>InstallUISequence</c>.</para>
            </summary>
            <example>
            <code>
            var project = new Project("MyProduct",
                              new Dir("%ProgramFiles%",
                              ...
            project.ScheduleReboot = new ScheduleReboot { InstallSequence = RebootInstallSequence.Both };
            </code>
            </example>
        </member>
        <member name="F:WixSharp.Project.ForceReboot">
            <summary>
            Provideds fine control over rebooting at the end of installation.
            <para>If set it creates <c>ForceReboot</c> element in the <c>InstallExecuteSequence</c>.</para>
            </summary>
            <example>
            <code>
            var project = new Project("MyProduct",
                              new Dir("%ProgramFiles%",
                              ...
            project.ForceReboot = new ForceReboot();
            </code>
            </example>
        </member>
        <member name="F:WixSharp.Project.RebootSupressing">
            <summary>
            Provides fine control over rebooting at the end of installation.
            <para>If set it creates MSI <c>REBOOT</c> property with the user specified value <see cref="F:WixSharp.Project.RebootSupressing"/>.</para>
            </summary>
            <example>
            <code>
            var project = new Project("MyProduct",
                              new Dir("%ProgramFiles%",
                              ...
            project.RebootSupressing = RebootSupressing.ReallySuppress;
            </code>
            </example>
        </member>
        <member name="F:WixSharp.Project.InstallScope">
            <summary>
            Use this attribute if you need to specify the installation scope of this package: per-machine or per-user.
            </summary>
        </member>
        <member name="F:WixSharp.Project.Version">
            <summary>
            Version of the product to be installed.
            </summary>
        </member>
        <member name="F:WixSharp.Project.MajorUpgradeStrategy">
             <summary>
             Defines Major Upgrade behavior. By default it is <c>null</c> thus upgrade is not supported.
             <para>If you need to implement Major Upgrade define this member to appropriate
             <see cref="F:WixSharp.Project.MajorUpgradeStrategy"/> instance.</para>
             <para><c>Note</c>: <see cref="F:WixSharp.Project.MajorUpgradeStrategy"/> yields WiX UpgradeVersion element, which is arguably the most comprehensive
             upgrade definition. However in the later versions of WiX a simplified upgrade definition has been introduced. It relies
             on MajorUpgrade WiX element. For most of the upgrade scenarios you will find that MajorUpgrade allows to achieve the same result with
             much less effort. Wix# supports MajorUpgrade element via  <see cref="F:WixSharp.Project.MajorUpgrade"/> member.</para>
             </summary>
            <example>The following is an example of building product MSI with auto uninstalling any older version of the product
            and preventing downgrading.
            <code>
             var project = new Project("My Product",
                               ...
            
             project.MajorUpgradeStrategy =  new MajorUpgradeStrategy
                                             {
                                                 UpgradeVersions = VersionRange.OlderThanThis,
                                                 PreventDowngradingVersions = VersionRange.NewerThanThis,
                                                 NewerProductInstalledErrorMessage = "Newer version already installed",
                                             };
             Compiler.BuildMsi(project);
             </code>
             or the same scenario but using predefined <c>MajorUpgradeStrategy.Default</c> strategy.
            <code>
             project.MajorUpgradeStrategy = MajorUpgradeStrategy.Default;
             </code>
             You can also specify custom range of versions:
            <code>
             project.MajorUpgradeStrategy =  new MajorUpgradeStrategy
                                             {
                                                 UpgradeVersions = new VersionRange
                                                                       {
                                                                          Minimum = "2.0.5.0", IncludeMaximum = true,
                                                                          Maximum = "%this%", IncludeMaximum = false
                                                                       },
                                                 PreventDowngradingVersions = new VersionRange
                                                                       {
                                                                          Minimum = "%this%", IncludeMinimum = false
                                                                       },
                                                 NewerProductInstalledErrorMessage = "Newer version already installed",
                                             };
             </code>
             Note that %this% will be replaced by Wix# compiler with <c>project.Version.ToString()</c> during the MSI building.
             However you can use explicit values (e.g. 1.0.0) if you prefer.
             </example>
        </member>
        <member name="M:WixSharp.Project.GenerateProductGuids">
            <summary>
            Generates all missing product Guids (e.g. <see cref="F:WixSharp.Project.UpgradeCode"/> and <see cref="F:WixSharp.Project.ProductId"/>).
            <para>Wix# compiler call this method just before building the MSI. However you can call it any time
            if you want to preview auto-generated Guids.</para>
            </summary>
        </member>
        <member name="M:WixSharp.Project.CalculateProductId(System.Guid,System.Version)">
            <summary>
            Calculates the product id.
            </summary>
            <param name="productGuid">The product GUID.</param>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="F:WixSharp.Project.ProductId">
            <summary>
            This is the value of the <c>Id</c> attribute of the Wix <c>Product</c> element.
            This value is unique for any given version of a product being installed.
            <para></para>
            If user doesn't specify this value Wix# engine will derive it from
            project <see cref="P:WixSharp.Project.GUID"/> and the product <see cref="F:WixSharp.Project.Version"/>.
            </summary>
        </member>
        <member name="F:WixSharp.Project.Dirs">
            <summary>
            Collection of <see cref="T:WixSharp.Dir"/>s to be installed.
            </summary>
        </member>
        <member name="F:WixSharp.Project.Actions">
            <summary>
            Collection of <see cref="F:WixSharp.Project.Actions"/>s to be performed during the installation.
            </summary>
        </member>
        <member name="F:WixSharp.Project.RegValues">
            <summary>
            Collection of <see cref="T:WixSharp.RegValue"/>s to be set during the installation.
            </summary>
        </member>
        <member name="F:WixSharp.Project.EnvironmentVariables">
            <summary>
            Collection of <see cref="T:WixSharp.EnvironmentVariable"/>s to be set during the installation.
            </summary>
        </member>
        <member name="F:WixSharp.Project.Certificates">
            <summary>
            Collection of <see cref="T:WixSharp.Certificate"/> to be installed.
            </summary>
        </member>
        <member name="F:WixSharp.Project.FirewallExceptions">
            <summary>
            Collection of <see cref="T:WixSharp.FirewallException"/> to be installed.
            </summary>
        </member>
        <member name="F:WixSharp.Project.GenericItems">
            <summary>
            Collection of the user defined <see cref="T:WixSharp.IGenericEntity"/> items.
            </summary>
        </member>
        <member name="F:WixSharp.Project.Properties">
            <summary>
            Collection of WiX/MSI <see cref="T:WixSharp.Property"/> objects to be created during the installed.
            </summary>
        </member>
        <member name="F:WixSharp.Project.EmitConsistentPackageId">
            <summary>
            Indicates whether compiler should emit consistent package Id (package code). Set <c>EmitConsistentPackageId</c> to 'false' (default value) if
            you want the WiX compilers automatically generate a new package code for each new .msi file built. Or set it to 'true' if you want Wix# to auto generate a
            unique consistent package code for a given combination of the product code, product version and product upgrade code.
            <para>
            WiX package code generation policy discourages the use of this attribute as it is a primary MSI identifier
            used to distinguish packages in ARP. Thus WiX tools always auto-generate the code for each build. This in turn makes it impossible to
            rebuild a truly identical MSIs from the same WiX code even with the same set of product code, version and upgrade code.
            </para><para>
            This very artificial limitation has severe practical impact. For example if a specific MSI file is lost it cannot be recreated even if
            the original source code that was used to built the lost MSI is available.
            </para><para>
            From another hand Wix# encourages using a singe GUID (Project.GUID) as a primary identifier of the product. Thus all other MSI identifiers
            can be derived by the compiler from the unique combination of this GUID and the product version. This also included generation of the package Id
            attribute controlled by the EmitConsistentPackageId.
            </para><para>
            Wix# does not changes the WiX default package code generation it just gives the opportunity to control it when required.
            </para>
            </summary>
        </member>
        <member name="F:WixSharp.Project.Binaries">
            <summary>
            Collection of WiX/MSI <see cref="T:WixSharp.Binary"/> objects to be embedded into MSI database.
            Normally you doe not need to deal with this property as <see cref="T:WixSharp.Compiler"/> will populate
            it automatically.
            </summary>
        </member>
        <member name="F:WixSharp.Project.DefaultRefAssemblies">
            <summary>
            Collection of paths to the assemblies referenced by <see cref="T:WixSharp.ManagedAction"/>s.
            </summary>
        </member>
        <member name="F:WixSharp.Project.LaunchConditions">
            <summary>
            Collection of the <see cref="T:WixSharp.LaunchCondition"/>s associated with the setup.
            </summary>
        </member>
        <member name="F:WixSharp.Project.Users">
            <summary>
            Collection of Wix:UtilExtension User objects representings users 'for all kinds of things'
            </summary>
        </member>
        <member name="F:WixSharp.Project.SqlDatabases">
            <summary>
            Collection of WiX:SqlExtension SqlDatabase objects representing databases to be created,
            modifed, or interacted with during MSI execution.
            </summary>
        </member>
        <member name="F:WixSharp.Project.BannerImage">
            <summary>
            Path to the file containing the image (e.g. bmp) setup dialogs banner. If not specified default image will be used.
            </summary>
        </member>
        <member name="F:WixSharp.Project.BackgroundImage">
            <summary>
            Path to the file containing the image (e.g. bmp) setup dialogs background. If not specified default image will be used.
            <remarks>
            <para>If the image is to be used in the default ManagedUI dialogs it will be left-docked at runtime and will effectively
            play the role of a left-aligned dialog banner. Thus if it is too wide it can push away (to right) the all other UI elements.
            The optimal size of the image for ManagedUI is 494x312.</para>
            </remarks>
            </summary>
        </member>
        <member name="F:WixSharp.Project.ValidateBackgroundImage">
            <summary>
            Performs validation of aspect ratio for <see cref="F:WixSharp.Project.BackgroundImage"/>. Validation assists with avoiding the situations
            when ManagedUI dialog has UI elements 'pushed away' from the view by oversizes <see cref="F:WixSharp.Project.BackgroundImage"/>.
            </summary>
        </member>
        <member name="P:WixSharp.Project.DefaultFeature">
            <summary>
            Gets or Sets the default Feature for the project.
            All elements without an explicitly assigned Feature will be placed under the DefaultFeature.
            If DefaultFeature is not set, then DefaultFeature will default to a Feature with name 'Complete'.
            </summary>
        </member>
        <member name="M:WixSharp.Project.ResolveWildCards(System.Boolean)">
            <summary>
            Resolves all wild card specifications if any.
            <para>
            This method is called by <see cref="T:WixSharp.Compiler" /> during the compilation. However it might be convenient
            to call it before the compilation if any files matching the wild card mask need to be handled in special
            way (e.g. shortcuts created). See <c>WildCard Files</c> example.
            </para><remarks><see cref="M:WixSharp.Project.ResolveWildCards(System.Boolean)" /> should be called only after <see cref="T:WixSharp.WixProject.SourceBaseDir" /> is set.
            Otherwise wild card paths may not be resolved correctly.</remarks>
            </summary>
            <param name="ignoreEmptyDirectories">if set to <c>true</c> empty directories are ignored and not added to the project.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Project.FindFile(System.Func{WixSharp.File,System.Boolean})">
            <summary>
            Returns all <see cref="T:WixSharp.File"/>s of the <see cref="T:WixSharp.Project"/> matching the <paramref name="match"/> pattern.
            </summary>
            <param name="match">The match pattern.</param>
            <returns>Matching <see cref="T:WixSharp.File"/>s.</returns>
        </member>
        <member name="P:WixSharp.Project.AllFiles">
            <summary>
            Flattened "view" of all <see cref="T:WixSharp.File"/>s of the <see cref="T:WixSharp.Project"/>.
            </summary>
        </member>
        <member name="P:WixSharp.Project.AllDirs">
            <summary>
            Flattened "view" of all <see cref="T:WixSharp.Dir"/>s of the <see cref="T:WixSharp.Project"/>.
            </summary>
        </member>
        <member name="M:WixSharp.Project.FindDir(System.String)">
            <summary>
            Finds <see cref="T:WixSharp.Dir"/> corresponding to the specified path.
            </summary>
            <example>
            <code>
            new Project("MyProduct",
                new Dir("%ProgramFiles%",
                    new Dir("My Company",
                        new Dir("My Product",
                        ...
            </code>
            In the sample above the call <c>FindDir(@"%ProgramFiles%\My Company\My Product")</c> returns the last declared <see cref="T:WixSharp.Dir"/>.
            </example>
            <param name="path">The path string.</param>
            <returns><see cref="T:WixSharp.Dir"/> instance if the search was succesfull, otherwise return <c>null</c></returns>
        </member>
        <member name="F:WixSharp.Project.InstallerVersion">
            <summary>
            The installer version
            </summary>
        </member>
        <member name="P:WixSharp.Project.Codepage">
            <summary>
            Installation UI Code Page. If not specified
            ANSICodePage of the <see cref="T:WixSharp.WixProject.Language"/> will be used.
            </summary>
        </member>
        <member name="P:WixSharp.Project.Culture">
            <summary>
            List of culture names (see <see cref="T:System.Globalization.CultureInfo"/>) based on the specified <see cref="T:WixSharp.WixProject.Language"/>
            </summary>
        </member>
        <member name="F:WixSharp.Project.LocalizationFile">
            <summary>
            Path to the Localization file.
            </summary>
        </member>
        <member name="F:WixSharp.Project.AutoAssignedInstallDirPath">
            <summary>
            Name (path) of the directory which was assigned <see cref="T:WixSharp.Compiler.AutoGeneration.InstallDirDefaultId"/> ID as part of XML auto-generation (see <see cref="T:WixSharp.AutoGenerationOptions"/>).
            </summary>
        </member>
        <member name="M:WixSharp.Project.BuildMsi(System.String)">
            <summary>
            Builds the MSI file from the specified <see cref="T:WixSharp.Project"/> instance.
            </summary>
            <param name="path">The path to the MSI file to be build.</param>
            <returns>Path to the built MSI file.</returns>
        </member>
        <member name="M:WixSharp.Project.BuildMsiCmd(System.String)">
            <summary>
            Builds the WiX source file and generates batch file capable of building
            MSI with WiX toolset.
            </summary>
            <param name="path">The path to the batch file to be build.</param>
            <returns>Path to the batch file.</returns>
        </member>
        <member name="M:WixSharp.Project.BuildWxs(WixSharp.Compiler.OutputType,System.String)">
            <summary>
            Builds the WiX source file (*.wxs) from the specified <see cref="T:WixSharp.Project"/> instance.
            </summary>
            <param name="path">The path to the WXS file to be build.</param>
            <param name="type">The type (<see cref="T:WixSharp.Compiler.OutputType"/>) of the setup file to be defined in the source file (MSI vs. MSM).</param>
            <returns>Path to the built WXS file.</returns>
        </member>
        <member name="M:WixSharp.Project.BuildMsm(System.String)">
            <summary>
            Builds the MSM file from the specified <see cref="T:WixSharp.Project"/> instance.
            </summary>
            <param name="path">The path to the MSM file to be build.</param>
            <returns>Path to the built MSM file.</returns>
        </member>
        <member name="M:WixSharp.Project.BuildMsmCmd(System.String)">
            <summary>
            Builds the WiX source file and generates batch file capable of building
            MSM with WiX toolset.
            </summary>
            <param name="path">The path to the batch file to be build.</param>
            <returns>Path to the batch file.</returns>
        </member>
        <member name="T:WixSharp.PropertyRef">
             <summary>
             Defines reference to the Wix custom property.
             <para>
             Sometimes it desirable to access WiX properties defined in the extension modules. <see cref="T:WixSharp.PropertyRef"/> is designed for such cases. You can use it as an ordinary WiX property
             but you do not need to set it up (e.g. define initial value) as it is already done in the corresponding extension module.
             </para>
             <para>
             In a way <c>PropertyRef</c> is similar to C++ #include as it makes possible to access some entities defined in the external modules.
             </para>
             </summary>
             <remarks>
             <see cref="T:WixSharp.PropertyRef"/> inherits from <see cref="T:WixSharp.Property"/> because of their logical relationship and usability pattern, not because of any "Parent/Child" connection.
             </remarks>
            <example>The following is an example of using <c>NETFRAMEWORK20</c> property defined in the <c>WiXNetFxExtension</c> WiX extension.
            <code>
            
             var project = new Project("Setup",
                 new PropertyRef("NETFRAMEWORK20"),
                 new ManagedAction("MyAction", Return.check, When.After, Step.InstallInitialize, Condition.NOT_BeingRemoved));
            
             project.IncludeWixExtension(WixExtension.NetFx);
            
             Compiler.BuildMsi(project);
            
             ...
            
             public class CustomActions
            {
                [CustomAction]
                public static ActionResult MyAction(Session session)
                {
                    MessageBox.Show(session["NETFRAMEWORK20"], "");
                    return ActionResult.Success;
                }
            }
             </code>
             </example>
        </member>
        <member name="M:WixSharp.PropertyRef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.PropertyRef"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.PropertyRef.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.PropertyRef"/> class.
            </summary>
            <param name="id"><c>Id</c> of the property being referenced.</param>
        </member>
        <member name="P:WixSharp.PropertyRef.Id">
            <summary>
            <c>Id</c> of the property being referenced.
            </summary>
        </member>
        <member name="T:WixSharp.Property">
             <summary>
             Defines WiX custom property.
             <para>
             Traditional property usage involves defining the property by instantiating the <see cref="T:WixSharp.Property"/>
             class (in the <see cref="T:WixSharp.Project"/> structure) and then setting it from CustomAction (e.g. <see cref="T:WixSharp.SetPropertyAction"/>).
            <para>Property value can be analyzed and used in <c>CustomActions</c> or it can be a base for the <see cref="T:WixSharp.Condition"/>
            of item to be installed.</para>
             </para>
             </summary>
            <example>The following is an example of installing <c>MyApp.exe</c> file.
            <code>
             string installDirId = @"%ProgramFiles%\CustomActionTest".ToDirID();
            
             var project = new Project()
             {
                 Dirs = new[] { new Dir(@"%ProgramFiles%\PropertiesTest") },
            
                 Actions = new Action[]
                 {
                     new SetPropertyAction("IDIR", "[" + installDirId + "]"),
                 },
            
                 Properties = new[]
                 {
                     new Property("ALLUSERS", "1"),
                     new Property("IDIR", "empty")
                 }
            
                 ...
            
             [CustomAction]
             public static ActionResult MyAction(Session session)
             {
                 MessageBox.Show(session["IDIR"]);
                 return ActionResult.Success;
             }
             </code>
             </example>
        </member>
        <member name="M:WixSharp.Property.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Property"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.Property.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Property"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:WixSharp.Property.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Property"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The initial value of the property.</param>
        </member>
        <member name="M:WixSharp.Property.#ctor(WixSharp.Id,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Property"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.Property"/> instance.</param>
            <param name="name">The name of the property.</param>
            <param name="value">The initial value of the property.</param>
        </member>
        <member name="F:WixSharp.Property.Value">
            <summary>
            The initial value of the property.
            </summary>
        </member>
        <member name="F:WixSharp.Property.IsDeferred">
            <summary>
            The flag indicating if the property needs to be 'preserved' for use with the deferred custom actions.
            <para>
            Setting this flag to 'true' has the same effect as adding the property name to <see cref="F:WixSharp.ManagedAction.UsesProperties"/>.
            </para>
            </summary>
        </member>
        <member name="M:WixSharp.Property.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:WixSharp.RegParser">
            <summary>
            Based on Henryk Filipowicz work http://www.codeproject.com/Articles/125573/Registry-Export-File-reg-Parser
            Licensed under The Code Project Open License (CPOL)
            </summary>
        </member>
        <member name="M:WixSharp.RegParser.Parse(System.String)">
            <summary>
            Parses the reg file for reg keys and reg values
            </summary>
            <returns>A Dictionary with reg keys as Dictionary keys and a Dictionary of (valuename, valuedata)</returns>
        </member>
        <member name="M:WixSharp.RegParser.NormalizeDictionary(System.String,System.String,System.Boolean)">
            <summary>
            Creates a flat Dictionary using given search pattern
            </summary>
            <param name="searchPattern">The search pattern</param>
            <param name="content">The content string to be parsed</param>
            <param name="stripeBraces">Flag for striping braces (true for reg keys, false for reg values)</param>
            <returns>A Dictionary with retrieved keys and remaining content</returns>
        </member>
        <member name="M:WixSharp.RegParser.StripeLeadingChars(System.String,System.String)">
            <summary>
            Removes the leading and ending characters from the given string
            </summary>
            <param name="sLine">given string</param>
            <param name="leadChar">The lead character.</param>
            <returns>
            edited string
            </returns>
        </member>
        <member name="M:WixSharp.RegParser.StripeBraces(System.String)">
            <summary>
            Removes the leading and ending parenthesis from the given string
            </summary>
            <param name="sLine">given string</param>
            <returns>edited string</returns>
            <remarks></remarks>
        </member>
        <member name="M:WixSharp.RegParser.GetEncoding(System.String)">
            <summary>
            Retrieves the encoding of the reg file, checking the word "REGEDIT4"
            </summary>
            <returns></returns>
        </member>
        <member name="T:WixSharp.RegValueProperty">
             <summary>
             Defines WiX custom property assigned by MSI runtime during the installation to the RegistrySearch result.
             <para>
             <see cref="T:WixSharp.RegValueProperty"/> is used to set a property from the registry value when accessing the registry is inconvenient for 
             a custom action. 
             
             <para><c>RegistrySearch</c> returns raw data thus data will always contain prefix indicating data type: </para>
             <para><c>DWORD:</c> Starts with '#' optionally followed by '+' or '-'.</para>
             <para><c>REG_BINARY:</c> Starts with '#x' and the installer converts and saves each hexadecimal digit (nibble) as an ASCII character prefixed by '#x'.</para>
             <para><c>REG_EXPAND_SZ:</c> Starts with '#%'.</para>
             <para><c>REG_MULTI_SZ:</c> Starts with '[~]' and ends with '[~]'.</para>
             <para><c>REG_SZ:</c> No prefix, but if the first character of the registry value is '#', the installer escapes the character by prefixing it with another '#'.</para>
             </para>
             </summary>
             <remarks>In Wix# the preferred way of setting a property value is assigning it from <see cref="T:WixSharp.ManagedAction"/>. 
             However <see cref="T:WixSharp.ManagedAction"/> may not be an available option if the target system does not have .NET installed. 
             In such cases <see cref="T:WixSharp.RegValueProperty"/> should be used.</remarks>
            <example>The following is an example of installing <c>DotNET Manual.txt</c> file only if .NET v2.0 is installed.
            <code>
            
             var project = 
                     new Project("MyProduct", 
                         new Dir(@"%ProgramMenu%\My Company\My Product",
                             new File(@"Files\DotNET Manual.txt")
                                 {
                                     Condition = new Condition("NETFRAMEWORK20=\"#1\"") 
                                 },
                 ...
                         new RegValueProperty("NETFRAMEWORK20", 
                                              RegistryHive.LocalMachine, 
                                              @"Software\Microsoft\NET Framework Setup\NDP\v2.0.50727", 
                                              "Install", 
                                              "not_defined"),
                 
             
             </code>
             </example>
        </member>
        <member name="M:WixSharp.RegValueProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.RegValueProperty"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.RegValueProperty.#ctor(System.String,Microsoft.Win32.RegistryHive,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.RegValueProperty"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="root">The registry hive name.</param>
            <param name="key">The registry key name.</param>
            <param name="entryName">The registry entry name.</param>
            <param name="defaultValue">The registry entry default value.</param>
        </member>
        <member name="M:WixSharp.RegValueProperty.#ctor(WixSharp.Id,System.String,Microsoft.Win32.RegistryHive,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.RegValueProperty"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.RegValueProperty"/> instance.</param>
            <param name="name">The name of the property.</param>
            <param name="root">The registry hive name.</param>
            <param name="key">The registry key name.</param>
            <param name="entryName">The registry entry name.</param>
            <param name="defaultValue">The registry entry default value.</param>
        </member>
        <member name="F:WixSharp.RegValueProperty.Root">
            <summary>
            The registry hive name.
            <para>Default value is <c>RegistryHive.CurrentUser</c></para>
            </summary>
        </member>
        <member name="F:WixSharp.RegValueProperty.Key">
            <summary>
            The registry key name.
            <para>Default value is <c>String.Empty</c></para>
            </summary>
        </member>
        <member name="F:WixSharp.RegValueProperty.EntryName">
            <summary>
            The registry entry name.
            <para>Default value is <c>String.Empty</c></para>
            </summary>
        </member>
        <member name="F:WixSharp.RegValueProperty.Win64">
            <summary>
            Instructs the search to look in the 64-bit registry when the value is 'yes'. 
            When the value is 'no', the search looks in the 32-bit registry. 
            The default value is based on the platform set by the -arch switch to candle.exe or the 
            InstallerPlatform property in a .wixproj MSBuild project: For x86 and ARM, the default 
            value is 'no'. For x64 and IA64, the default value is 'yes'.
            </summary>
        </member>
        <member name="T:WixSharp.RegFile">
             <summary>
             Defines the registry file (*.reg) containing the entries to be installed.
             <para>
             Compiler uses the data from this class to call <see cref="T:WixSharp.CommonTasks.ImportRegFile"/>
             internally and inject imported <see cref="T:WixSharp.RegValue"/>s into the <see cref="T:WixSharp.Project"/>.
             </para>
             </summary>
             <example>The following sample demonstrates how to install Registry entries imported from
             the reg file:
             <code>
             var project =
                 new Project("MyProduct",
                     new Dir(@"%ProgramFiles%\My Company\My Product",
                         new File(@"readme.txt")),
                     new RegFile("MyProduct.reg"),
                     ...
            
             Compiler.BuildMsi(project);
             </code>
             </example>
        </member>
        <member name="F:WixSharp.RegFile.Path">
            <summary>
            The path to the registry file (*.reg).
            </summary>
        </member>
        <member name="M:WixSharp.RegFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.RegFile"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.RegFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.RegFile"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:WixSharp.RegFile.#ctor(WixSharp.Feature,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.RegFile"/> class.
            </summary>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the registry value should be included in.</param>
            <param name="path">The path.</param>
        </member>
        <member name="T:WixSharp.RegValue">
             <summary>
             Defines registry value to be installed.
             </summary>
            <example>The following is a complete example of the setup for installing a file and two
            registry values (string value <c>Message</c> and integer value <c>Count</c> ).
            <code>
            static public void Main(string[] args)
            {
                 var project =
                     new Project("MyProduct",
                         new Dir(@"%ProgramFiles%\My Company\My Product",
                             new File(@"readme.txt")),
            
                         new RegValue(RegistryHive.LocalMachine, "Software\\My Company\\My Product", "Message", "Hello"),
                         new RegValue(RegistryHive.LocalMachine, "Software\\My Company\\My Product", "Count", 777));
            
                 Compiler.BuildMsi(project);
             }
             </code>
             </example>
        </member>
        <member name="M:WixSharp.RegValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.RegValue"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.RegValue.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.RegValue"/> class with properties initialized with specified parameters.
            </summary>
            <param name="key">The registry key name.</param>
            <param name="name">The registry entry name.</param>
            <param name="value">The registry entry value.</param>
        </member>
        <member name="M:WixSharp.RegValue.#ctor(Microsoft.Win32.RegistryHive,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.RegValue"/> class with properties initialized with specified parameters.
            </summary>
            <param name="root">The registry hive name.</param>
            <param name="key">The registry key name.</param>
            <param name="name">The registry entry name.</param>
            <param name="value">The registry entry value.</param>
        </member>
        <member name="M:WixSharp.RegValue.#ctor(WixSharp.Feature,Microsoft.Win32.RegistryHive,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.RegValue"/> class with properties initialized with specified parameters.
            </summary>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the registry value should be included in.</param>
            <param name="root">The registry hive name.</param>
            <param name="key">The registry key name.</param>
            <param name="name">The registry entry name.</param>
            <param name="value">The registry entry value.</param>
        </member>
        <member name="M:WixSharp.RegValue.#ctor(WixSharp.Id,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.RegValue"/> class with properties initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.RegValue"/> instance.</param>
            <param name="key">The registry key name.</param>
            <param name="name">The registry entry name.</param>
            <param name="value">The registry entry value.</param>
        </member>
        <member name="M:WixSharp.RegValue.#ctor(WixSharp.Id,Microsoft.Win32.RegistryHive,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.RegValue"/> class with properties initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.RegValue"/> instance.</param>
            <param name="root">The registry hive name.</param>
            <param name="key">The registry key name.</param>
            <param name="name">The registry entry name.</param>
            <param name="value">The registry entry value.</param>
        </member>
        <member name="M:WixSharp.RegValue.#ctor(WixSharp.Id,WixSharp.Feature,Microsoft.Win32.RegistryHive,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.RegValue"/> class with properties initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.RegValue"/> instance.</param>
            <param name="feature"><see cref="T:WixSharp.Feature"></see> the registry value should be included in.</param>
            <param name="root">The registry hive name.</param>
            <param name="key">The registry key name.</param>
            <param name="name">The registry entry name.</param>
            <param name="value">The registry entry value.</param>
        </member>
        <member name="F:WixSharp.RegValue.Root">
            <summary>
            The registry hive name.
            <para>Default value is <c>RegistryHive.CurrentUser</c></para>
            </summary>
        </member>
        <member name="F:WixSharp.RegValue.Key">
            <summary>
            The registry key name.
            <para>Default value is <c>String.Empty</c></para>
            </summary>
        </member>
        <member name="F:WixSharp.RegValue.Value">
            <summary>
            The registry entry value.
            </summary>
        </member>
        <member name="F:WixSharp.RegValue.Condition">
            <summary>
            Defines the installation <see cref="F:WixSharp.RegValue.Condition"/>, which is to be checked during the installation to
            determine if the registry value should be created on the target system.
            </summary>
        </member>
        <member name="F:WixSharp.RegValue.Win64">
            <summary>
            Facilitates the installation of packages that include both 32-bit and 64-bit components.
            Set this attribute to 'yes' to mark the corresponding RegValue as a 64-bit component.
            </summary>
        </member>
        <member name="F:WixSharp.RegValue.RegistryKeyAction">
            <summary>
            Set this to create an empty key, if absent, when the parent component is installed.
            </summary>
        </member>
        <member name="F:WixSharp.RegValue.ForceCreateOnInstall">
            <summary>
            Set this to create an empty key, if absent, when the parent component is installed.
            </summary>
        </member>
        <member name="F:WixSharp.RegValue.ForceDeleteOnUninstall">
            <summary>
            Set this to remove the key with all its values and subkeys when the parent component is uninstalled.
            </summary>
        </member>
        <member name="P:WixSharp.RegValue.NeverOverwrite">
            <summary>
            Gets or sets the NeverOverwrite attribute of the associated WiX component.
            <para>If this attribute is set to 'true', the installer does not install or reinstall the component
             if a registry value for the component already exists. </para>
            </summary>
            <value>
            The never overwrite.
            </value>
        </member>
        <member name="T:WixSharp.ScriptAction">
            <summary>
            Defines WiX CustomAction for executing embedded VBScript. 
            </summary>
            
            <example>The following is an example of using <c>ScriptAction</c> to run
            VBScript code:
            <code>
            var project = 
                new Project("My Product",
                
                    new Dir(@"%ProgramFiles%\My Company\My Product",
                        new File(binaries, @"AppFiles\MyApp.exe",
                            new WixSharp.Shortcut("MyApp", @"%ProgramMenu%\My Company\My Product"),
                            new WixSharp.Shortcut("MyApp", @"%Desktop%")),
                            
                    new ScriptAction(@"MsgBox ""Executing VBScript code...""", 
                                     Return.ignore, 
                                     When.After, 
                                     Step.InstallFinalize, 
                                     Condition.NOT_Installed),
                    ...
                    
            Compiler.BuildMsi(project);
            </code>
            </example>
        </member>
        <member name="M:WixSharp.ScriptAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ScriptAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="code">VBScript code to be executed.</param>
        </member>
        <member name="M:WixSharp.ScriptAction.#ctor(WixSharp.Id,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ScriptAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ScriptAction"/> instance.</param>
            <param name="code">VBScript code to be executed.</param>
        </member>
        <member name="M:WixSharp.ScriptAction.#ctor(System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ScriptAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="code">VBScript code to be executed.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ScriptAction"/>.</param>
        </member>
        <member name="M:WixSharp.ScriptAction.#ctor(WixSharp.Id,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ScriptAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ScriptAction"/> instance.</param>
            <param name="code">VBScript code to be executed.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ScriptAction"/>.</param>
        </member>
        <member name="M:WixSharp.ScriptAction.#ctor(System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ScriptAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="code">VBScript code to be executed.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ScriptAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="M:WixSharp.ScriptAction.#ctor(WixSharp.Id,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ScriptAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ScriptAction"/> instance.</param>
            <param name="code">VBScript code to be executed.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ScriptAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="F:WixSharp.ScriptAction.Code">
            <summary>
            VBScript code to be executed.
            </summary>
        </member>
        <member name="T:WixSharp.ScriptFileAction">
            <summary>
            Defines WiX CustomAction for executing embedded VBScript file. 
            </summary>
            
            <example>The following is an example of using <c>ScriptFileAction</c> to run
            embedded VBScript file (from <c>CustomActions\Sample.vbs</c>):
            <code>
            var project = 
                new Project("My Product",
                
                    new Dir(@"%ProgramFiles%\My Company\My Product",
                        new File(binaries, @"AppFiles\MyApp.exe",
                            new WixSharp.Shortcut("MyApp", @"%ProgramMenu%\My Company\My Product"),
                            new WixSharp.Shortcut("MyApp", @"%Desktop%")),
                            
                    new ScriptAction(@"CustomActions\Sample.vbs", "Execute", 
                                     Return.ignore, 
                                     When.After, 
                                     Step.InstallFinalize, 
                                     Condition.NOT_Installed),
                    ...
                    
            Compiler.BuildMsi(project);
            </code>
            </example>
        </member>
        <member name="M:WixSharp.ScriptFileAction.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ScriptFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="file">VBScript file to be executed.</param>
            <param name="procedure">Name of the procedure (from the <paramref name="file"/>) to be executed.</param>
        </member>
        <member name="M:WixSharp.ScriptFileAction.#ctor(WixSharp.Id,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ScriptFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ScriptFileAction"/> instance.</param>
            <param name="file">VBScript file to be executed.</param>
            <param name="procedure">Name of the procedure (from the <paramref name="file"/>) to be executed.</param>
        </member>
        <member name="M:WixSharp.ScriptFileAction.#ctor(System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ScriptFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="file">VBScript file to be executed.</param>
            <param name="procedure">Name of the procedure (from the <paramref name="file"/>) to be executed.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ScriptFileAction"/>.</param>
        </member>
        <member name="M:WixSharp.ScriptFileAction.#ctor(WixSharp.Id,System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ScriptFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ScriptFileAction"/> instance.</param>
            <param name="file">VBScript file to be executed.</param>
            <param name="procedure">Name of the procedure (from the <paramref name="file"/>) to be executed.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ScriptFileAction"/>.</param>
        </member>
        <member name="M:WixSharp.ScriptFileAction.#ctor(System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ScriptFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="file">VBScript file to be executed.</param>
            <param name="procedure">Name of the procedure (from the <paramref name="file"/>) to be executed.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ScriptFileAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="M:WixSharp.ScriptFileAction.#ctor(WixSharp.Id,System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ScriptFileAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.ScriptFileAction"/> instance.</param>
            <param name="file">VBScript file to be executed.</param>
            <param name="procedure">Name of the procedure (from the <paramref name="file"/>) to be executed.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.ScriptFileAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="F:WixSharp.ScriptFileAction.ScriptFile">
            <summary>
            VBScript file to be executed.
            </summary>
        </member>
        <member name="F:WixSharp.ScriptFileAction.Procedure">
            <summary>
            Name of the procedure (from the <see cref="F:WixSharp.ScriptFileAction.ScriptFile"/>) to be executed.
            </summary>
        </member>
        <member name="T:WixSharp.ServiceInstaller">
             <summary>
              Defines service installer for the file being installed. It encapsulates functionality provided
              by <c>ServiceInstall</c> and <c>ServiceConfig</c> WiX elements.
             </summary>
             <example>The following sample demonstrates how to install service:
             <code>
             File service;
             var project =
                 new Project("My Product",
                     new Dir(@"%ProgramFiles%\My Company\My Product",
                         service = new File(@"..\SimpleService\MyApp.exe")));
            
             service.ServiceInstaller = new ServiceInstaller
                                        {
                                            Name = "WixSharp.TestSvc",
                                            StartOn = SvcEvent.Install,
                                            StopOn = SvcEvent.InstallUninstall_Wait,
                                            RemoveOn = SvcEvent.Uninstall_Wait,
                                        };
              ...
            
             Compiler.BuildMsi(project);
             </code>
             </example>
        </member>
        <member name="M:WixSharp.ServiceInstaller.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ServiceInstaller"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.ServiceInstaller.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ServiceInstaller"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="F:WixSharp.ServiceInstaller.ErrorControl">
            <summary>
            The error control associated with the service startup. The default value is <c>SvcErrorControl.normal</c>.
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.StartType">
            <summary>
            Defines the way service starts. The default value is <c>SvcStartType.auto</c>.
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.DisplayName">
            <summary>
            The display name of the service as it is listed in the Control Panel.
            If not specified the name of the service will be used instead.
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.Description">
            <summary>
            The description of the service as it is listed in the Control Panel.
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.Type">
            <summary>
            The type of the service (e.g. kernel/system driver, process). The default value is <c>SvcType.ownProcess</c>.
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.StartOn">
            <summary>
            Associates 'start service' action with the specific service installation event.
            The default value is <c>SvcEvent.Install</c>. Meaning "start the service when it is installed". 
            <para>
            Set this member to <c>null</c> if you don't want to start the service at any stage of the installation.
            </para>
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.StopOn">
            <summary>
            Associates 'stop service' action with the specific service installation event.
            The default value is <c>SvcEvent.InstallUninstall_Wait</c>. Meaning "stop the  
            service when it is being installed and uninstalled and wait for the action completion". 
            <para>
            Set this member to <c>null</c> if you don't want to stop the service at any stage of the installation.
            </para>
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.RemoveOn">
            <summary>
            Associates 'remove service' action with the specific service installation event.
            The default value is <c>SvcEvent.Uninstall</c>. Meaning "remove the service when it is uninstalled". 
            <para>
            Set this member to <c>null</c> if you don't want to remove the service at any stage of the installation.
            </para>
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.DependsOn">
            <summary>
            Semicolon separated list of the names of the external service the service being installed depends on. 
            It supposed to be names (not the display names) of a previously installed services.
            <para>For example: DependsOn = "Dnscache;Dhcp"</para>
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.Account">
            <summary>
            Fully qualified names must be used even for local accounts, 
            e.g.: ".\LOCAL_ACCOUNT". Valid only when ServiceType is ownProcess.
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.Arguments">
            <summary>
            Contains any command line arguments or properties required to run the service.
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.EraseDescription">
            <summary>
            Determines whether the existing service description will be ignored. If 'yes', the service description will be null, 
            even if the Description attribute is set.
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.Interactive">
            <summary>
            Whether or not the service interacts with the desktop.
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.LoadOrderGroup">
            <summary>
            The load ordering group that this service should be a part of.
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.Password">
            <summary>
            The password for the account. Valid only when the account has a password.
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.Vital">
            <summary>
            The overall install should fail if this service fails to install.
            </summary>
        </member>
        <member name="M:WixSharp.ServiceInstaller.ToXml(WixSharp.Project)">
            <summary>
            Renders ServiceInstaller properties to appropriate WiX elements
            </summary>
            <param name="project">
            Project instance - may be modified to include WixUtilExtension namespace,
            if necessary.
            </param>
            <returns>
            Collection of XML entities to be added to the project XML result
            </returns>
        </member>
        <member name="F:WixSharp.ServiceInstaller.DelayedAutoStart">
            <summary>
            Specifies whether an auto-start service should delay its start until after all other auto-start services.
            This property only affects auto-start services. If this property is not initialized the setting is not configured.
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.PreShutdownDelay">
            <summary>
            Specifies time in milliseconds that the Service Control Manager (SCM) waits after notifying 
            the service of a system shutdown. If this attribute is not present the default value, 3 minutes, is used.
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.ServiceSid">
            <summary>
            Specifies the service SID to apply to the service
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.ConfigureServiceTrigger">
            <summary>
            Specifies whether to configure the service when the parent Component is installed, reinstalled, or uninstalled
            </summary>
            <remarks>
            Defaults to ConfigureServiceTrigger.Install. 
            Strictly applies to the configuration of properties: DelayedAutoStart, PreShutdownDelay, ServiceSid.
            </remarks>
        </member>
        <member name="F:WixSharp.ServiceInstaller.FirstFailureActionType">
            <summary>
            Action to take on the first failure of the service
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.ProgramCommandLine">
            <summary>
            If any of the three *ActionType attributes is "runCommand", 
            this specifies the command to run when doing so.
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.RebootMessage">
            <summary>
            If any of the three *ActionType attributes is "reboot", 
            this specifies the message to broadcast to server users before doing so.
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.ResetPeriodInDays">
            <summary>
            Number of days after which to reset the failure count to zero if there are no failures.
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.RestartServiceDelayInSeconds">
            <summary>
            If any of the three *ActionType attributes is "restart", 
            this specifies the number of seconds to wait before doing so.
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.SecondFailureActionType">
            <summary>
            Action to take on the second failure of the service.
            </summary>
        </member>
        <member name="F:WixSharp.ServiceInstaller.ThirdFailureActionType">
            <summary>
            Action to take on the third failure of the service.
            </summary>
        </member>
        <member name="T:WixSharp.ConfigureServiceTrigger">
            <summary>
            
            Flags for indicating when the service should be configured.
            </summary>
        </member>
        <member name="F:WixSharp.ConfigureServiceTrigger.None">
            <summary>
            Not a valid value for ServiceConfig.On(Install, Reinstall, Uninstall)
            </summary>
        </member>
        <member name="T:WixSharp.SvcEvent">
            <summary>
            Defines details of the setup event triggering the service actions to be performed during the service installation.
            </summary>
        </member>
        <member name="F:WixSharp.SvcEvent.Type">
            <summary>
            Specifies when the service action occur. It can be one of the <see cref="T:WixSharp.SvcEventType"/> values.
            </summary>
        </member>
        <member name="F:WixSharp.SvcEvent.Wait">
            <summary>
            The flag indicating if after triggering the service action the setup should wait until te action is completed.
            </summary>
        </member>
        <member name="F:WixSharp.SvcEvent.Install">
            <summary>
            Predefined instance of <see cref="T:WixSharp.SvcEvent"/> with <c>Type</c> set to <see cref="F:WixSharp.SvcEventType.install"/>
            and <c>Wait</c> to <c>false</c>. It triggers the action during the service installation without 
            waiting for the completion.
            </summary>
        </member>
        <member name="F:WixSharp.SvcEvent.Install_Wait">
            <summary>
            Predefined instance of <see cref="T:WixSharp.SvcEvent"/> with <c>Type</c> set to <see cref="F:WixSharp.SvcEventType.install"/>
            and <c>Wait</c> to <c>true</c>. It triggers the action during the service installation with 
            waiting for the completion.
            </summary>
        </member>
        <member name="F:WixSharp.SvcEvent.Uninstall">
            <summary>
            Predefined instance of <see cref="T:WixSharp.SvcEvent"/> with <c>Type</c> set to <see cref="F:WixSharp.SvcEventType.uninstall"/>
            and <c>Wait</c> to <c>false</c>. It triggers the action during the service installation 
            without waiting for the completion.
            </summary>
        </member>
        <member name="F:WixSharp.SvcEvent.Uninstall_Wait">
            <summary>
            Predefined instance of <see cref="T:WixSharp.SvcEvent"/> with <c>Type</c> set to <see cref="F:WixSharp.SvcEventType.uninstall"/>
            and <c>Wait</c> to <c>true</c>. It triggers the action during the service installation with 
            waiting for the completion.
            </summary>
        </member>
        <member name="F:WixSharp.SvcEvent.InstallUninstall">
            <summary>
            Predefined instance of <see cref="T:WixSharp.SvcEvent"/> with <c>Type</c> set to <see cref="F:WixSharp.SvcEventType.both"/>
            and <c>Wait</c> to <c>false</c>. It triggers the action during the service installation without 
            waiting for the completion.
            </summary>
        </member>
        <member name="F:WixSharp.SvcEvent.InstallUninstall_Wait">
            <summary>
            Predefined instance of <see cref="T:WixSharp.SvcEvent"/> with <c>Type</c> set to <see cref="F:WixSharp.SvcEventType.both"/>
            and <c>Wait</c> to <c>true</c>. It triggers the action during the service installation with 
            waiting for the completion.
            </summary>
        </member>
        <member name="T:WixSharp.ServiceSid">
            <summary>
            Specifies the service SID to apply to the service. 
            Valid values are "none", "restricted", "unrestricted" or a 
            Formatted property that resolves to "0" (for "none"), 
            "3" (for "restricted") or "1" (for "unrestricted"). 
            </summary>
        </member>
        <member name="M:WixSharp.ServiceSid.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ServiceSid"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:WixSharp.FailureActionType">
            <summary>
            Possible values for ServiceInstall.(First|Second|Third)FailureActionType
            </summary>
        </member>
        <member name="T:WixSharp.SetPropertyAction">
            <summary>
            Defines WiX CustomAction for setting MSI property. 
            </summary>
            
            <example>The following is an example of using <c>SetPropertyAction</c> for assigning
            string value <c>"Hello World!"</c> to property <c>Gritting</c>:
            <code>
            var project = 
                new Project("My Product",
                
                    new Property("Gritting", "empty"),        
                    new SetPropertyAction("Gritting", "Hello World!"),
                    ...
                    
            Compiler.BuildMsi(project);
            </code>
            </example>
        </member>
        <member name="M:WixSharp.SetPropertyAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.SetPropertyAction"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.SetPropertyAction.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.SetPropertyAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="name">Name of the property to be assigned.</param>
            <param name="value">Value to be set to the property.</param>
        </member>
        <member name="M:WixSharp.SetPropertyAction.#ctor(WixSharp.Id,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.SetPropertyAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.SetPropertyAction"/> instance.</param>
            <param name="name">Name of the property to be assigned.</param>
            <param name="value">Value to be set to the property.</param>
        </member>
        <member name="M:WixSharp.SetPropertyAction.#ctor(System.String,System.String,WixSharp.Return)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.SetPropertyAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="name">Name of the property to be assigned.</param>
            <param name="value">Value to be set to the property.</param>
            <param name="returnType">The return type of the action.</param>
        </member>
        <member name="M:WixSharp.SetPropertyAction.#ctor(WixSharp.Id,System.String,System.String,WixSharp.Return)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.SetPropertyAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.SetPropertyAction"/> instance.</param>
            <param name="name">Name of the property to be assigned.</param>
            <param name="value">Value to be set to the property.</param>
            <param name="returnType">The return type of the action.</param>
        </member>
        <member name="M:WixSharp.SetPropertyAction.#ctor(System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.SetPropertyAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="name">Name of the property to be assigned.</param>
            <param name="value">Value to be set to the property.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.SetPropertyAction"/>.</param>
        </member>
        <member name="M:WixSharp.SetPropertyAction.#ctor(WixSharp.Id,System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.SetPropertyAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.SetPropertyAction"/> instance.</param>
            <param name="name">Name of the property to be assigned.</param>
            <param name="value">Value to be set to the property.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.SetPropertyAction"/>.</param>
        </member>
        <member name="M:WixSharp.SetPropertyAction.#ctor(WixSharp.Id,System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.SetPropertyAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.SetPropertyAction"/> instance.</param>
            <param name="name">Name of the property to be assigned.</param>
            <param name="value">Value to be set to the property.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.SetPropertyAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="F:WixSharp.SetPropertyAction.Value">
            <summary>
            Value to set the property to.
            </summary>
        </member>
        <member name="F:WixSharp.SetPropertyAction.PropName">
            <summary>
            Name of the property to be set.
            </summary>
        </member>
        <member name="T:WixSharp.Shortcut">
            <summary>
            Defines shortcut to be installed. <see cref="T:WixSharp.Shortcut"/> is not supposed to be instantiated directly.
            Derivative class constructors should be used instead (e.g. <see cref="T:WixSharp.FileShortcut"/>, <see cref="T:WixSharp.ExeFileShortcut"/>).
            </summary>
        </member>
        <member name="M:WixSharp.Shortcut.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Shortcut"/> class.
            </summary>
        </member>
        <member name="F:WixSharp.Shortcut.Target">
            <summary>
            The path to the executable the shortcut is associated with.
            <para>This value is a processed only for shortcuts which belong to the <see cref="T:WixSharp.Dir"/> element.</para>
            </summary>
        </member>
        <member name="F:WixSharp.Shortcut.Arguments">
            <summary>
            The shortcut arguments.
            </summary>
        </member>
        <member name="F:WixSharp.Shortcut.Location">
            <summary>
            The directory where the shortcut should be installed.
            <para>This value is a processed only for shortcuts which belong to the <see cref="T:WixSharp.File"/> element.</para>
            </summary>
        </member>
        <member name="F:WixSharp.Shortcut.WorkingDirectory">
            <summary>
            "Working Directory" for the shortcut to be installed. If <see cref="F:WixSharp.Shortcut.WorkingDirectory"/> is not specified
            it will be set in the installed shortcut to the location of the file the shortcut points to.
            </summary>
        </member>
        <member name="F:WixSharp.Shortcut.Condition">
            <summary>
            Defines the launch <see cref="F:WixSharp.Shortcut.Condition"/> which is to be checked during the installation to
            determine if the shortcut should be installed.
            </summary>
        </member>
        <member name="F:WixSharp.Shortcut.IconFile">
            <summary>
            Defines icon file for the shortcut. Relative or absolute path to the source file containing icons (exe, dll or ico).
            </summary>
        </member>
        <member name="F:WixSharp.Shortcut.IconIndex">
            <summary>
            The zero-based index of the icon associated with this ProgId. The default value is 0.
            </summary>
        </member>
        <member name="F:WixSharp.Shortcut.Advertise">
            <summary>
            Whether this shortcut is to be advertised. The default is <c>false</c>.
            </summary>
        </member>
        <member name="T:WixSharp.Step">
            <summary>
            Specifies predefined values for <see cref="F:WixSharp.Action.Step"/>,
            which controls order of <c>Custom Action</c> to be executed.
            <para><c>Before</c> or <c>After</c> switch for <c>Custom Action</c> is controlled by <see cref="T:WixSharp.When"/>.</para>
            </summary>
        </member>
        <member name="F:WixSharp.Step.ADMIN">
            <summary>
            A top-level action used for an administrative installation.
            </summary>
        </member>
        <member name="F:WixSharp.Step.ADVERTISE">
            <summary>
            A top-level action called to install or remove advertised components.
            </summary>
        </member>
        <member name="F:WixSharp.Step.AllocateRegistrySpace">
            <summary>
            Validates that the free space specified by AVAILABLEFREEREG exists in the registry.
            </summary>
        </member>
        <member name="F:WixSharp.Step.AppSearch">
            <summary>
            Searches for previous versions of products and determines that upgrades are installed.
            </summary>
        </member>
        <member name="F:WixSharp.Step.BindImage">
            <summary>
            Binds executables to imported DLLs.
            </summary>
        </member>
        <member name="F:WixSharp.Step.CCPSearch">
            <summary>
            Uses file signatures to validate that qualifying products are installed on a system before an upgrade installation is performed.
            </summary>
        </member>
        <member name="F:WixSharp.Step.CostFinalize">
            <summary>
            Ends the internal installation costing process begun by the CostInitialize action.
            </summary>
        </member>
        <member name="F:WixSharp.Step.CostInitialize">
            <summary>
            Starts the installation costing process.
            </summary>
        </member>
        <member name="F:WixSharp.Step.CreateFolders">
            <summary>
            Creates empty folders for components.
            </summary>
        </member>
        <member name="F:WixSharp.Step.CreateShortcuts">
            <summary>
            Creates shortcuts.
            </summary>
        </member>
        <member name="F:WixSharp.Step.DeleteServices">
            <summary>
            Removes system services.
            </summary>
        </member>
        <member name="F:WixSharp.Step.DisableRollback">
            <summary>
            Disables rollback for the remainder of the installation.
            </summary>
        </member>
        <member name="F:WixSharp.Step.DuplicateFiles">
            <summary>
            Duplicates files installed by the InstallFiles action.
            </summary>
        </member>
        <member name="F:WixSharp.Step.ExecuteAction">
            <summary>
            Checks the EXECUTEACTION property to determine which top-level action begins the execution sequence, then runs that action.
            </summary>
        </member>
        <member name="F:WixSharp.Step.FileCost">
            <summary>
            Initializes disk cost calculation with the installer. Disk costing is not finalized until the CostFinalize action is executed.
            </summary>
        </member>
        <member name="F:WixSharp.Step.FindRelatedProducts">
            <summary>
            Detects correspondence between the Upgrade table and installed products.
            </summary>
        </member>
        <member name="F:WixSharp.Step.ForceReboot">
            <summary>
            Used in the action sequence to prompt the user for a restart of the system during the installation.
            </summary>
        </member>
        <member name="F:WixSharp.Step.INSTALL">
            <summary>
            A top-level action called to install or remove components.
            </summary>
        </member>
        <member name="F:WixSharp.Step.InstallAdminPackage">
            <summary>
            Copies the installer database to the administrative installation point.
            </summary>
        </member>
        <member name="F:WixSharp.Step.InstallExecute">
            <summary>
            Runs a script containing all operations in the action sequence since either the start of the installation or the last InstallFinalize action. Does not end the transaction.
            </summary>
        </member>
        <member name="F:WixSharp.Step.InstallFiles">
            <summary>
            Copies files from the source to the destination directory.
            </summary>
        </member>
        <member name="F:WixSharp.Step.InstallFinalize">
            <summary>
            Runs a script containing all operations in the action sequence since either the start of the installation or the last InstallFinalize action. Marks the end of a transaction.
            </summary>
        </member>
        <member name="F:WixSharp.Step.InstallInitialize">
            <summary>
            Marks the beginning of a transaction.
            </summary>
        </member>
        <member name="F:WixSharp.Step.InstallSFPCatalogFile">
            <summary>
            The InstallSFPCatalogFile action installs the catalogs used by Windows Me for Windows File Protection.
            </summary>
        </member>
        <member name="F:WixSharp.Step.InstallValidate">
            <summary>
            Verifies that all volumes with attributed costs have sufficient space for the installation.
            </summary>
        </member>
        <member name="F:WixSharp.Step.IsolateComponents">
            <summary>
            Processes the IsolatedComponent table
            </summary>
        </member>
        <member name="F:WixSharp.Step.LaunchConditions">
            <summary>
            Evaluates a set of conditional statements contained in the LaunchCondition table that must all evaluate to True before the installation can proceed.
            </summary>
        </member>
        <member name="F:WixSharp.Step.MigrateFeatureStates">
            <summary>
            Migrates current feature states to the pending installation.
            </summary>
        </member>
        <member name="F:WixSharp.Step.MoveFiles">
            <summary>
            Locates existing files and moves or copies those files to a new location.
            </summary>
        </member>
        <member name="F:WixSharp.Step.MsiConfigureServices">
            <summary>
            Configures a service for the system.
            Windows Installer 4.5 and earlier:  Not supported.
            </summary>
        </member>
        <member name="F:WixSharp.Step.MsiPublishAssemblies">
            <summary>
            Manages the advertisement of common language runtime assemblies and Win32 assemblies that are being installed.
            </summary>
        </member>
        <member name="F:WixSharp.Step.MsiUnpublishAssemblies">
            <summary>
            Manages the advertisement of common language runtime assemblies and Win32 assemblies that are being removed.
            </summary>
        </member>
        <member name="F:WixSharp.Step.InstallODBC">
            <summary>
            Installs the ODBC drivers, translators, and data sources.
            </summary>
        </member>
        <member name="F:WixSharp.Step.InstallServices">
            <summary>
            Registers a service with the system.
            </summary>
        </member>
        <member name="F:WixSharp.Step.PatchFiles">
            <summary>
            Queries the Patch table to determine which patches are applied to specific files and then performs the byte-wise patching of the files.
            </summary>
        </member>
        <member name="F:WixSharp.Step.ProcessComponents">
            <summary>
            Registers components, their key paths, and component clients.
            </summary>
        </member>
        <member name="F:WixSharp.Step.PublishComponents">
            <summary>
            Advertises the components specified in the PublishComponent table.
            </summary>
        </member>
        <member name="F:WixSharp.Step.PublishFeatures">
            <summary>
            Writes the feature state of each feature into the system registry
            </summary>
        </member>
        <member name="F:WixSharp.Step.PublishProduct">
            <summary>
            Publishes product information with the system.
            </summary>
        </member>
        <member name="F:WixSharp.Step.RegisterClassInfo">
            <summary>
            Manages the registration of COM class information with the system.
            </summary>
        </member>
        <member name="F:WixSharp.Step.RegisterComPlus">
            <summary>
            The RegisterComPlus action registers COM+ applications.
            </summary>
        </member>
        <member name="F:WixSharp.Step.RegisterExtensionInfo">
            <summary>
            Registers extension related information with the system.
            </summary>
        </member>
        <member name="F:WixSharp.Step.RegisterFonts">
            <summary>
            Registers installed fonts with the system.
            </summary>
        </member>
        <member name="F:WixSharp.Step.RegisterMIMEInfo">
            <summary>
            Registers MIME information with the system.
            </summary>
        </member>
        <member name="F:WixSharp.Step.RegisterProduct">
            <summary>
            Registers product information with the installer and stores the installer database on the local computer.
            </summary>
        </member>
        <member name="F:WixSharp.Step.RegisterProgIdInfo">
            <summary>
            Registers OLE ProgId information with the system.
            </summary>
        </member>
        <member name="F:WixSharp.Step.RegisterTypeLibraries">
            <summary>
            Registers type libraries with the system.
            </summary>
        </member>
        <member name="F:WixSharp.Step.RegisterUser">
            <summary>
            Registers user information to identify the user of a product.
            </summary>
        </member>
        <member name="F:WixSharp.Step.RemoveDuplicateFiles">
            <summary>
            Deletes files installed by the DuplicateFiles action.
            </summary>
        </member>
        <member name="F:WixSharp.Step.RemoveEnvironmentStrings">
            <summary>
            Modifies the values of environment variables.
            </summary>
        </member>
        <member name="F:WixSharp.Step.RemoveExistingProducts">
            <summary>
            Removes installed versions of a product.
            </summary>
        </member>
        <member name="F:WixSharp.Step.RemoveFiles">
            <summary>
            Removes files previously installed by the InstallFiles action.
            </summary>
        </member>
        <member name="F:WixSharp.Step.RemoveFolders">
            <summary>
            Removes empty folders linked to components set to be removed.
            </summary>
        </member>
        <member name="F:WixSharp.Step.RemoveIniValues">
            <summary>
            Deletes .ini file information associated with a component specified in the IniFile table.
            </summary>
        </member>
        <member name="F:WixSharp.Step.RemoveODBC">
            <summary>
            Removes ODBC data sources, translators, and drivers.
            </summary>
        </member>
        <member name="F:WixSharp.Step.RemoveRegistryValues">
            <summary>
            Removes an application's registry keys that were created from the Registry table..
            </summary>
        </member>
        <member name="F:WixSharp.Step.RemoveShortcuts">
            <summary>
            Manages the removal of an advertised shortcut whose feature is selected for uninstallation.
            </summary>
        </member>
        <member name="F:WixSharp.Step.ResolveSource">
            <summary>
            Determines the source location and sets the SourceDir property.
            </summary>
        </member>
        <member name="F:WixSharp.Step.RMCCPSearch">
            <summary>
            Uses file signatures to validate that qualifying products are installed on a system before an upgrade installation is performed.
            </summary>
        </member>
        <member name="F:WixSharp.Step.ScheduleReboot">
            <summary>
            Prompts the user for a system restart at the end of the installation.
            </summary>
        </member>
        <member name="F:WixSharp.Step.SelfRegModules">
            <summary>
            Processes modules in the SelfReg table and registers them if they are installed.
            </summary>
        </member>
        <member name="F:WixSharp.Step.SelfUnregModules">
            <summary>
            Unregisters the modules in the SelfReg table that are set to be uninstalled.
            </summary>
        </member>
        <member name="F:WixSharp.Step.SEQUENCE">
            <summary>
            Runs the actions in a table specified by the SEQUENCE property.
            </summary>
        </member>
        <member name="F:WixSharp.Step.SetODBCFolders">
            <summary>
            Checks the system for existing ODBC drivers and sets target directory for new ODBC drivers.
            </summary>
        </member>
        <member name="F:WixSharp.Step.StartServices">
            <summary>
            Starts system services.
            </summary>
        </member>
        <member name="F:WixSharp.Step.StopServices">
            <summary>
            Stops system services.
            </summary>
        </member>
        <member name="F:WixSharp.Step.UnpublishComponents">
            <summary>
            Manages the unadvertisement of components from the PublishComponent table and removes information about published components.
            </summary>
        </member>
        <member name="F:WixSharp.Step.UnpublishFeatures">
            <summary>
            Removes the selection-state and feature-component mapping information from the system registry.
            </summary>
        </member>
        <member name="F:WixSharp.Step.UnregisterClassInfo">
            <summary>
            Manages the removal of COM classes from the system registry.
            </summary>
        </member>
        <member name="F:WixSharp.Step.UnregisterComPlus">
            <summary>
            The UnregisterComPlus action removes COM+ applications from the registry.
            </summary>
        </member>
        <member name="F:WixSharp.Step.UnregisterExtensionInfo">
            <summary>
            Manages the removal of extension-related information from the system.
            </summary>
        </member>
        <member name="F:WixSharp.Step.UnregisterFonts">
            <summary>
            Removes registration information about installed fonts from the system.
            </summary>
        </member>
        <member name="F:WixSharp.Step.UnregisterMIMEInfo">
            <summary>
            Unregisters MIME-related information from the system registry.
            </summary>
        </member>
        <member name="F:WixSharp.Step.UnregisterProgIdInfo">
            <summary>
            Manages the unregistration of OLE ProgId information with the system.
            </summary>
        </member>
        <member name="F:WixSharp.Step.UnregisterTypeLibraries">
            <summary>
            Unregisters type libraries with the system.
            </summary>
        </member>
        <member name="F:WixSharp.Step.ValidateProductID">
            <summary>
            Sets ProductID property to the full product identifier.
            </summary>
        </member>
        <member name="F:WixSharp.Step.WriteEnvironmentStrings">
            <summary>
            Modifies the values of environment variables.
            </summary>
        </member>
        <member name="F:WixSharp.Step.WriteIniValues">
            <summary>
            Writes .ini file information.
            </summary>
        </member>
        <member name="F:WixSharp.Step.WriteRegistryValues">
            <summary>
            Sets up registry information.
            </summary>
        </member>
        <member name="F:WixSharp.Step.InstallExecuteAgain">
            <summary>
            The InstallExecuteAgain action runs a script containing all operations in the action sequence since either the start of the installation or the last InstallExecuteAgain action or the last InstallExecute action. The InstallExecute action updates the system without ending the transaction. InstallExecuteAgain performs the same operation as the InstallExecute action but should only be used after InstallExecute.
            </summary>
        </member>
        <member name="F:WixSharp.Step.PreviousAction">
            <summary>
            <c>Custom Action</c> is to be executed before/after the previous action declared in <see cref="F:WixSharp.Project.Actions"/>.
            </summary>
        </member>
        <member name="F:WixSharp.Step.PreviousActionOrInstallFinalize">
            <summary>
            <c>Custom Action</c> is to be executed before/after the previous action item in <see cref="F:WixSharp.Project.Actions"/>.
            If <c>Custom Action</c> is the first item in item in <see cref="F:WixSharp.Project.Actions"/> it will be executed before/after
            MSI built-in <c>InstallFinalize</c> action.
            </summary>
        </member>
        <member name="F:WixSharp.Step.PreviousActionOrInstallInitialize">
            <summary>
            <c>Custom Action</c> is to be executed before/after the previous action item in <see cref="F:WixSharp.Project.Actions"/>.
            If <c>Custom Action</c> is the first item in item in <see cref="F:WixSharp.Project.Actions"/> it will be executed before/after
            MSI built-in <c>InstallInitialize</c> action.
            </summary>
        </member>
        <member name="M:WixSharp.Step.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Step"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WixSharp.Step.#ctor(WixSharp.Step)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Step"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="F:WixSharp.Step.Value">
            <summary>
            The string value of the Step object
            </summary>
        </member>
        <member name="M:WixSharp.Step.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:WixSharp.MajorUpgradeStrategy">
             <summary>
             This class defines the Major Upgrade scenario.
             </summary>
            
            <example>The following is an example of building product MSI with auto uninstalling of any older version of the product
            and preventing downgrading.
            <code>
             var project = new Project("My Product",
                               ...
            
             project.MajorUpgradeStrategy =  new MajorUpgradeStrategy
                                             {
                                                 UpgradeVersions = VersionRange.OlderThanThis,
                                                 PreventDowngradingVersions = VersionRange.NewerThanThis,
                                                 NewerProductInstalledErrorMessage = "Newer version already installed"
                                             };
             Compiler.BuildMsi(project);
             </code>
             or the same scenario but using predefined <c>MajorUpgradeStrategy.Default</c> strategy.
            <code>
             var project = new Project("My Product",
                               ...
            
             project.MajorUpgradeStrategy = MajorUpgradeStrategy.Default;
             Compiler.BuildMsi(project);
             </code>
             </example>
        </member>
        <member name="F:WixSharp.MajorUpgradeStrategy.UpgradeVersions">
            <summary>
            Range of versions which should be automatically uninstalled during the installation of the product MSI being built.
            <para>Typically these are all versions older then the version being installed. </para>
            </summary>
        </member>
        <member name="F:WixSharp.MajorUpgradeStrategy.PreventDowngradingVersions">
            <summary>
            Range of versions, which should not be automatically uninstalled during the installation of the product MSI being built.
            <para>Typically these are all versions newer then the version being installed (downgrade scenario). </para>
            </summary>
        </member>
        <member name="F:WixSharp.MajorUpgradeStrategy.RemoveExistingProductAfter">
            <summary>
            Step, which determines when the RemoveExistingProducts standard action is to be performed.
            <para>The default value is <c>InstallFinalize</c>. </para>
            </summary>
        </member>
        <member name="F:WixSharp.MajorUpgradeStrategy.NewerProductInstalledErrorMessage">
            <summary>
            Error message to be displayed if setup is aborted because of restricted downgrade attempt (see <see cref="F:WixSharp.MajorUpgradeStrategy.PreventDowngradingVersions"/>).
            </summary>
        </member>
        <member name="F:WixSharp.MajorUpgradeStrategy.Default">
            <summary>
            Default <see cref="T:WixSharp.MajorUpgradeStrategy"/>. Ensures that all older versions of the product are automatically uninstalled and if
            a newer version is detected, <c>"Newer version already installed"</c> message is displayed.
            </summary>
        </member>
        <member name="T:WixSharp.UpgradeStrategyValidationException">
            <summary>
            UpgradeStrategy validation exception class.
            </summary>
        </member>
        <member name="M:WixSharp.UpgradeStrategyValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.UpgradeStrategyValidationException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:WixSharp.ValidationException">
            <summary>
            Generic validation exception class.
            </summary>
        </member>
        <member name="M:WixSharp.ValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.ValidationException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:WixSharp.Utils">
            <summary>
            Collection of a 'utility' routines.
            </summary>
        </member>
        <member name="M:WixSharp.Utils.PathCombine(System.String,System.String)">
            <summary>
            Combines two path strings.
            <para>
            It is a fix for unexpected behavior of System.IO.Path.Combine: Path.Combine(@"C:\Test", @"\Docs\readme.txt") return @"\Docs\readme.txt";
            </para>
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns></returns>
        </member>
        <member name="P:WixSharp.Utils.ProgramFilesDirectory">
            <summary>
            Gets the program files directory.
            </summary>
            <value>
            The program files directory.
            </value>
        </member>
        <member name="M:WixSharp.Utils.GetHashCode32(System.String)">
            <summary>
            Returns the hash code for the instance of a string. It uses deterministic hash-code generation algorithm,
            which produces the same result on x86 and x64 OSs (ebject.GetHashCode doesn't).
            </summary>
            <param name="s">The string.</param>
            <returns></returns>
        </member>
        <member name="T:WixSharp.VersionRange">
            <summary>
            This class represents a range of product versions. It is designed to be used for
            Major/Minor upgrade scenarios in conjunction with Upgrade strategy classes (e.g. <see cref="T:WixSharp.MajorUpgradeStrategy"/>).
            <para>Version is represented as a string to allow for predefined value <c>%this%</c>, which means
            "version of the product MSI being built".</para>
            <para>This class includes predefined ranges for common upgrade scenarios.</para>
            </summary>
        </member>
        <member name="F:WixSharp.VersionRange.Minimum">
            <summary>
            Minimum value of the Version range.
            <para>If <c>"%this%"</c> is used the Minimum value will set to the version of the product MSI being built.</para>
            </summary>
        </member>
        <member name="F:WixSharp.VersionRange.Maximum">
            <summary>
            Maximum value of the Version range.
            <para>If <c>"%this%"</c> is used the Maximum value will set to the version of the product MSI being built.</para>
            </summary>
        </member>
        <member name="F:WixSharp.VersionRange.IncludeMaximum">
            <summary>
            Indicates if version range includes <see cref="F:WixSharp.VersionRange.Maximum"/> value.
            </summary>
        </member>
        <member name="F:WixSharp.VersionRange.IncludeMinimum">
            <summary>
            Indicates if version range includes <see cref="F:WixSharp.VersionRange.Minimum"/> value.
            </summary>
        </member>
        <member name="F:WixSharp.VersionRange.MigrateFeatures">
            <summary>
            Set to true to migrate feature states from upgraded products by enabling the logic in the MigrateFeatureStates action
            </summary>
        </member>
        <member name="F:WixSharp.VersionRange.OnlyDetect">
            <summary>
            Set to <c>true</c> to detect products and applications but do not uninstall.
            </summary>
        </member>
        <member name="F:WixSharp.VersionRange.ThisAndNewer">
            <summary>
            Predefined "open ended" range between version of the product MSI being built (inclusive) and any newer version.
            </summary>
        </member>
        <member name="F:WixSharp.VersionRange.NewerThanThis">
            <summary>
            Predefined "open ended" range between version of the product MSI being built (exclusive) and any newer version.
            </summary>
        </member>
        <member name="F:WixSharp.VersionRange.OlderThanThis">
            <summary>
            Predefined range of versions between <c>0.0.0.0</c> (inclusive) and the version of the product MSI being built (exclusive).
            </summary>
        </member>
        <member name="F:WixSharp.VersionRange.ThisAndOlder">
            <summary>
            Predefined range of versions between <c>0.0.0.0</c> (inclusive) and the version of the product MSI being built (inclusive).
            </summary>
        </member>
        <member name="T:WixSharp.WebSite">
            <summary>
            This class defines website attributes. It is a close equivalent of WebSite WiX element.
            </summary>
        </member>
        <member name="F:WixSharp.WebSite.Description">
            <summary>
            This is the name of the web site that will show up in the IIS management console.
            </summary>
        </member>
        <member name="F:WixSharp.WebSite.InstallWebSite">
            <summary>
            Indicates if the WebSite is to be installed (created on IIS) or existing WebSite should be used to install the corresponding
            WebApplication. The default <see cref="F:WixSharp.WebSite.InstallWebSite"/> value is <c>false</c>
            <para>Developers should be aware of the WebSite installation model imposed by WiX/MSI and use <see cref="F:WixSharp.WebSite.InstallWebSite"/> carefully.</para>
            <para>If <see cref="F:WixSharp.WebSite.InstallWebSite"/> value is set to <c>false</c> the parent WebApplication (<see cref="T:WixSharp.IISVirtualDir"/>)
            will be installed in the brand new (freshly created) WebSite or in the existing one if a site with the same address/port combination already exists
            on IIS). The undesirable side affect of this deployment scenario is that if the existing WebSite was used to install the WebApplication it will be
            deleted on IIS during uninstallation even if this WebSite has other WebApplications installed.</para>
            <para>The "safer" option is to set <see cref="F:WixSharp.WebSite.InstallWebSite"/> value to <c>true</c> (default value). In this case the WebApplication will
            be installed in an existing WebSite with matching address/port. If the match is not found the installation will fail. During the uninstallation
            only installed WebApplication will be removed from IIS.</para>
            </summary>
        </member>
        <member name="M:WixSharp.WebSite.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.WebSite" /> class.
            </summary>
        </member>
        <member name="M:WixSharp.WebSite.#ctor(WixSharp.Id,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.WebSite"/> class.
            </summary>
            <param name="id">The name.</param>
            <param name="description">The description of the web site (as it shows up in the IIS management console).</param>
        </member>
        <member name="M:WixSharp.WebSite.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.WebSite"/> class.
            </summary>
            <param name="description">The description of the web site (as it shows up in the IIS management console).</param>
        </member>
        <member name="M:WixSharp.WebSite.#ctor(WixSharp.Id)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.WebSite"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:WixSharp.WebSite.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.WebSite"/> class.
            </summary>
            <param name="description">The description of the web site (as it shows up in the IIS management console).</param>
            <param name="addressDefinition">The address definition.</param>
        </member>
        <member name="M:WixSharp.WebSite.#ctor(WixSharp.Id,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.WebSite"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="description">The description.</param>
            <param name="addressDefinition">The address definition.</param>
        </member>
        <member name="T:WixSharp.WebSite.WebAddress">
            <summary>
            This class defines website address. It is a close equivalent of WebAddress WiX element.
            </summary>
        </member>
        <member name="F:WixSharp.WebSite.WebAddress.Address">
            <summary>
             The IP address for the web address. To specify the "All Unassigned" IP address, do not specify
             this attribute or specify its value as "*". The IP address is also used to determine if the WebSite is already installed.
             The IP address must match exactly (empty value matches "All Unassigned") unless "*" is used which will match any existing IP (including "All Unassigned").
            </summary>
        </member>
        <member name="F:WixSharp.WebSite.WebAddress.Port">
            <summary>
            Sets the port number.
            </summary>
        </member>
        <member name="P:WixSharp.WebSite.WebAddress.Attributes">
            <summary>
            Optional attributes of the <c>WebAddress Element</c> (e.g. Secure:YesNoPath).
            </summary>
            <example>
            <code>
            var address = new WebAddress
            {
                Port = 80,
                Attributes = new Dictionary&lt;string, string&gt; { { "Secure", "Yes" } };
                ...
            </code>
            </example>
        </member>
        <member name="F:WixSharp.WebSite.AddressesDefinition">
            <summary>
            Specification for auto-generating the <see cref="T:WebSite.WebAddresses"/> collection.
            <para>If <see cref="F:WixSharp.WebSite.AddressesDefinition"/> is specified, the existing content of <see cref="P:WixSharp.WebSite.Addresses"/> will be ignored
            and replaced with the auto-generated one at compile time.</para>
            </summary>
            <example>
            <c>webSite.AddressesDefinition = "*:80;*90";</c> will be parsed and converted to an array of <see cref="T:WixSharp.WebSite.WebAddress"/> as follows:
            <code>
            ...
            webSite.Addresses = new []
                {
                    new WebSite.WebAddress
                    {
                        Address = "*",
                        Port = 80
                    },
                    new WebSite.WebAddress
                    {
                        Address = "*",
                        Port = 80
                    }
                }
            </code>
            </example>
        </member>
        <member name="F:WixSharp.WebSite.WebApplication">
            <summary>
            Reference to a WebApplication that is to be installed as part of this web site.
            </summary>
        </member>
        <member name="P:WixSharp.WebSite.Addresses">
            <summary>
            Collection of <see cref="T:WebSite.WebAddresses"/> associated with website.
            <para>
            The user specified values of <see cref="P:WixSharp.WebSite.Addresses"/> will be ignored and replaced with the
            auto-generated addresses if <see cref="F:WixSharp.WebSite.AddressesDefinition"/> is specified either directly or via appropriate <see cref="T:WixSharp.WebSite"/> constructor.
            </para>
            </summary>
        </member>
        <member name="T:WixSharp.WebAppPool">
            <summary>
            This class defines WebAppPool WiX element. It is used to specify the application pool for this application in IIS 6 applications.
            </summary>
        </member>
        <member name="M:WixSharp.WebAppPool.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.WebAppPool"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="attributesDefinition">The attributes definition. This parameter is used to set encapsulated <see cref="T:WixSharp.WixEntity.AttributesDefinition"/>.</param>
        </member>
        <member name="M:WixSharp.WebAppPool.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.WebAppPool"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WixSharp.WebAppPool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.WebAppPool"/> class.
            </summary>
        </member>
        <member name="T:WixSharp.WebDirProperties">
            <summary>
            This class defines WebDirProperites WiX element. The class itself has no distinctive behaviour nor schema. It is fully relying on
            encapsulated <see cref="T:WixSharp.WixEntity.AttributesDefinition"/>.
            </summary>
        </member>
        <member name="M:WixSharp.WebDirProperties.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.WebDirProperties"/> class.
            </summary>
            <param name="attributesDefinition">The attributes definition. This parameter is used to set encapsulated <see cref="T:WixSharp.WixEntity.AttributesDefinition"/>.</param>
        </member>
        <member name="M:WixSharp.WebDirProperties.op_Implicit(System.String)~WixSharp.WebDirProperties">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:WixSharp.WebDirProperties"/>.
            </summary>
            <param name="attributesDefinition">The attributes definition.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:WixSharp.IISVirtualDir">
            <summary>
            This class defines IIS Virtual Directory. It is a close equivalent of WebVirtualDirectory WiX element.
            </summary>
        </member>
        <member name="M:WixSharp.IISVirtualDir.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.IISVirtualDir" /> class.
            </summary>
        </member>
        <member name="F:WixSharp.IISVirtualDir.WebSite">
            <summary>
            WebSite in which this virtual directory belongs.
            </summary>
        </member>
        <member name="P:WixSharp.IISVirtualDir.Name">
            <summary>
            Gets or sets the application name, which is the URL relative path used to access this virtual directory.
            <para>
            It is a full equivalent of <see cref="F:WixSharp.IISVirtualDir.Alias"/>.
            </para>
            </summary>
            <value>The name.</value>
        </member>
        <member name="F:WixSharp.IISVirtualDir.Alias">
            <summary>
            Sets the application name, which is the URL relative path used to access this virtual directory. If not set, the <see cref="F:WixSharp.IISVirtualDir.AppName"/> will be used.
            </summary>
        </member>
        <member name="F:WixSharp.IISVirtualDir.AppName">
            <summary>
            Sets the name of this Web application.
            </summary>
        </member>
        <member name="F:WixSharp.IISVirtualDir.AllowSessions">
            <summary>
            Sets the Enable Session State option. When enabled, you can set the session timeout using the SessionTimeout attribute.
            </summary>
        </member>
        <member name="F:WixSharp.IISVirtualDir.Buffer">
            <summary>
            Sets the option that enables response buffering in the application, which allows ASP script to set response headers anywhere in the script.
            </summary>
        </member>
        <member name="F:WixSharp.IISVirtualDir.ClientDebugging">
            <summary>
            Enable ASP client-side script debugging.
            </summary>
        </member>
        <member name="F:WixSharp.IISVirtualDir.DefaultScript">
            <summary>
            Sets the default script language for the site.
            </summary>
        </member>
        <member name="F:WixSharp.IISVirtualDir.Isolation">
            <summary>
            Sets the application isolation level for this application for pre-IIS 6 applications.
            </summary>
        </member>
        <member name="F:WixSharp.IISVirtualDir.ParentPaths">
            <summary>
            Sets the parent paths option, which allows a client to use relative paths to reach parent directories from this application.
            </summary>
        </member>
        <member name="F:WixSharp.IISVirtualDir.ScriptTimeout">
            <summary>
            Sets the timeout value for executing ASP scripts.
            </summary>
        </member>
        <member name="F:WixSharp.IISVirtualDir.ServerDebugging">
            <summary>
            Enable ASP server-side script debugging.
            </summary>
        </member>
        <member name="F:WixSharp.IISVirtualDir.SessionTimeout">
            <summary>
            Sets the timeout value for sessions in minutes.
            </summary>
        </member>
        <member name="F:WixSharp.IISVirtualDir.WebAppPool">
            <summary>
            References a WebAppPool instance to use as the application pool for this application in IIS 6 applications.
            </summary>
        </member>
        <member name="F:WixSharp.IISVirtualDir.WebDirProperties">
            <summary>
            WebDirProperites used by one or more WebSites.
            </summary>
        </member>
        <member name="T:WixSharp.WixGuid">
            <summary>
            Wix# wrapper around <see cref="T:System.Guid"/>. <see cref="T:WixSharp.WixGuid"/> allows generation of continuous
            GUIDs for for composing reproducible WiX source files.
            </summary>
        </member>
        <member name="F:WixSharp.WixGuid.Value">
            <summary>
            GUID value of the <see cref="T:WixSharp.WixGuid"/> instance.
            </summary>
        </member>
        <member name="M:WixSharp.WixGuid.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.WixGuid"/> class.
            </summary>
            <param name="guid">The GUID value of the instance to be created.</param>
        </member>
        <member name="T:WixSharp.WixGuid.SequentialGuid">
            <summary>
            Class for generation of sequential <see cref="T:System.Guid"/>. 
            <para>Based on http://developmenttips.blogspot.com/2008/03/generate-sequential-guids-for-sql.html</para> 
            <para>This class is used by Wix# engine internally to emit reproducible WiX code.</para>
            </summary>
        </member>
        <member name="P:WixSharp.WixGuid.SequentialGuid.CurrentGuid">
            <summary>
            Gets or sets the current GUID.
            </summary>
            <value>The current GUID.</value>
        </member>
        <member name="M:WixSharp.WixGuid.SequentialGuid.Next">
            <summary>
            Increments and returns the current GUID.
            </summary>
            <value>The current GUID.</value>
        </member>
        <member name="M:WixSharp.WixGuid.SequentialGuid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.WixGuid.SequentialGuid"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.WixGuid.SequentialGuid.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.WixGuid.SequentialGuid"/> class.
            </summary>
            <param name="previousGuid">The previous GUID.</param>
        </member>
        <member name="M:WixSharp.WixGuid.SequentialGuid.#ctor(System.Nullable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.WixGuid.SequentialGuid"/> class.
            </summary>
            <param name="previousGuid">The previous GUID.</param>
        </member>
        <member name="M:WixSharp.WixGuid.SequentialGuid.op_Implicit(WixSharp.WixGuid.SequentialGuid)~System.Guid">
            <summary>
            Performs an implicit conversion from <see cref="T:WixSharp.WixGuid.SequentialGuid"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:WixSharp.WixGuid.SequentialGuid.op_Implicit(System.Guid)~WixSharp.WixGuid.SequentialGuid">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Guid"/> to <see cref="T:WixSharp.WixGuid.SequentialGuid"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:WixSharp.WixGuid.SequentialGuid.op_Increment(WixSharp.WixGuid.SequentialGuid)">
            <summary>
            Implements the operator ++.
            </summary>
            <param name="sequentialGuid">The sequential GUID.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="F:WixSharp.WixGuid.ConsistentGenerationStartValue">
            <summary>
            Initial value to be used as a seed for Guid generation. If you want the Wix# project items to contain 
            not random but reproducible sequential Guids you should initialize this field.
            </summary>
        </member>
        <member name="M:WixSharp.WixGuid.NewGuid">
            <summary>
            Returns new GUID.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WixSharp.WixGuid.NewGuid(System.Object)">
            <summary>
            Returns new GUID.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WixSharp.WixGuid.Generator">
            <summary>
            Gets or sets the GUID generation algorithm.
            </summary>
            <value>
            The generator.
            </value>
        </member>
        <member name="M:WixSharp.WixGuid.HashGuidByInteger(System.Guid,System.Int32)">
            <summary>
            Hashes the Guid by the specified integer hash value.
            </summary>
            <param name="guid">The GUID.</param>
            <param name="hashValue">The hash value.</param>
            <returns>GUID value.</returns>
        </member>
        <member name="T:WixSharp.GuidGenerators">
            <summary>
            Collection of the deterministic GUID generation algorithms
            </summary>
        </member>
        <member name="M:WixSharp.GuidGenerators.Sequential(System.Object)">
            <summary>
            Returns sequentially incremented GUID. The specified seed is ignored. Every consecutive 
            call to this method will increase the last returned GUID by 1 and return its value. 
            </summary>
            <param name="seed">The seed.</param>
            <returns></returns>
        </member>
        <member name="M:WixSharp.GuidGenerators.Default(System.Object)">
            <summary>
            Default GUID generation algorithm.
            </summary>
            <param name="seed">The seed.</param>
            <returns></returns>
        </member>
        <member name="T:WixSharp.WixObject">
            <summary>
            Base class for all Wix# related types
            </summary>
        </member>
        <member name="P:WixSharp.WixObject.Attributes">
            <summary>
            Collection of Attribute/Value pairs for WiX element attributes not supported directly by Wix# objects.
            <para>You should use <c>Attributes</c> if you want to inject specific XML attributes
            for a given WiX element.</para>
            <para>For example <c>Hotkey</c> attribute is not supported by Wix# <see cref="T:WixSharp.Shortcut"/>
            but if you want them to be set in the WiX source file you may achieve this be setting
            <c>WixEntity.Attributes</c> member variable:
            <para> <code>new Shortcut { Attributes= new { {"Hotkey", "0"} }</code> </para>
            <remarks>
            You can also inject attributes into WiX components "related" to the <see cref="T:WixSharp.WixEntity"/> but not directly
            represented in the Wix# entities family. For example if you need to set a custom attribute for the WiX <c>Component</c>
            XML element you can use corresponding <see cref="T:WixSharp.File"/> attributes. The only difference from
            the <c>Hotkey</c> example is the composite (column separated) key name:
            <para> <code>new File { Attributes= new { {"Component:SharedDllRefCount", "yes"} }</code> </para>
            The code above will force the Wix# compiler to insert "SharedDllRefCount" attribute into <c>Component</c>
            XML element, which is automatically generated for the <see cref="T:WixSharp.File"/>.
            <para>Currently the only supported "related" attribute is  <c>Component</c>.</para>
            <para>Note the attribute key can include xml namespace prefix:
            <code>
            { "{dep}ProviderKey", "01234567-8901-2345-6789-012345678901" }
            </code>
            Though in this case the required namespace must be already added to the element/document.</para>
            </remarks>
            </para>
            </summary>
        </member>
        <member name="P:WixSharp.WixObject.AttributesDefinition">
            <summary>
            Optional attributes of the <c>WiX Element</c> (e.g. Secure:YesNoPath) expressed as a string KeyValue pairs (e.g. "StartOnInstall=Yes; Sequence=1").
            <para>OptionalAttributes just redirects all access calls to the <see cref="T:WixEntity.Attributes"/> member.</para>
            <para>You can also use <see cref="T:WixEntity.AttributesDefinition"/> to keep the code cleaner.</para>
            <para>Note <c>name</c> can include xml namespace prefix:
            <code>
            AttributesDefinition = "{dep}ProviderKey=01234567-8901-2345-6789-012345678901"
            </code>
            Though in this case the required namespace must be already added to the element/document.</para>
            </summary>
            <example>
            <code>
            var webSite = new WebSite
            {
                Description = "MyWebSite",
                Attributes = new Dictionary&lt;string, string&gt; { { "StartOnInstall", "Yes" },  { "Sequence", "1" } }
                //or
                AttributesDefinition = "StartOnInstall=Yes; Sequence=1"
                ...
            </code>
            </example>
        </member>
        <member name="F:WixSharp.WixObject.Feature">
            <summary>
            <see cref="F:WixSharp.WixObject.Feature"></see> the Wix object belongs to. This member is processed only for the
            WiX objects/elements that can be associated with the features (e.g. WebSite, FirewallException, ODBCDataSource, User,
            EnvironmentVariable, Merge, Dir, RegFile, RegValue, Shortcut, SqlDatabase, SqlScript).
            <remarks>
            <para>
            Wix# makes an emphasis on the main stream scenarios when an entity (e.g. File) belongs to a single feature.
            And this member is to serve these scenarios via constructors or initializers.
            </para>
            However MSI/WiX allows the same component to be included into multiple features. If it is what your deployment logic dictates
            then you need to use <see cref="F:WixSharp.WixObject.Features"/>.
            </remarks>
            </summary>
        </member>
        <member name="F:WixSharp.WixObject.Features">
            <summary>
            The collection of <see cref="F:WixSharp.WixObject.Feature"></see>s the Wix object belongs to. This member is processed only for the
            WiX objects/elements that can be associated with the features (e.g. WebSite, FirewallException, ODBCDataSource, User,
            EnvironmentVariable, Merge, Dir, RegFile, RegValue, Shortcut, SqlDatabase).
            <remarks>
            Note, this member is convenient for scenarios where the same component is to be included into multiple features.
            However, if the component is to be associated only with a single feature then <see cref="F:WixSharp.WixObject.Feature"/>
            is a more convenient choice as it can be initialized either via constructors or object initializers.eature.
            </remarks>
            </summary>
        </member>
        <member name="P:WixSharp.WixObject.ActualFeatures">
            <summary>
            Gets the actual list of features associated with the Wix object/element. It is a combined
            collection of <see cref="F:WixSharp.WixObject.Features"/> and <see cref="F:WixSharp.WixObject.Feature"/>.  union of the
            </summary>
            <value>
            The actual features.
            </value>
        </member>
        <member name="T:WixSharp.Attributes">
            <summary>
            Alias for the <c>Dictionary&lt;string, string&gt; </c> type.
            </summary>
        </member>
        <member name="T:WixSharp.Package">
             <summary>
             Generic <see cref="T:WixSharp.WixEntity"/> container for defining WiX <c>Package</c> element attributes.
             <para>These attributes are the properties of the package to be placed in the Summary Information Stream. These are visible from COM through the IStream interface, and can be seen in Explorer.</para>
            <example>The following is an example of defining the <c>Package</c> attributes.
            <code>
             var project =
                 new Project("My Product",
                     new Dir(@"%ProgramFiles%\My Company\My Product",
            
                 ...
            
             project.Package.AttributesDefinition = @"AdminImage=Yes;
                                                      Comments=Release Candidate;
                                                      Description=Fantastic product...";
            
             Compiler.BuildMsi(project);
             </code>
             </example>
             </summary>
        </member>
        <member name="T:WixSharp.WixEntity">
            <summary>
            Base class for all Wix# types representing WiX XML elements (entities)
            </summary>
        </member>
        <member name="F:WixSharp.WixEntity.Name">
            <summary>
            Name of the <see cref="T:WixSharp.WixEntity"/>.
            <para>This value is used as a <c>Name</c> for the corresponding WiX XML element.</para>
            </summary>
        </member>
        <member name="P:WixSharp.WixEntity.Id">
            <summary>
            Gets or sets the <c>Id</c> value of the <see cref="T:WixSharp.WixEntity"/>.
            <para>This value is used as a <c>Id</c> for the corresponding WiX XML element.</para>
            <para>If the <see cref="P:WixSharp.WixEntity.Id"/> value is not specified explicitly by the user the Wix# compiler
            generates it automatically insuring its uniqueness.</para>
            <remarks>
             Note: The ID auto-generation is triggered on the first access (evaluation) and in order to make the id
             allocation deterministic the compiler resets ID generator just before the build starts. However if you
             accessing any auto-id before the Build*() is called you can it interferes with the ID auto generation and eventually
             lead to the WiX ID duplications. To prevent this from happening either:"
             <para> - Avoid evaluating the auto-generated IDs values before the call to Build*()</para>
             <para> - Set the IDs (to be evaluated) explicitly</para>
             <para> - Prevent resetting auto-ID generator by setting WixEntity.DoNotResetIdGenerator to true";</para>
            </remarks>
            </summary>
            <value>The id.</value>
        </member>
        <member name="F:WixSharp.WixEntity.id">
            <summary>
            Backing value of <see cref="P:WixSharp.WixEntity.Id"/>.
            </summary>
        </member>
        <member name="F:WixSharp.WixEntity.DoNotResetIdGenerator">
            <summary>
            The do not reset auto-ID generator before starting the build.
            </summary>
        </member>
        <member name="M:WixSharp.WixEntity.ResetIdGenerator">
            <summary>
            Resets the <see cref="P:WixSharp.WixEntity.Id"/> generator. This method is exercised by the Wix# compiler before any
            <c>Build</c> operations to ensure reproducibility of the <see cref="P:WixSharp.WixEntity.Id"/> set between <c>Build()</c>
            calls.
            </summary>
        </member>
        <member name="T:WixSharp.Id">
            <summary>
            The unique string identifier of the Wix# project item. The <c>Id</c> is automatically generated 
            by Wix# engine during the MSI build unless it is explicitly specified by a project item 
            constructor parameter.
            <para><c>Id</c> is used to "stamp" every XML element of the WiX source file produced by Wix#.</para>
            </summary>
        </member>
        <member name="M:WixSharp.Id.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Id"/> class and assigns the constructor parameter
            specified to <see cref="F:WixSharp.Id.Value"/> .
            </summary>
            <param name="value">The string Id value.</param>
        </member>
        <member name="F:WixSharp.Id.Value">
            <summary>
            The string Id value.
            </summary>
        </member>
        <member name="M:WixSharp.Id.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WixSharp.Id.op_Equality(WixSharp.Id,WixSharp.Id)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="id1">The id1.</param>
            <param name="id2">The id2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:WixSharp.Id.op_Inequality(WixSharp.Id,WixSharp.Id)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="id1">The id1.</param>
            <param name="id2">The id2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:WixSharp.Id.op_Implicit(WixSharp.Id)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:WixSharp.Id"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="id">The identifier.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:WixSharp.Id.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:WixSharp.Id.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:WixSharp.WUI">
            <summary>
            Specifies predefined values for <see cref="F:WixSharp.Project.UI"/>,
            which control type of User Interface used to interact with user during the installation.
            </summary>
        </member>
        <member name="F:WixSharp.WUI.WixUI_ProgressOnly">
            <summary>
            WixUI_ProgressOnly is "no-UI" dialog set which includes only progress bar.
            </summary>
        </member>
        <member name="F:WixSharp.WUI.WixUI_Minimal">
            <summary>
            WixUI_Minimal is the simplest of the built-in WixUI dialog sets.
            </summary>
        </member>
        <member name="F:WixSharp.WUI.WixUI_InstallDir">
            <summary>
            WixUI_InstallDir does not allow the user to choose what features to install, but it adds a dialog to
            let the user choose a directory where the product will be installed.
            </summary>
        </member>
        <member name="F:WixSharp.WUI.WixUI_Common">
            <summary>
            WixUI_Common is defines "common" built-in dialog set. It is used to define additional
            custom dialogs.
            </summary>
        </member>
        <member name="F:WixSharp.WUI.WixUI_FeatureTree">
            <summary>
            WixUI_FeatureTree built-in dialog set.
            <para>WixUI_FeatureTree is a simpler version of WixUI_Mondo that omits the setup type dialog.</para>
            </summary>
        </member>
        <member name="F:WixSharp.WUI.WixUI_Mondo">
            <summary>
            WixUI_Mondo includes the full set of dialogs (hence "Mondo").
            </summary>
        </member>
        <member name="F:WixSharp.WUI.WixUI_Advanced">
            <summary>
            WixUI_Advanced provides the option of a one-click install like WixUI_Minimal, but it also allows directory and feature
            selection like other dialog sets if the user chooses to configure advanced options.
            </summary>
        </member>
        <member name="T:WixSharp.Return">
            <summary>
            Specifies predefined values for <see cref="F:WixSharp.Action.Return"/>,
            which controls invoking type of <c>Custom Actions</c>.
            </summary>
        </member>
        <member name="F:WixSharp.Return.asyncWait">
            <summary>
            Indicates that the custom action will run asynchronously but the installer will wait for the return code at sequence end.
            </summary>
        </member>
        <member name="F:WixSharp.Return.asyncNoWait">
            <summary>
            Indicates that the custom action will run asynchronously and execution may continue after the installer terminates.
            </summary>
        </member>
        <member name="F:WixSharp.Return.check">
            <summary>
            Indicates that the custom action will run synchronously and the return code will be checked for success.
            </summary>
        </member>
        <member name="F:WixSharp.Return.ignore">
            <summary>
            Indicates that the custom action will run synchronously and the return code will not be checked.
            </summary>
        </member>
        <member name="T:WixSharp.Sequence">
            <summary>
            Specifies predefined values for <see cref="F:WixSharp.Action.Sequence" />,
            which controls which MSI sequence contains corresponding <c>Custom Action</c>.
            </summary>
        </member>
        <member name="F:WixSharp.Sequence.InstallExecuteSequence">
            <summary>
            <c>Custom Action</c> belongs to <c>InstallExecuteSequence</c>.
            </summary>
        </member>
        <member name="F:WixSharp.Sequence.InstallUISequence">
            <summary>
            <c>Custom Action</c> belongs to <c>InstallUISequence</c>.
            </summary>
        </member>
        <member name="F:WixSharp.Sequence.AdminExecuteSequence">
            <summary>
            The AdminExecuteSequence table lists actions that the installer calls in sequence when the top-level ADMIN action is executed.
            </summary>
        </member>
        <member name="F:WixSharp.Sequence.AdminUISequence">
            <summary>
            The AdminUISequence table lists actions that the installer calls in sequence when the top-level ADMIN action is executed and the internal user interface level is set to full UI or reduced UI. The installer skips the actions in this table if the user interface level is set to basic UI or no UI.
            </summary>
        </member>
        <member name="F:WixSharp.Sequence.NotInSequence">
            <summary>
            <c>Custom Action</c> does not belong to any sequence. Use this value when you need <c>Custom Action</c>
            to be invoked not from the installation sequence but from another <c>Custom Action</c>.
            </summary>
        </member>
        <member name="M:WixSharp.Sequence.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.Sequence"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="F:WixSharp.Sequence.Value">
            <summary>
            The string value of the Sequence object
            </summary>
        </member>
        <member name="M:WixSharp.Sequence.GetValues">
            <summary>
            Gets the string values of the Sequence object. Note there can be more that a single value. For example
            Sequence.InstallExecuteSequence | Sequence.InstallUISequence will yield "InstallExecuteSequence" and
            "InstallExecuteSequence"
            </summary>
            <returns></returns>
        </member>
        <member name="M:WixSharp.Sequence.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:WixSharp.Sequence.op_Addition(WixSharp.Sequence,WixSharp.Sequence)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WixSharp.Sequence.op_BitwiseOr(WixSharp.Sequence,WixSharp.Sequence)">
            <summary>
            Implements the operator |.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WixSharp.Execute">
            <summary>
            Specifies predefined values for <see cref="F:WixSharp.Action.Execute"/> attribute,
            which controls at what stage of installation script <c>Custom Action</c> will be executed.
            </summary>
        </member>
        <member name="F:WixSharp.Execute.commit">
            <summary>
            Indicates that the custom action will run after successful completion of the installation script (at the end of the installation).
            </summary>
        </member>
        <member name="F:WixSharp.Execute.deferred">
            <summary>
            Indicates that the custom action runs in-script (possibly with elevated privileges).
            </summary>
        </member>
        <member name="F:WixSharp.Execute.firstSequence">
            <summary>
            Indicates that the custom action will only run in the first sequence that runs it.
            </summary>
        </member>
        <member name="F:WixSharp.Execute.immediate">
            <summary>
            Indicates that the custom action will run during normal processing time with user privileges. This is the default.
            </summary>
        </member>
        <member name="F:WixSharp.Execute.oncePerProcess">
            <summary>
            Indicates that the custom action will only run in the first sequence that runs it in the same process.
            </summary>
        </member>
        <member name="F:WixSharp.Execute.rollback">
            <summary>
            Indicates that a custom action will run in the rollback sequence when a failure occurs during installation, usually to undo changes made by a deferred custom action.
            </summary>
        </member>
        <member name="F:WixSharp.Execute.secondSequence">
            <summary>
            Indicates that a custom action should be run a second time if it was previously run in an earlier sequence.
            </summary>
        </member>
        <member name="T:WixSharp.When">
            <summary>
            Specifies predefined values for <see cref="F:WixSharp.Action.When"/>,
            which controls when the <c>Custom Action</c> occurs relative to
            the order controlling <c>Action</c>.
            <para>The order-controlling <c>Action</c> is defined by <see cref="T:WixSharp.Step"/></para>
            </summary>
        </member>
        <member name="F:WixSharp.When.After">
            <summary>
            Execute after order controlling action.
            </summary>
        </member>
        <member name="F:WixSharp.When.Before">
            <summary>
            Execute before order controlling action.
            </summary>
        </member>
        <member name="T:WixSharp.InstallScope">
            <summary>
            Use this enum to specify the installation scope of this package: per-machine or per-user.
            The enum values are mapped to the WiX InstallScope attribute of the Package element.
            </summary>
        </member>
        <member name="F:WixSharp.InstallScope.perMachine">
            <summary>
            Set this value to declare that the package is a per-machine installation and requires elevated privileges to install. Sets the ALLUSERS property to 1.
            </summary>
        </member>
        <member name="F:WixSharp.InstallScope.perUser">
            <summary>
            Set this value to declare that the package is a per-user installation and does not require elevated privileges to install. Sets the package's InstallPrivileges attribute to "limited."
            </summary>
        </member>
        <member name="T:WixSharp.DefaultScript">
            <summary>
            Sets the default script language (<see cref="F:WixSharp.IISVirtualDir.DefaultScript"/>) for the Web site.
            </summary>
        </member>
        <member name="F:WixSharp.DefaultScript.VBScript">
             <summary>
            
             </summary>
        </member>
        <member name="F:WixSharp.DefaultScript.JScript">
             <summary>
            
             </summary>
        </member>
        <member name="T:WixSharp.NativeImagePlatform">
            <summary>
            Sets the platform(s) for which native images will be generated.
            </summary>
        </member>
        <member name="M:WixSharp.NativeImagePlatform.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WixSharp.NativeImagePlatform"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="F:WixSharp.NativeImagePlatform.x86">
            <summary>
            Attempt to generate native images only for the 32-bit version of the .NET Framework on the target machine. If the 32-bit version of the .NET Framework 2.0 or newer is not present on the target machine, native image custom actions will not be scheduled. This is the default value.
            </summary>
        </member>
        <member name="F:WixSharp.NativeImagePlatform.x64">
            <summary>
            Attempt to generate native images only for the 64-bit version of the .NET Framework on the target machine. If a 64-bit version of the .NET Framework 2.0 or newer is not present on the target machine, native image custom actions will not be scheduled.
            </summary>
        </member>
        <member name="F:WixSharp.NativeImagePlatform.all">
            <summary>
            Attempt to generate native images for the 32-bit and 64-bit versions of the .NET Framework on the target machine. If a version of the .NET Framework 2.0 or newer is not present on the target machine for a processor architecture, native image custom actions will not be scheduled for that processor architecture.
            </summary>
        </member>
        <member name="T:WixSharp.Platform">
            <summary>
            Sets the <see cref="T:WixSharp.Project.Package.Platform"/>) for the target platform type.
            </summary>
        </member>
        <member name="F:WixSharp.Platform.x86">
            <summary>
            Set this value to declare that the package is an x86 package.
            </summary>
        </member>
        <member name="F:WixSharp.Platform.ia64">
            <summary>
            Set this value to declare that the package is an ia64 package. This value requires that the InstallerVersion property be set to 200 or greater.
            </summary>
        </member>
        <member name="F:WixSharp.Platform.x64">
            <summary>
             Set this value to declare that the package is an x64 package. This value requires that the InstallerVersion property be set to 200 or greater.
            </summary>
        </member>
        <member name="F:WixSharp.Platform.arm">
            <summary>
             Set this value to declare that the package is an arm package. This value requires that the  InstallerVersion property be set to 500 or greater.
            </summary>
        </member>
        <member name="T:WixSharp.CompressionLevel">
            <summary>
            Indicates the compression level for a cabinet.
            </summary>
        </member>
        <member name="T:WixSharp.StoreLocation">
            <summary>
            Sets the <see cref="T:IISVirtualDir.Certificate.StoreLocation"/> for the Web site certificate.
            </summary>
        </member>
        <member name="T:WixSharp.StoreName">
            <summary>
            Sets the (<see cref="T:IISVirtualDir.Certificate.StoreName"/>) for the Web site certificate.
            </summary>
        </member>
        <member name="F:WixSharp.StoreName.ca">
            <summary>
            Contains the certificates of certificate authorities that the user trusts to issue certificates to others. Certificates
            in these stores are normally supplied with the operating system or by the user's network administrator.
            </summary>
        </member>
        <member name="F:WixSharp.StoreName.my">
            <summary>
            Use the "personal" value instead.
            </summary>
        </member>
        <member name="F:WixSharp.StoreName.personal">
            <summary>
            Contains personal certificates. These certificates will usually have an associated private key. This store is often referred to as the "MY" certificate store.
            </summary>
        </member>
        <member name="F:WixSharp.StoreName.request">
             <summary>
            
             </summary>
        </member>
        <member name="F:WixSharp.StoreName.root">
            <summary>
            Contains the certificates of certificate authorities that the user trusts to issue certificates to others. Certificates in these stores are normally supplied with the operating system or by the user's network administrator. Certificates in this store are typically self-signed.
            </summary>
        </member>
        <member name="F:WixSharp.StoreName.otherPeople">
            <summary>
            Contains the certificates of those that the user normally sends enveloped messages to or receives signed messages from. See MSDN documentation for more information.
            </summary>
        </member>
        <member name="T:WixSharp.Isolation">
            <summary>
            Values of the application isolation level of <see cref="F:WixSharp.IISVirtualDir.Isolation"/> for pre-IIS 6 applications
            </summary>
        </member>
        <member name="F:WixSharp.Isolation.low">
            <summary>
            Means the application executes within the IIS process.
            </summary>
        </member>
        <member name="F:WixSharp.Isolation.medium">
            <summary>
            Executes pooled in a separate process.
            </summary>
        </member>
        <member name="F:WixSharp.Isolation.high">
            <summary>
            Means execution alone in a separate process.
            </summary>
        </member>
        <member name="T:WixSharp.SvcErrorControl">
            <summary>
            Determines what service action should be taken on an error.
            </summary>
        </member>
        <member name="F:WixSharp.SvcErrorControl.ignore">
             <summary>
            Logs the error and continues with the startup operation.
             </summary>
        </member>
        <member name="F:WixSharp.SvcErrorControl.normal">
             <summary>
            Logs the error, displays a message box and continues the startup operation.
             </summary>
        </member>
        <member name="F:WixSharp.SvcErrorControl.critical">
            <summary>
            Logs the error if possible and the system is restarted with the last configuration known to be good. If the last-known-good configuration is being started, the startup operation fails.
            </summary>
        </member>
        <member name="T:WixSharp.SvcStartType">
            <summary>
            Determines when the service should be started. The Windows Installer does not support boot or system.
            </summary>
        </member>
        <member name="F:WixSharp.SvcStartType.auto">
            <summary>
            The service will start during startup of the system.
            </summary>
        </member>
        <member name="F:WixSharp.SvcStartType.demand">
             <summary>
            The service will start when the service control manager calls the StartService function.
             </summary>
        </member>
        <member name="F:WixSharp.SvcStartType.disabled">
            <summary>
            The service can no longer be started.
            </summary>
        </member>
        <member name="F:WixSharp.SvcStartType.boot">
            <summary>
            The service is a device driver that will be started by the operating system boot loader. This value is not currently supported by the Windows Installer.
            </summary>
        </member>
        <member name="F:WixSharp.SvcStartType.system">
            <summary>
            The service is a device driver that will be started by the IoInitSystem function. This value is not currently supported by the Windows Installer.
            </summary>
        </member>
        <member name="T:WixSharp.SvcType">
            <summary>
            The Windows Installer does not currently support kernelDriver or systemDriver. This attribute's value must be one of the following:
            </summary>
        </member>
        <member name="F:WixSharp.SvcType.ownProcess">
            <summary>
            A Win32 service that runs its own process.
            </summary>
        </member>
        <member name="F:WixSharp.SvcType.shareProcess">
            <summary>
            A Win32 service that shares a process.
            </summary>
        </member>
        <member name="F:WixSharp.SvcType.kernelDriver">
            <summary>
            A kernel driver service. This value is not currently supported by the Windows Installer.
            </summary>
        </member>
        <member name="F:WixSharp.SvcType.systemDriver">
            <summary>
            A file system driver service. This value is not currently supported by the Windows Installer.
            </summary>
        </member>
        <member name="T:WixSharp.SvcEventType">
            <summary>
            Specifies whether an action occur on install, uninstall or both.
            </summary>
        </member>
        <member name="F:WixSharp.SvcEventType.install">
            <summary>
            Specifies that occur on install.
            </summary>
        </member>
        <member name="F:WixSharp.SvcEventType.uninstall">
            <summary>
            Specifies that occur on uninstall.
            </summary>
        </member>
        <member name="F:WixSharp.SvcEventType.both">
            <summary>
            Specifies that occur on install and uninstall.
            </summary>
        </member>
        <member name="T:WixSharp.EnvVarPart">
            <summary>
            Indicates how value of the environment variable should be set.
            </summary>
        </member>
        <member name="F:WixSharp.EnvVarPart.all">
            <summary>
            This value is the entire environmental variable. This is the default.
            </summary>
        </member>
        <member name="F:WixSharp.EnvVarPart.first">
             <summary>
            This value is prefixed.
             </summary>
        </member>
        <member name="F:WixSharp.EnvVarPart.last">
             <summary>
            This value is appended.
             </summary>
        </member>
        <member name="T:WixSharp.EnvVarAction">
            <summary>
            Specifies whether the environmental variable should be created, set or removed when the parent component is installed.
            </summary>
        </member>
        <member name="F:WixSharp.EnvVarAction.create">
            <summary>
            Creates the environment variable if it does not exist, then set it during installation. This has no effect on the value of
            the environment variable if it already exists.
            </summary>
        </member>
        <member name="F:WixSharp.EnvVarAction.set">
            <summary>
            Creates the environment variable if it does not exist, and then set it during installation. If the environment variable exists,
            set it during the installation.
            </summary>
        </member>
        <member name="F:WixSharp.EnvVarAction.remove">
            <summary>
            Removes the environment variable during an installation. The installer only removes an environment variable
            during an installation if the name and value of the variable match the entries in the Name and Value attributes.
            If you want to remove an environment variable, regardless of its value, do not set the Value attribute.
            </summary>
        </member>
        <member name="T:WixSharp.ProcessorArchitecture">
            <summary>
            Specifies the architecture for this assembly.
            </summary>
        </member>
        <member name="F:WixSharp.ProcessorArchitecture.msil">
            <summary>
            The file is a .NET Framework assembly that is processor-neutral.
            </summary>
        </member>
        <member name="F:WixSharp.ProcessorArchitecture.x86">
            <summary>
            The file is a .NET Framework assembly for the x86 processor.
            </summary>
        </member>
        <member name="F:WixSharp.ProcessorArchitecture.x64">
            <summary>
            The file is a .NET Framework assembly for the x64 processor.
            </summary>
        </member>
        <member name="F:WixSharp.ProcessorArchitecture.ia64">
            <summary>
            The file is a .NET Framework assembly for the ia64 processor.
            </summary>
        </member>
        <member name="T:WixSharp.DriverArchitecture">
            <summary>
            Specifies the architecture for the driver to be installed.
            </summary>
        </member>
        <member name="F:WixSharp.DriverArchitecture.x86">
            <summary>
            The driver is for the x86 processor.
            </summary>
        </member>
        <member name="F:WixSharp.DriverArchitecture.x64">
            <summary>
            The driver is for the x64 processor.
            </summary>
        </member>
        <member name="F:WixSharp.DriverArchitecture.ia64">
            <summary>
            The driver is for the ia64 processor.
            </summary>
        </member>
        <member name="T:WixSharp.RegistryKeyAction">
            <summary>
            Specifies what Action should be executed on the RegistryKey when un-/installing
            </summary>
        </member>
        <member name="F:WixSharp.RegistryKeyAction.create">
            <summary>
            Creates the key, if absent, when the parent component is installed.
            </summary>
        </member>
        <member name="F:WixSharp.RegistryKeyAction.createAndRemoveOnUninstall">
            <summary>
            Creates the key, if absent, when the parent component is installed then remove the key with all its values and subkeys when the parent component is uninstalled.
            </summary>
        </member>
        <member name="F:WixSharp.RegistryKeyAction.none">
            <summary>
            Does nothing; this element is used merely in WiX authoring for organization and does nothing to the final output.
            </summary>
        </member>
        <member name="T:WixSharp.FeatureDisplay">
            <summary>
            Determines the initial display of this feature in the feature tree.
            </summary>
        </member>
        <member name="F:WixSharp.FeatureDisplay.collapse">
            <summary>
            Initially shows the feature collapsed. This is the default value.
            </summary>
        </member>
        <member name="F:WixSharp.FeatureDisplay.expand">
            <summary>
             Initially shows the feature expanded.
            </summary>
        </member>
        <member name="F:WixSharp.FeatureDisplay.hidden">
            <summary>
             Prevents the feature from displaying in the user interface.
            </summary>
        </member>
        <member name="T:WixSharp.WixQuietExecAction">
             <summary>
             Defines WiX <c>QtExecCmdLineAction</c> CustomAction. 
             <para>
             This class is loseley mapped to the <c>WixQuietExec</c> WiX element. WixQuietExec superseeds older CAQuietExec as well as fixes a few 
             runtime artefacts WiX CAQuietExec was associated with.
             </para>
             <para><see cref="T:WixSharp.WixQuietExecAction"/> executes specified application with optional arguments.
             You do not have to specify full path to the application to be executed as long as its directory
             is well-known (e.g. listed in system environment variable <c>PATH</c>) on the target system.</para>
             <remarks>
             <see cref="T:WixSharp.WixQuietExecAction"/> often needs to be executed with the elevated privileges. Thus after instantiation it will have 
             <see cref="F:WixSharp.Action.Impersonate"/> set to <c>false</c> and <see cref="F:WixSharp.Action.Execute"/> set to <c>Execute.deferred</c> to allow elevating.
             </remarks>
             </summary>
             
             <example>The following is a complete setup script defining <see cref="T:WixSharp.WixQuietExecAction"/> for
             opening <c>bool.ini</c> file in <c>Notepad.exe</c>:
             <code>
            static public void Main(string[] args)
            {
                var project = new Project()
                {
                    UI = WUI.WixUI_ProgressOnly,
                    Name = "CustomActionTest",
                    Actions = new[] { new WixQuietExecAction("notepad.exe", @"C:\boot.ini") },
                 };
                 
                 Compiler.BuildMsi(project);
             }
             </code>
             </example>
        </member>
        <member name="M:WixSharp.WixQuietExecAction.#ctor">
            <summary>
            Executes a new instance of the <see cref="T:WixSharp.WixQuietExecAction"/> class.
            </summary>
        </member>
        <member name="M:WixSharp.WixQuietExecAction.#ctor(System.String,System.String)">
            <summary>
            Executes a new instance of the <see cref="T:WixSharp.WixQuietExecAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="appPath">Path to the application to be executed. This can be a file name only if the location of the application is well-known.</param>
            <param name="args">The arguments to be passed to the application during the execution.</param>
        </member>
        <member name="M:WixSharp.WixQuietExecAction.#ctor(WixSharp.Id,System.String,System.String)">
            <summary>
            Executes a new instance of the <see cref="T:WixSharp.WixQuietExecAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.WixQuietExecAction"/> instance.</param>
            <param name="appPath">Path to the application to be executed. This can be a file name only if the location of the application is well-known.</param>
            <param name="args">The arguments to be passed to the application during the execution.</param>
        </member>
        <member name="M:WixSharp.WixQuietExecAction.#ctor(System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Executes a new instance of the <see cref="T:WixSharp.WixQuietExecAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="appPath">Path to the application to be executed. This can be a file name only if the location of the application is well-known.</param>
            <param name="args">The arguments to be passed to the application during the execution.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.WixQuietExecAction"/>.</param>
        </member>
        <member name="M:WixSharp.WixQuietExecAction.#ctor(WixSharp.Id,System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition)">
            <summary>
            Executes a new instance of the <see cref="T:WixSharp.WixQuietExecAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.WixQuietExecAction"/> instance.</param>
            <param name="appPath">Path to the application to be executed. This can be a file name only if the location of the application is well-known.</param>
            <param name="args">The arguments to be passed to the application during the execution.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.WixQuietExecAction"/>.</param>
        </member>
        <member name="M:WixSharp.WixQuietExecAction.#ctor(System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Executes a new instance of the <see cref="T:WixSharp.WixQuietExecAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="appPath">Path to the application to be executed. This can be a file name only if the location of the application is well-known.</param>
            <param name="args">The arguments to be passed to the application during the execution.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.WixQuietExecAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="M:WixSharp.WixQuietExecAction.#ctor(WixSharp.Id,System.String,System.String,WixSharp.Return,WixSharp.When,WixSharp.Step,WixSharp.Condition,WixSharp.Sequence)">
            <summary>
            Executes a new instance of the <see cref="T:WixSharp.WixQuietExecAction"/> class with properties/fields initialized with specified parameters.
            </summary>
            <param name="id">The explicit <see cref="T:WixSharp.Id"></see> to be associated with <see cref="T:WixSharp.WixQuietExecAction"/> instance.</param>
            <param name="appPath">Path to the application to be executed. This can be a file name only if the location of the application is well-known.</param>
            <param name="args">The arguments to be passed to the application during the execution.</param>
            <param name="returnType">The return type of the action.</param>
            <param name="when"><see cref="T:WixSharp.When"/> the action should be executed with respect to the <paramref name="step"/> parameter.</param>
            <param name="step"><see cref="T:WixSharp.Step"/> the action should be executed before/after during the installation.</param>
            <param name="condition">The launch condition for the <see cref="T:WixSharp.WixQuietExecAction"/>.</param>
            <param name="sequence">The MSI sequence the action belongs to.</param>
        </member>
        <member name="F:WixSharp.WixQuietExecAction.AppPath">
            <summary>
            Path to the application to be executed. This can be a file name only if the location of the application is well-known.
            </summary>
        </member>
        <member name="F:WixSharp.WixQuietExecAction.Args">
            <summary>
            The arguments to be passed to the application during the execution.
            </summary>
        </member>
        <member name="F:WixSharp.WixQuietExecAction.CommandLineProperty">
            <summary>
            WixQuietExecCmdLine or QtExecCmdLine
            </summary>
        </member>
        <member name="F:WixSharp.WixQuietExecAction.ActionName">
            <summary>
            WixQuietExec or CAQuietExec 
            </summary>
        </member>
        <member name="T:ExternalTool">
            <summary>
            A generic utility class for running console application tools (e.g. compilers, utilities)
            </summary>
        </member>
        <member name="P:ExternalTool.ExePath">
            <summary>
            Gets or sets the path to the exe file of the tool to be executed.
            </summary>
            <value>The exe path.</value>
        </member>
        <member name="P:ExternalTool.Arguments">
            <summary>
            Gets or sets the arguments for the exe file of the tool to be executed.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:ExternalTool.WellKnownLocations">
            <summary>
            Gets or sets the well known locations for probing the exe file.
            <para>
            By default probing is conducted in the locations defined in the system environment variable <c>PATH</c>. By settin <c>WellKnownLocations</c>
            you can add som extra probing locations. The directories must be separated by the ';' character.
            </para>
            </summary>
            <value>The well known locations.</value>
        </member>
        <member name="M:ExternalTool.WinRun">
            <summary>
            Runs the exec file with the console output completely hidden and discarded.
            </summary>
            <returns>The process exit code.</returns>
        </member>
        <member name="M:ExternalTool.ConsoleRun">
            <summary>
            Runs the exec file with the console and redirects the output into the current process console output.
            </summary>
            <returns>The process exit code.</returns>
        </member>
        <member name="M:ExternalTool.ConsoleRun(System.Action{System.String})">
            <summary>
            Runs the exec file with the console and intercepts and redirects the output into the user specified delegate.
            </summary>
            <param name="onConsoleOut">The on console out.</param>
            <returns>The process exit code.</returns>
        </member>
    </members>
</doc>
